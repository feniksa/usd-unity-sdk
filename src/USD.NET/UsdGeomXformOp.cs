//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdGeomXformOp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdGeomXformOp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomXformOp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdGeomXformOp() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdGeomXformOp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdGeomXformOp() : this(USDIPCPINVOKE.new_UsdGeomXformOp__SWIG_0(), true) {
  }

  public UsdGeomXformOp(UsdAttribute attr, bool isInverseOp) : this(USDIPCPINVOKE.new_UsdGeomXformOp__SWIG_1(UsdAttribute.getCPtr(attr), isInverseOp), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdGeomXformOp(UsdAttribute attr) : this(USDIPCPINVOKE.new_UsdGeomXformOp__SWIG_2(UsdAttribute.getCPtr(attr)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsXformOp(UsdAttribute attr) {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_IsXformOp__SWIG_0(UsdAttribute.getCPtr(attr));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsXformOp(TfToken attrName) {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_IsXformOp__SWIG_1(TfToken.getCPtr(attrName));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TfToken GetOpTypeToken(UsdGeomXformOp.Type opType) {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetOpTypeToken((int)opType), false);
    return ret;
  }

  public static UsdGeomXformOp.Type GetOpTypeEnum(TfToken opTypeToken) {
    UsdGeomXformOp.Type ret = (UsdGeomXformOp.Type)USDIPCPINVOKE.UsdGeomXformOp_GetOpTypeEnum(TfToken.getCPtr(opTypeToken));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdGeomXformOp.Precision GetPrecisionFromValueTypeName(SdfValueTypeName typeName) {
    UsdGeomXformOp.Precision ret = (UsdGeomXformOp.Precision)USDIPCPINVOKE.UsdGeomXformOp_GetPrecisionFromValueTypeName(SdfValueTypeName.getCPtr(typeName));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfValueTypeName GetValueTypeName(UsdGeomXformOp.Type opType, UsdGeomXformOp.Precision precision) {
    SdfValueTypeName ret = new SdfValueTypeName(USDIPCPINVOKE.UsdGeomXformOp_GetValueTypeName((int)opType, (int)precision), false);
    return ret;
  }

  public static TfToken GetOpName(UsdGeomXformOp.Type opType, TfToken opSuffix, bool inverse) {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetOpName__SWIG_0((int)opType, TfToken.getCPtr(opSuffix), inverse), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TfToken GetOpName(UsdGeomXformOp.Type opType, TfToken opSuffix) {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetOpName__SWIG_1((int)opType, TfToken.getCPtr(opSuffix)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TfToken GetOpName(UsdGeomXformOp.Type opType) {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetOpName__SWIG_2((int)opType), true);
    return ret;
  }

  public UsdGeomXformOp.Type GetOpType() {
    UsdGeomXformOp.Type ret = (UsdGeomXformOp.Type)USDIPCPINVOKE.UsdGeomXformOp_GetOpType(swigCPtr);
    return ret;
  }

  public UsdGeomXformOp.Precision GetPrecision() {
    UsdGeomXformOp.Precision ret = (UsdGeomXformOp.Precision)USDIPCPINVOKE.UsdGeomXformOp_GetPrecision(swigCPtr);
    return ret;
  }

  public bool IsInverseOp() {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_IsInverseOp(swigCPtr);
    return ret;
  }

  public TfToken GetOpName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetOpName__SWIG_3(swigCPtr), true);
    return ret;
  }

  public bool HasSuffix(TfToken suffix) {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_HasSuffix(swigCPtr, TfToken.getCPtr(suffix));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GfMatrix4d GetOpTransform(UsdGeomXformOp.Type opType, VtValue opVal, bool isInverseOp) {
    GfMatrix4d ret = new GfMatrix4d(USDIPCPINVOKE.UsdGeomXformOp_GetOpTransform__SWIG_0((int)opType, VtValue.getCPtr(opVal), isInverseOp), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GfMatrix4d GetOpTransform(UsdGeomXformOp.Type opType, VtValue opVal) {
    GfMatrix4d ret = new GfMatrix4d(USDIPCPINVOKE.UsdGeomXformOp_GetOpTransform__SWIG_1((int)opType, VtValue.getCPtr(opVal)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfMatrix4d GetOpTransform(UsdTimeCode time) {
    GfMatrix4d ret = new GfMatrix4d(USDIPCPINVOKE.UsdGeomXformOp_GetOpTransform__SWIG_2(swigCPtr, UsdTimeCode.getCPtr(time)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MightBeTimeVarying() {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_MightBeTimeVarying(swigCPtr);
    return ret;
  }

  public UsdAttribute GetAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomXformOp_GetAttr(swigCPtr), false);
    return ret;
  }

  public bool IsDefined() {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_IsDefined(swigCPtr);
    return ret;
  }

  public TfToken GetName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetName(swigCPtr), false);
    return ret;
  }

  public TfToken GetBaseName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetBaseName(swigCPtr), true);
    return ret;
  }

  public TfToken GetNamespace() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomXformOp_GetNamespace(swigCPtr), true);
    return ret;
  }

  public StdStringVector SplitName() {
    StdStringVector ret = new StdStringVector(USDIPCPINVOKE.UsdGeomXformOp_SplitName(swigCPtr), true);
    return ret;
  }

  public SdfValueTypeName GetTypeName() {
    SdfValueTypeName ret = new SdfValueTypeName(USDIPCPINVOKE.UsdGeomXformOp_GetTypeName(swigCPtr), true);
    return ret;
  }

  public bool GetTimeSamples(StdDoubleVector times) {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_GetTimeSamples(swigCPtr, StdDoubleVector.getCPtr(times));
    return ret;
  }

  public uint GetNumTimeSamples() {
    uint ret = USDIPCPINVOKE.UsdGeomXformOp_GetNumTimeSamples(swigCPtr);
    return ret;
  }

  public bool Set(GfMatrix4d value, UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_Set__SWIG_2(swigCPtr, GfMatrix4d.getCPtr(value), UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Set(GfMatrix4d value) {
    bool ret = USDIPCPINVOKE.UsdGeomXformOp_Set__SWIG_3(swigCPtr, GfMatrix4d.getCPtr(value));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    TypeInvalid,
    TypeTranslate,
    TypeScale,
    TypeRotateX,
    TypeRotateY,
    TypeRotateZ,
    TypeRotateXYZ,
    TypeRotateXZY,
    TypeRotateYXZ,
    TypeRotateYZX,
    TypeRotateZXY,
    TypeRotateZYX,
    TypeOrient,
    TypeTransform
  }

  public enum Precision {
    PrecisionDouble,
    PrecisionFloat,
    PrecisionHalf
  }

}

}
