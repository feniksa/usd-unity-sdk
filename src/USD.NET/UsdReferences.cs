//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdReferences : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdReferences(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdReferences obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdReferences() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdReferences(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool AddReference(SWIGTYPE_p_SdfReference arg0, UsdListPosition position) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_0(swigCPtr, SWIGTYPE_p_SdfReference.getCPtr(arg0), (int)position);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(SWIGTYPE_p_SdfReference arg0) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_1(swigCPtr, SWIGTYPE_p_SdfReference.getCPtr(arg0));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(string identifier, SdfPath primPath, SdfLayerOffset layerOffset, UsdListPosition position) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_2(swigCPtr, identifier, SdfPath.getCPtr(primPath), SdfLayerOffset.getCPtr(layerOffset), (int)position);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(string identifier, SdfPath primPath, SdfLayerOffset layerOffset) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_3(swigCPtr, identifier, SdfPath.getCPtr(primPath), SdfLayerOffset.getCPtr(layerOffset));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(string identifier, SdfPath primPath) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_4(swigCPtr, identifier, SdfPath.getCPtr(primPath));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(string identifier, SdfLayerOffset layerOffset, UsdListPosition position) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_5(swigCPtr, identifier, SdfLayerOffset.getCPtr(layerOffset), (int)position);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(string identifier, SdfLayerOffset layerOffset) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_6(swigCPtr, identifier, SdfLayerOffset.getCPtr(layerOffset));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddReference(string identifier) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddReference__SWIG_7(swigCPtr, identifier);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddInternalReference(SdfPath primPath, SdfLayerOffset layerOffset, UsdListPosition position) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddInternalReference__SWIG_0(swigCPtr, SdfPath.getCPtr(primPath), SdfLayerOffset.getCPtr(layerOffset), (int)position);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddInternalReference(SdfPath primPath, SdfLayerOffset layerOffset) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddInternalReference__SWIG_1(swigCPtr, SdfPath.getCPtr(primPath), SdfLayerOffset.getCPtr(layerOffset));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddInternalReference(SdfPath primPath) {
    bool ret = USDIPCPINVOKE.UsdReferences_AddInternalReference__SWIG_2(swigCPtr, SdfPath.getCPtr(primPath));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveReference(SWIGTYPE_p_SdfReference arg0) {
    bool ret = USDIPCPINVOKE.UsdReferences_RemoveReference(swigCPtr, SWIGTYPE_p_SdfReference.getCPtr(arg0));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ClearReferences() {
    bool ret = USDIPCPINVOKE.UsdReferences_ClearReferences(swigCPtr);
    return ret;
  }

  public bool SetReferences(SWIGTYPE_p_SdfReferenceVector items) {
    bool ret = USDIPCPINVOKE.UsdReferences_SetReferences(swigCPtr, SWIGTYPE_p_SdfReferenceVector.getCPtr(items));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdPrim GetPrim() {
    UsdPrim ret = new UsdPrim(USDIPCPINVOKE.UsdReferences_GetPrim__SWIG_0(swigCPtr), false);
    return ret;
  }

}

}
