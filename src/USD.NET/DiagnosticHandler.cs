//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class DiagnosticHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DiagnosticHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DiagnosticHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DiagnosticHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_DiagnosticHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static DiagnosticHandler GetGlobalHandler() {
    global::System.IntPtr cPtr = USDIPCPINVOKE.DiagnosticHandler_GetGlobalHandler();
    DiagnosticHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new DiagnosticHandler(cPtr, false);
    return ret;
  }

  public static void SetGlobalHandler(DiagnosticHandler handler) {
    USDIPCPINVOKE.DiagnosticHandler_SetGlobalHandler(DiagnosticHandler.getCPtr(handler));
  }

  public virtual void OnInfo(string msg) {
    if (SwigDerivedClassHasMethod("OnInfo", swigMethodTypes0)) USDIPCPINVOKE.DiagnosticHandler_OnInfoSwigExplicitDiagnosticHandler(swigCPtr, msg); else USDIPCPINVOKE.DiagnosticHandler_OnInfo(swigCPtr, msg);
  }

  public virtual void OnWarning(string msg) {
    if (SwigDerivedClassHasMethod("OnWarning", swigMethodTypes1)) USDIPCPINVOKE.DiagnosticHandler_OnWarningSwigExplicitDiagnosticHandler(swigCPtr, msg); else USDIPCPINVOKE.DiagnosticHandler_OnWarning(swigCPtr, msg);
  }

  public virtual void OnError(string msg) {
    if (SwigDerivedClassHasMethod("OnError", swigMethodTypes2)) USDIPCPINVOKE.DiagnosticHandler_OnErrorSwigExplicitDiagnosticHandler(swigCPtr, msg); else USDIPCPINVOKE.DiagnosticHandler_OnError(swigCPtr, msg);
  }

  public virtual void OnFatalError(string msg) {
    if (SwigDerivedClassHasMethod("OnFatalError", swigMethodTypes3)) USDIPCPINVOKE.DiagnosticHandler_OnFatalErrorSwigExplicitDiagnosticHandler(swigCPtr, msg); else USDIPCPINVOKE.DiagnosticHandler_OnFatalError(swigCPtr, msg);
  }

  public DiagnosticHandler() : this(USDIPCPINVOKE.new_DiagnosticHandler(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnInfo", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateDiagnosticHandler_0(SwigDirectorOnInfo);
    if (SwigDerivedClassHasMethod("OnWarning", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateDiagnosticHandler_1(SwigDirectorOnWarning);
    if (SwigDerivedClassHasMethod("OnError", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateDiagnosticHandler_2(SwigDirectorOnError);
    if (SwigDerivedClassHasMethod("OnFatalError", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateDiagnosticHandler_3(SwigDirectorOnFatalError);
    USDIPCPINVOKE.DiagnosticHandler_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(DiagnosticHandler));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnInfo(string msg) {
    OnInfo(msg);
  }

  private void SwigDirectorOnWarning(string msg) {
    OnWarning(msg);
  }

  private void SwigDirectorOnError(string msg) {
    OnError(msg);
  }

  private void SwigDirectorOnFatalError(string msg) {
    OnFatalError(msg);
  }

  public delegate void SwigDelegateDiagnosticHandler_0(string msg);
  public delegate void SwigDelegateDiagnosticHandler_1(string msg);
  public delegate void SwigDelegateDiagnosticHandler_2(string msg);
  public delegate void SwigDelegateDiagnosticHandler_3(string msg);

  private SwigDelegateDiagnosticHandler_0 swigDelegate0;
  private SwigDelegateDiagnosticHandler_1 swigDelegate1;
  private SwigDelegateDiagnosticHandler_2 swigDelegate2;
  private SwigDelegateDiagnosticHandler_3 swigDelegate3;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(string) };
}

}
