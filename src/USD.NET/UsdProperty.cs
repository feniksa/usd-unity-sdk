//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdProperty : UsdObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdProperty(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdProperty_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdProperty obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdProperty() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdProperty(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdProperty() : this(USDIPCPINVOKE.new_UsdProperty(), true) {
  }

  public SWIGTYPE_p_SdfPropertySpecHandleVector GetPropertyStack(UsdTimeCode time) {
    SWIGTYPE_p_SdfPropertySpecHandleVector ret = new SWIGTYPE_p_SdfPropertySpecHandleVector(USDIPCPINVOKE.UsdProperty_GetPropertyStack__SWIG_0(swigCPtr, UsdTimeCode.getCPtr(time)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfPropertySpecHandleVector GetPropertyStack() {
    SWIGTYPE_p_SdfPropertySpecHandleVector ret = new SWIGTYPE_p_SdfPropertySpecHandleVector(USDIPCPINVOKE.UsdProperty_GetPropertyStack__SWIG_1(swigCPtr), true);
    return ret;
  }

  public TfToken GetBaseName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdProperty_GetBaseName(swigCPtr), true);
    return ret;
  }

  public TfToken GetNamespace() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdProperty_GetNamespace(swigCPtr), true);
    return ret;
  }

  public StdStringVector SplitName() {
    StdStringVector ret = new StdStringVector(USDIPCPINVOKE.UsdProperty_SplitName(swigCPtr), true);
    return ret;
  }

  public string GetDisplayGroup() {
    string ret = USDIPCPINVOKE.UsdProperty_GetDisplayGroup(swigCPtr);
    return ret;
  }

  public bool SetDisplayGroup(string displayGroup) {
    bool ret = USDIPCPINVOKE.UsdProperty_SetDisplayGroup(swigCPtr, displayGroup);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ClearDisplayGroup() {
    bool ret = USDIPCPINVOKE.UsdProperty_ClearDisplayGroup(swigCPtr);
    return ret;
  }

  public bool HasAuthoredDisplayGroup() {
    bool ret = USDIPCPINVOKE.UsdProperty_HasAuthoredDisplayGroup(swigCPtr);
    return ret;
  }

  public StdStringVector GetNestedDisplayGroups() {
    StdStringVector ret = new StdStringVector(USDIPCPINVOKE.UsdProperty_GetNestedDisplayGroups(swigCPtr), true);
    return ret;
  }

  public bool SetNestedDisplayGroups(StdStringVector nestedGroups) {
    bool ret = USDIPCPINVOKE.UsdProperty_SetNestedDisplayGroups(swigCPtr, StdStringVector.getCPtr(nestedGroups));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetDisplayName() {
    string ret = USDIPCPINVOKE.UsdProperty_GetDisplayName(swigCPtr);
    return ret;
  }

  public bool SetDisplayName(string name) {
    bool ret = USDIPCPINVOKE.UsdProperty_SetDisplayName(swigCPtr, name);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ClearDisplayName() {
    bool ret = USDIPCPINVOKE.UsdProperty_ClearDisplayName(swigCPtr);
    return ret;
  }

  public bool HasAuthoredDisplayName() {
    bool ret = USDIPCPINVOKE.UsdProperty_HasAuthoredDisplayName(swigCPtr);
    return ret;
  }

  public bool IsCustom() {
    bool ret = USDIPCPINVOKE.UsdProperty_IsCustom(swigCPtr);
    return ret;
  }

  public bool SetCustom(bool isCustom) {
    bool ret = USDIPCPINVOKE.UsdProperty_SetCustom(swigCPtr, isCustom);
    return ret;
  }

  public bool IsDefined() {
    bool ret = USDIPCPINVOKE.UsdProperty_IsDefined(swigCPtr);
    return ret;
  }

  public bool IsAuthored() {
    bool ret = USDIPCPINVOKE.UsdProperty_IsAuthored(swigCPtr);
    return ret;
  }

  public bool IsAuthoredAt(UsdEditTarget editTarget) {
    bool ret = USDIPCPINVOKE.UsdProperty_IsAuthoredAt(swigCPtr, UsdEditTarget.getCPtr(editTarget));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdProperty FlattenTo(UsdPrim parent) {
    UsdProperty ret = new UsdProperty(USDIPCPINVOKE.UsdProperty_FlattenTo__SWIG_0(swigCPtr, UsdPrim.getCPtr(parent)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdProperty FlattenTo(UsdPrim parent, TfToken propName) {
    UsdProperty ret = new UsdProperty(USDIPCPINVOKE.UsdProperty_FlattenTo__SWIG_1(swigCPtr, UsdPrim.getCPtr(parent), TfToken.getCPtr(propName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdProperty FlattenTo(UsdProperty property) {
    UsdProperty ret = new UsdProperty(USDIPCPINVOKE.UsdProperty_FlattenTo__SWIG_2(swigCPtr, UsdProperty.getCPtr(property)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
