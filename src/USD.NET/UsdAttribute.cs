//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdAttribute : UsdProperty {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdAttribute(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdAttribute_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdAttribute obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdAttribute() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdAttribute(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdAttribute() : this(USDIPCPINVOKE.new_UsdAttribute(), true) {
  }

  public SdfVariability GetVariability() {
    SdfVariability ret = (SdfVariability)USDIPCPINVOKE.UsdAttribute_GetVariability(swigCPtr);
    return ret;
  }

  public bool SetVariability(SdfVariability variability) {
    bool ret = USDIPCPINVOKE.UsdAttribute_SetVariability(swigCPtr, (int)variability);
    return ret;
  }

  public SdfValueTypeName GetTypeName() {
    SdfValueTypeName ret = new SdfValueTypeName(USDIPCPINVOKE.UsdAttribute_GetTypeName(swigCPtr), true);
    return ret;
  }

  public bool SetTypeName(SdfValueTypeName typeName) {
    bool ret = USDIPCPINVOKE.UsdAttribute_SetTypeName(swigCPtr, SdfValueTypeName.getCPtr(typeName));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TfToken GetRoleName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdAttribute_GetRoleName(swigCPtr), true);
    return ret;
  }

  public static bool GetUnionedTimeSamples(UsdAttributeVector attrs, StdDoubleVector times) {
    bool ret = USDIPCPINVOKE.UsdAttribute_GetUnionedTimeSamples(UsdAttributeVector.getCPtr(attrs), StdDoubleVector.getCPtr(times));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GetUnionedTimeSamplesInInterval(UsdAttributeVector attrs, GfInterval interval, StdDoubleVector times) {
    bool ret = USDIPCPINVOKE.UsdAttribute_GetUnionedTimeSamplesInInterval(UsdAttributeVector.getCPtr(attrs), GfInterval.getCPtr(interval), StdDoubleVector.getCPtr(times));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumTimeSamples() {
    uint ret = USDIPCPINVOKE.UsdAttribute_GetNumTimeSamples(swigCPtr);
    return ret;
  }

  public bool GetBracketingTimeSamples(double desiredTime, out double lower, out double upper, out double hasTimeSamples) {
    bool ret = USDIPCPINVOKE.UsdAttribute_GetBracketingTimeSamples(swigCPtr, desiredTime, out lower, out upper, out hasTimeSamples);
    return ret;
  }

  public bool HasValue() {
    bool ret = USDIPCPINVOKE.UsdAttribute_HasValue(swigCPtr);
    return ret;
  }

  public bool HasAuthoredValueOpinion() {
    bool ret = USDIPCPINVOKE.UsdAttribute_HasAuthoredValueOpinion(swigCPtr);
    return ret;
  }

  public bool HasFallbackValue() {
    bool ret = USDIPCPINVOKE.UsdAttribute_HasFallbackValue(swigCPtr);
    return ret;
  }

  public bool ValueMightBeTimeVarying() {
    bool ret = USDIPCPINVOKE.UsdAttribute_ValueMightBeTimeVarying(swigCPtr);
    return ret;
  }

  public bool Get(VtValue value, UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdAttribute_Get__SWIG_2(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdResolveInfo GetResolveInfo(UsdTimeCode time) {
    UsdResolveInfo ret = new UsdResolveInfo(USDIPCPINVOKE.UsdAttribute_GetResolveInfo__SWIG_0(swigCPtr, UsdTimeCode.getCPtr(time)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdResolveInfo GetResolveInfo() {
    UsdResolveInfo ret = new UsdResolveInfo(USDIPCPINVOKE.UsdAttribute_GetResolveInfo__SWIG_1(swigCPtr), true);
    return ret;
  }

  public bool Set(VtValue value, UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdAttribute_Set__SWIG_2(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Set(VtValue value) {
    bool ret = USDIPCPINVOKE.UsdAttribute_Set__SWIG_3(swigCPtr, VtValue.getCPtr(value));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Clear() {
    bool ret = USDIPCPINVOKE.UsdAttribute_Clear(swigCPtr);
    return ret;
  }

  public bool ClearAtTime(UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdAttribute_ClearAtTime(swigCPtr, UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ClearDefault() {
    bool ret = USDIPCPINVOKE.UsdAttribute_ClearDefault(swigCPtr);
    return ret;
  }

  public void Block() {
    USDIPCPINVOKE.UsdAttribute_Block(swigCPtr);
  }

  public bool AddConnection(SdfPath source, UsdListPosition position) {
    bool ret = USDIPCPINVOKE.UsdAttribute_AddConnection__SWIG_0(swigCPtr, SdfPath.getCPtr(source), (int)position);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddConnection(SdfPath source) {
    bool ret = USDIPCPINVOKE.UsdAttribute_AddConnection__SWIG_1(swigCPtr, SdfPath.getCPtr(source));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveConnection(SdfPath source) {
    bool ret = USDIPCPINVOKE.UsdAttribute_RemoveConnection(swigCPtr, SdfPath.getCPtr(source));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BlockConnections() {
    bool ret = USDIPCPINVOKE.UsdAttribute_BlockConnections(swigCPtr);
    return ret;
  }

  public bool SetConnections(SdfPathVector sources) {
    bool ret = USDIPCPINVOKE.UsdAttribute_SetConnections(swigCPtr, SdfPathVector.getCPtr(sources));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ClearConnections() {
    bool ret = USDIPCPINVOKE.UsdAttribute_ClearConnections(swigCPtr);
    return ret;
  }

  public bool GetConnections(SdfPathVector sources) {
    bool ret = USDIPCPINVOKE.UsdAttribute_GetConnections(swigCPtr, SdfPathVector.getCPtr(sources));
    return ret;
  }

  public bool HasAuthoredConnections() {
    bool ret = USDIPCPINVOKE.UsdAttribute_HasAuthoredConnections(swigCPtr);
    return ret;
  }

  public TfToken GetColorSpace() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdAttribute_GetColorSpace(swigCPtr), true);
    return ret;
  }

  public void SetColorSpace(TfToken colorSpace) {
    USDIPCPINVOKE.UsdAttribute_SetColorSpace(swigCPtr, TfToken.getCPtr(colorSpace));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasColorSpace() {
    bool ret = USDIPCPINVOKE.UsdAttribute_HasColorSpace(swigCPtr);
    return ret;
  }

  public bool ClearColorSpace() {
    bool ret = USDIPCPINVOKE.UsdAttribute_ClearColorSpace(swigCPtr);
    return ret;
  }

  public StdDoubleVector GetTimeSamples() {
    StdDoubleVector ret = new StdDoubleVector(USDIPCPINVOKE.UsdAttribute_GetTimeSamples(swigCPtr), true);
    return ret;
  }

  public StdDoubleVector GetTimeSamplesInInterval(GfInterval interval) {
    StdDoubleVector ret = new StdDoubleVector(USDIPCPINVOKE.UsdAttribute_GetTimeSamplesInInterval(swigCPtr, GfInterval.getCPtr(interval)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VtValue Get() {
    VtValue ret = new VtValue(USDIPCPINVOKE.UsdAttribute_Get__SWIG_3(swigCPtr), true);
    return ret;
  }

  public VtValue Get(UsdTimeCode time) {
    VtValue ret = new VtValue(USDIPCPINVOKE.UsdAttribute_Get__SWIG_4(swigCPtr, UsdTimeCode.getCPtr(time)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
