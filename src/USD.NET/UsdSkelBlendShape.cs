//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdSkelBlendShape : UsdTyped {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdSkelBlendShape(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdSkelBlendShape_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSkelBlendShape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdSkelBlendShape() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdSkelBlendShape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdSkelBlendShape(UsdPrim prim) : this(USDIPCPINVOKE.new_UsdSkelBlendShape__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdSkelBlendShape() : this(USDIPCPINVOKE.new_UsdSkelBlendShape__SWIG_1(), true) {
  }

  public UsdSkelBlendShape(UsdSchemaBase schemaObj) : this(USDIPCPINVOKE.new_UsdSkelBlendShape__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdSkelBlendShape_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdSkelBlendShape_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdSkelBlendShape Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdSkelBlendShape ret = new UsdSkelBlendShape(USDIPCPINVOKE.UsdSkelBlendShape_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdSkelBlendShape Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdSkelBlendShape ret = new UsdSkelBlendShape(USDIPCPINVOKE.UsdSkelBlendShape_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetOffsetsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_GetOffsetsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateOffsetsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_CreateOffsetsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateOffsetsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_CreateOffsetsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateOffsetsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_CreateOffsetsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetPointIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_GetPointIndicesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreatePointIndicesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_CreatePointIndicesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreatePointIndicesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_CreatePointIndicesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreatePointIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdSkelBlendShape_CreatePointIndicesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdSkelInbetweenShape CreateInbetween(TfToken name) {
    UsdSkelInbetweenShape ret = new UsdSkelInbetweenShape(USDIPCPINVOKE.UsdSkelBlendShape_CreateInbetween(swigCPtr, TfToken.getCPtr(name)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdSkelInbetweenShape GetInbetween(TfToken name) {
    UsdSkelInbetweenShape ret = new UsdSkelInbetweenShape(USDIPCPINVOKE.UsdSkelBlendShape_GetInbetween(swigCPtr, TfToken.getCPtr(name)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasInbetween(TfToken name) {
    bool ret = USDIPCPINVOKE.UsdSkelBlendShape_HasInbetween(swigCPtr, TfToken.getCPtr(name));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_UsdSkelInbetweenShape_t GetInbetweens() {
    SWIGTYPE_p_std__vectorT_UsdSkelInbetweenShape_t ret = new SWIGTYPE_p_std__vectorT_UsdSkelInbetweenShape_t(USDIPCPINVOKE.UsdSkelBlendShape_GetInbetweens(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_UsdSkelInbetweenShape_t GetAuthoredInbetweens() {
    SWIGTYPE_p_std__vectorT_UsdSkelInbetweenShape_t ret = new SWIGTYPE_p_std__vectorT_UsdSkelInbetweenShape_t(USDIPCPINVOKE.UsdSkelBlendShape_GetAuthoredInbetweens(swigCPtr), true);
    return ret;
  }

}

}
