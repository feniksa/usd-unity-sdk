//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdSchemaBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdSchemaBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSchemaBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdSchemaBase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdSchemaBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  public static implicit operator bool(UsdSchemaBase b) {
    return b._IsValid();
  }


  public bool IsConcrete() {
    bool ret = USDIPCPINVOKE.UsdSchemaBase_IsConcrete(swigCPtr);
    return ret;
  }

  public bool IsTyped() {
    bool ret = USDIPCPINVOKE.UsdSchemaBase_IsTyped(swigCPtr);
    return ret;
  }

  public bool IsAPISchema() {
    bool ret = USDIPCPINVOKE.UsdSchemaBase_IsAPISchema(swigCPtr);
    return ret;
  }

  public bool IsAppliedAPISchema() {
    bool ret = USDIPCPINVOKE.UsdSchemaBase_IsAppliedAPISchema(swigCPtr);
    return ret;
  }

  public bool IsMultipleApplyAPISchema() {
    bool ret = USDIPCPINVOKE.UsdSchemaBase_IsMultipleApplyAPISchema(swigCPtr);
    return ret;
  }

  public UsdSchemaType GetSchemaType() {
    UsdSchemaType ret = (UsdSchemaType)USDIPCPINVOKE.UsdSchemaBase_GetSchemaType(swigCPtr);
    return ret;
  }

  public UsdSchemaBase(UsdPrim prim) : this(USDIPCPINVOKE.new_UsdSchemaBase__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdSchemaBase() : this(USDIPCPINVOKE.new_UsdSchemaBase__SWIG_1(), true) {
  }

  public UsdSchemaBase(UsdSchemaBase otherSchema) : this(USDIPCPINVOKE.new_UsdSchemaBase__SWIG_2(UsdSchemaBase.getCPtr(otherSchema)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdPrim GetPrim() {
    UsdPrim ret = new UsdPrim(USDIPCPINVOKE.UsdSchemaBase_GetPrim(swigCPtr), true);
    return ret;
  }

  public SdfPath GetPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.UsdSchemaBase_GetPath(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_SdfPrimSpecHandle GetSchemaClassPrimDefinition() {
    SWIGTYPE_p_SdfPrimSpecHandle ret = new SWIGTYPE_p_SdfPrimSpecHandle(USDIPCPINVOKE.UsdSchemaBase_GetSchemaClassPrimDefinition(swigCPtr), true);
    return ret;
  }

  public static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdSchemaBase_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdSchemaBase_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public static bool Equals(UsdSchemaBase lhs, UsdSchemaBase rhs) {
    bool ret = USDIPCPINVOKE.UsdSchemaBase_Equals(UsdSchemaBase.getCPtr(lhs), UsdSchemaBase.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  override public int GetHashCode() {
    int ret = USDIPCPINVOKE.UsdSchemaBase_GetHashCode(swigCPtr);
    return ret;
  }

    public static bool operator==(UsdSchemaBase lhs, UsdSchemaBase rhs){
      // The Swig binding glue will re-enter this operator comparing to null, so 
      // that case must be handled explicitly to avoid an infinite loop. This is still
      // not great, since it crosses the C#/C++ barrier twice. A better approache might
      // be to return a simple value from C++ that can be compared in C#.
      bool lnull = lhs as object == null;
      bool rnull = rhs as object == null;
      return (lnull == rnull) && ((lnull && rnull) || UsdSchemaBase.Equals(lhs, rhs));
    }

    public static bool operator !=(UsdSchemaBase lhs, UsdSchemaBase rhs) {
        return !(lhs == rhs);
    }

    override public bool Equals(object rhs) {
      return UsdSchemaBase.Equals(this, rhs as UsdSchemaBase);
    }
  
  public bool _IsValid() {
    bool ret = USDIPCPINVOKE.UsdSchemaBase__IsValid(swigCPtr);
    return ret;
  }

}

}
