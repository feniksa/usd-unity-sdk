//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdGeomPrimvar : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdGeomPrimvar(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomPrimvar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdGeomPrimvar() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdGeomPrimvar(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdGeomPrimvar() : this(USDIPCPINVOKE.new_UsdGeomPrimvar__SWIG_0(), true) {
  }

  public UsdGeomPrimvar(UsdAttribute attr) : this(USDIPCPINVOKE.new_UsdGeomPrimvar__SWIG_1(UsdAttribute.getCPtr(attr)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public TfToken GetInterpolation() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomPrimvar_GetInterpolation(swigCPtr), true);
    return ret;
  }

  public bool SetInterpolation(TfToken interpolation) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_SetInterpolation(swigCPtr, TfToken.getCPtr(interpolation));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasAuthoredInterpolation() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_HasAuthoredInterpolation(swigCPtr);
    return ret;
  }

  public int GetElementSize() {
    int ret = USDIPCPINVOKE.UsdGeomPrimvar_GetElementSize(swigCPtr);
    return ret;
  }

  public bool SetElementSize(int eltSize) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_SetElementSize(swigCPtr, eltSize);
    return ret;
  }

  public bool HasAuthoredElementSize() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_HasAuthoredElementSize(swigCPtr);
    return ret;
  }

  public static bool IsPrimvar(UsdAttribute attr) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_IsPrimvar(UsdAttribute.getCPtr(attr));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsValidInterpolation(TfToken interpolation) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_IsValidInterpolation(TfToken.getCPtr(interpolation));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetDeclarationInfo(TfToken name, SdfValueTypeName typeName, TfToken interpolation, out int elementSize) {
    USDIPCPINVOKE.UsdGeomPrimvar_GetDeclarationInfo(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName), TfToken.getCPtr(interpolation), out elementSize);
  }

  public UsdAttribute GetAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPrimvar_GetAttr(swigCPtr), false);
    return ret;
  }

  public bool IsDefined() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_IsDefined(swigCPtr);
    return ret;
  }

  public TfToken GetName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomPrimvar_GetName(swigCPtr), false);
    return ret;
  }

  public TfToken GetPrimvarName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomPrimvar_GetPrimvarName(swigCPtr), true);
    return ret;
  }

  public bool NameContainsNamespaces() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_NameContainsNamespaces(swigCPtr);
    return ret;
  }

  public TfToken GetBaseName() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomPrimvar_GetBaseName(swigCPtr), true);
    return ret;
  }

  public TfToken GetNamespace() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomPrimvar_GetNamespace(swigCPtr), true);
    return ret;
  }

  public StdStringVector SplitName() {
    StdStringVector ret = new StdStringVector(USDIPCPINVOKE.UsdGeomPrimvar_SplitName(swigCPtr), true);
    return ret;
  }

  public SdfValueTypeName GetTypeName() {
    SdfValueTypeName ret = new SdfValueTypeName(USDIPCPINVOKE.UsdGeomPrimvar_GetTypeName(swigCPtr), true);
    return ret;
  }

  public bool GetTimeSamples(StdDoubleVector times) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_GetTimeSamples(swigCPtr, StdDoubleVector.getCPtr(times));
    return ret;
  }

  public bool ValueMightBeTimeVarying() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_ValueMightBeTimeVarying(swigCPtr);
    return ret;
  }

  public bool SetIndices(VtIntArray indices, UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_SetIndices__SWIG_0(swigCPtr, VtIntArray.getCPtr(indices), UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetIndices(VtIntArray indices) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_SetIndices__SWIG_1(swigCPtr, VtIntArray.getCPtr(indices));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetIndices(VtIntArray indices, UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_GetIndices__SWIG_0(swigCPtr, VtIntArray.getCPtr(indices), UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetIndices(VtIntArray indices) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_GetIndices__SWIG_1(swigCPtr, VtIntArray.getCPtr(indices));
    return ret;
  }

  public void BlockIndices() {
    USDIPCPINVOKE.UsdGeomPrimvar_BlockIndices(swigCPtr);
  }

  public bool IsIndexed() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_IsIndexed(swigCPtr);
    return ret;
  }

  public UsdAttribute GetIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPrimvar_GetIndicesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPrimvar_CreateIndicesAttr(swigCPtr), true);
    return ret;
  }

  public bool SetUnauthoredValuesIndex(int unauthoredValuesIndex) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_SetUnauthoredValuesIndex(swigCPtr, unauthoredValuesIndex);
    return ret;
  }

  public int GetUnauthoredValuesIndex() {
    int ret = USDIPCPINVOKE.UsdGeomPrimvar_GetUnauthoredValuesIndex(swigCPtr);
    return ret;
  }

  public bool ComputeFlattened(VtValue value, UsdTimeCode time) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_ComputeFlattened__SWIG_2(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeFlattened(VtValue value) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_ComputeFlattened__SWIG_3(swigCPtr, VtValue.getCPtr(value));
    return ret;
  }

  public bool IsIdTarget() {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_IsIdTarget(swigCPtr);
    return ret;
  }

  public bool SetIdTarget(SdfPath path) {
    bool ret = USDIPCPINVOKE.UsdGeomPrimvar_SetIdTarget(swigCPtr, SdfPath.getCPtr(path));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
