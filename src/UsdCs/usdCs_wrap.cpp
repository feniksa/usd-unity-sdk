/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_USDIPC(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_USDIPC(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_USDIPC(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "usdDefines.h"


#include "pxr/base/tf/hash.h"


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN float const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::vector< float > > *new_std_vector_Sl_std_vector_Sl_float_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< float > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< float > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< float > std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitemcopy(std::vector< std::vector< float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< float > const &std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitem(std::vector< std::vector< float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__setitem(std::vector< std::vector< float > > *self,int index,std::vector< float > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__AddRange(std::vector< std::vector< float > > *self,std::vector< std::vector< float > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< float > > *std_vector_Sl_std_vector_Sl_float_Sg__Sg__GetRange(std::vector< std::vector< float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< float > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__Insert(std::vector< std::vector< float > > *self,int index,std::vector< float > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__InsertRange(std::vector< std::vector< float > > *self,int index,std::vector< std::vector< float > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveAt(std::vector< std::vector< float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveRange(std::vector< std::vector< float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< float > > *std_vector_Sl_std_vector_Sl_float_Sg__Sg__Repeat(std::vector< float > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< float > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< float > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__SetRange(std::vector< std::vector< float > > *self,int index,std::vector< std::vector< float > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN double const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::vector< double > > *new_std_vector_Sl_std_vector_Sl_double_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< double > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< double > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< double > std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitemcopy(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double > const &std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitem(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__setitem(std::vector< std::vector< double > > *self,int index,std::vector< double > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__AddRange(std::vector< std::vector< double > > *self,std::vector< std::vector< double > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< double > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg__GetRange(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< double > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Insert(std::vector< std::vector< double > > *self,int index,std::vector< double > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__InsertRange(std::vector< std::vector< double > > *self,int index,std::vector< std::vector< double > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveAt(std::vector< std::vector< double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveRange(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< double > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg__Repeat(std::vector< double > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< double > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< double > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__SetRange(std::vector< std::vector< double > > *self,int index,std::vector< std::vector< double > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include <stdint.h>		// Use the C99 official header


#include "pxr/base/tf/stringUtils.h"


#include "pxr/base/tf/type.h"

SWIGINTERN std::vector< TfType > *new_std_vector_Sl_TfType_Sg___SWIG_2(int capacity){
        std::vector< TfType >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< TfType >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN TfType std_vector_Sl_TfType_Sg__getitemcopy(std::vector< TfType > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN TfType const &std_vector_Sl_TfType_Sg__getitem(std::vector< TfType > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__setitem(std::vector< TfType > *self,int index,TfType const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__AddRange(std::vector< TfType > *self,std::vector< TfType > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< TfType > *std_vector_Sl_TfType_Sg__GetRange(std::vector< TfType > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< TfType >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__Insert(std::vector< TfType > *self,int index,TfType const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__InsertRange(std::vector< TfType > *self,int index,std::vector< TfType > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__RemoveAt(std::vector< TfType > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__RemoveRange(std::vector< TfType > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< TfType > *std_vector_Sl_TfType_Sg__Repeat(TfType const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< TfType >(count, value);
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__Reverse__SWIG_0(std::vector< TfType > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__Reverse__SWIG_1(std::vector< TfType > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TfType_Sg__SetRange(std::vector< TfType > *self,int index,std::vector< TfType > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/base/tf/token.h"

SWIGINTERN std::vector< TfToken > *new_std_vector_Sl_TfToken_Sg___SWIG_2(int capacity){
        std::vector< TfToken >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< TfToken >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN TfToken std_vector_Sl_TfToken_Sg__getitemcopy(std::vector< TfToken > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN TfToken const &std_vector_Sl_TfToken_Sg__getitem(std::vector< TfToken > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__setitem(std::vector< TfToken > *self,int index,TfToken const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__AddRange(std::vector< TfToken > *self,std::vector< TfToken > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< TfToken > *std_vector_Sl_TfToken_Sg__GetRange(std::vector< TfToken > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< TfToken >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__Insert(std::vector< TfToken > *self,int index,TfToken const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__InsertRange(std::vector< TfToken > *self,int index,std::vector< TfToken > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__RemoveAt(std::vector< TfToken > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__RemoveRange(std::vector< TfToken > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< TfToken > *std_vector_Sl_TfToken_Sg__Repeat(TfToken const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< TfToken >(count, value);
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__Reverse__SWIG_0(std::vector< TfToken > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__Reverse__SWIG_1(std::vector< TfToken > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TfToken_Sg__SetRange(std::vector< TfToken > *self,int index,std::vector< TfToken > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool TfToken_Equals(TfToken const &lhs,TfToken const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int TfToken_GetHashCode(TfToken *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/js/value.h"


#include "pxr/base/js/value.h"
#include "pxr/base/js/types.h"

SWIGINTERN std::map< std::string,JsValue >::mapped_type const &std_map_Sl_std_string_Sc_JsValue_Sg__getitem(std::map< std::string,JsValue > *self,std::map< std::string,JsValue >::key_type const &key){
        std::map< std::string, JsValue, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_JsValue_Sg__setitem(std::map< std::string,JsValue > *self,std::map< std::string,JsValue >::key_type const &key,std::map< std::string,JsValue >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_JsValue_Sg__ContainsKey(std::map< std::string,JsValue > *self,std::map< std::string,JsValue >::key_type const &key){
        std::map< std::string, JsValue, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_JsValue_Sg__Add(std::map< std::string,JsValue > *self,std::map< std::string,JsValue >::key_type const &key,std::map< std::string,JsValue >::mapped_type const &val){
        std::map< std::string, JsValue, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, JsValue >(key, val));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_JsValue_Sg__Remove(std::map< std::string,JsValue > *self,std::map< std::string,JsValue >::key_type const &key){
        std::map< std::string, JsValue, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< std::string,JsValue,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_JsValue_Sg__create_iterator_begin(std::map< std::string,JsValue > *self){
        return new std::map< std::string, JsValue, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,JsValue >::key_type const &std_map_Sl_std_string_Sc_JsValue_Sg__get_next_key(std::map< std::string,JsValue > *self,std::map< std::string,JsValue,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, JsValue, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_JsValue_Sg__destroy_iterator(std::map< std::string,JsValue > *self,std::map< std::string,JsValue,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::vector< JsValue > *new_std_vector_Sl_JsValue_Sg___SWIG_2(int capacity){
        std::vector< JsValue >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< JsValue >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN JsValue std_vector_Sl_JsValue_Sg__getitemcopy(std::vector< JsValue > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN JsValue const &std_vector_Sl_JsValue_Sg__getitem(std::vector< JsValue > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__setitem(std::vector< JsValue > *self,int index,JsValue const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__AddRange(std::vector< JsValue > *self,std::vector< JsValue > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< JsValue > *std_vector_Sl_JsValue_Sg__GetRange(std::vector< JsValue > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< JsValue >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__Insert(std::vector< JsValue > *self,int index,JsValue const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__InsertRange(std::vector< JsValue > *self,int index,std::vector< JsValue > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__RemoveAt(std::vector< JsValue > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__RemoveRange(std::vector< JsValue > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< JsValue > *std_vector_Sl_JsValue_Sg__Repeat(JsValue const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< JsValue >(count, value);
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__Reverse__SWIG_0(std::vector< JsValue > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__Reverse__SWIG_1(std::vector< JsValue > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_JsValue_Sg__SetRange(std::vector< JsValue > *self,int index,std::vector< JsValue > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/base/js/json.h"


#include "pxr/base/plug/plugin.h"


#include "pxr/base/plug/registry.h"


#include "pxr/base/gf/bbox3d.h"

SWIGINTERN bool GfBBox3d_Equals(GfBBox3d const &lhs,GfBBox3d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfBBox3d_GetHashCode(GfBBox3d *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/interval.h"

SWIGINTERN bool GfInterval_Equals(GfInterval const &lhs,GfInterval const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfInterval_GetHashCode(GfInterval *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/half.h"

SWIGINTERN bool GfHalf_Equals(GfHalf const &lhs,GfHalf const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfHalf_GetHashCode(GfHalf *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/range1f.h"

SWIGINTERN bool GfRange1f_Equals(GfRange1f const &lhs,GfRange1f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfRange1f_GetHashCode(GfRange1f *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/range1d.h"

SWIGINTERN bool GfRange1d_Equals(GfRange1d const &lhs,GfRange1d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfRange1d_GetHashCode(GfRange1d *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/range2d.h"

SWIGINTERN bool GfRange2d_Equals(GfRange2d const &lhs,GfRange2d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfRange2d_GetHashCode(GfRange2d *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/range3d.h"

SWIGINTERN bool GfRange3d_Equals(GfRange3d const &lhs,GfRange3d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfRange3d_GetHashCode(GfRange3d *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/matrix2f.h"

SWIGINTERN bool GfMatrix2f_Equals(GfMatrix2f const &lhs,GfMatrix2f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfMatrix2f_GetHashCode(GfMatrix2f *self){
    return (int)TfHash()(self);
  }
SWIGINTERN std::string GfMatrix2f_ToString(GfMatrix2f *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void GfMatrix2f_CopyToArray(GfMatrix2f *self,float *dest){
    memcpy(dest, self->GetArray(), 4 * sizeof(float)); 
  }
SWIGINTERN void GfMatrix2f_CopyFromArray(GfMatrix2f *self,float *src){ 
    memcpy(self->GetArray(), src, 4 * sizeof(float));
  }

#include "pxr/base/gf/matrix3f.h"

SWIGINTERN bool GfMatrix3f_Equals(GfMatrix3f const &lhs,GfMatrix3f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfMatrix3f_GetHashCode(GfMatrix3f *self){
    return (int)TfHash()(self);
  }
SWIGINTERN std::string GfMatrix3f_ToString(GfMatrix3f *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void GfMatrix3f_CopyToArray(GfMatrix3f *self,float *dest){
    memcpy(dest, self->GetArray(), 9 * sizeof(float)); 
  }
SWIGINTERN void GfMatrix3f_CopyFromArray(GfMatrix3f *self,float *src){ 
    memcpy(self->GetArray(), src, 9 * sizeof(float));
  }

#include "pxr/base/gf/matrix4f.h"

SWIGINTERN bool GfMatrix4f_Equals(GfMatrix4f const &lhs,GfMatrix4f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfMatrix4f_GetHashCode(GfMatrix4f *self){
    return (int)TfHash()(self);
  }
SWIGINTERN std::string GfMatrix4f_ToString(GfMatrix4f *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void GfMatrix4f_CopyToArray(GfMatrix4f *self,float *dest){
    memcpy(dest, self->GetArray(), 16 * sizeof(float)); 
  }
SWIGINTERN void GfMatrix4f_CopyFromArray(GfMatrix4f *self,float *src){ 
    memcpy(self->GetArray(), src, 16 * sizeof(float));
  }

#include "pxr/base/gf/matrix2d.h"

SWIGINTERN bool GfMatrix2d_Equals(GfMatrix2d const &lhs,GfMatrix2d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfMatrix2d_GetHashCode(GfMatrix2d *self){
    return (int)TfHash()(self);
  }
SWIGINTERN std::string GfMatrix2d_ToString(GfMatrix2d *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void GfMatrix2d_CopyToArray(GfMatrix2d *self,double *dest){
    memcpy(dest, self->GetArray(), 4 * sizeof(double)); 
  }
SWIGINTERN void GfMatrix2d_CopyFromArray(GfMatrix2d *self,double *src){ 
    memcpy(self->GetArray(), src, 4 * sizeof(double));
  }

#include "pxr/base/gf/matrix3d.h"

SWIGINTERN bool GfMatrix3d_Equals(GfMatrix3d const &lhs,GfMatrix3d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfMatrix3d_GetHashCode(GfMatrix3d *self){
    return (int)TfHash()(self);
  }
SWIGINTERN std::string GfMatrix3d_ToString(GfMatrix3d *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void GfMatrix3d_CopyToArray(GfMatrix3d *self,double *dest){
    memcpy(dest, self->GetArray(), 9 * sizeof(double)); 
  }
SWIGINTERN void GfMatrix3d_CopyFromArray(GfMatrix3d *self,double *src){ 
    memcpy(self->GetArray(), src, 9 * sizeof(double));
  }

#include "pxr/base/gf/matrix4d.h"

SWIGINTERN bool GfMatrix4d_Equals(GfMatrix4d const &lhs,GfMatrix4d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfMatrix4d_GetHashCode(GfMatrix4d *self){
    return (int)TfHash()(self);
  }
SWIGINTERN std::string GfMatrix4d_ToString(GfMatrix4d *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void GfMatrix4d_CopyToArray(GfMatrix4d *self,double *dest){
    memcpy(dest, self->GetArray(), 16 * sizeof(double)); 
  }
SWIGINTERN void GfMatrix4d_CopyFromArray(GfMatrix4d *self,double *src){ 
    memcpy(self->GetArray(), src, 16 * sizeof(double));
  }

#include "pxr/base/gf/vec2i.h"

SWIGINTERN bool GfVec2i_Equals(GfVec2i const &lhs,GfVec2i const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec2i_GetHashCode(GfVec2i *self){
    return (int)TfHash()(self);
  }
SWIGINTERN int GfVec2i_GetValue(GfVec2i *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec2i_SetValue(GfVec2i *self,int index,int value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec2h.h"

SWIGINTERN bool GfVec2h_Equals(GfVec2h const &lhs,GfVec2h const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec2h_GetHashCode(GfVec2h *self){
    return (int)TfHash()(self);
  }
SWIGINTERN float GfVec2h_GetValue(GfVec2h *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec2h_SetValue(GfVec2h *self,int index,float value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec2f.h"

SWIGINTERN bool GfVec2f_Equals(GfVec2f const &lhs,GfVec2f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec2f_GetHashCode(GfVec2f *self){
    return (int)TfHash()(self);
  }
SWIGINTERN float GfVec2f_GetValue(GfVec2f *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec2f_SetValue(GfVec2f *self,int index,float value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec2d.h"

SWIGINTERN bool GfVec2d_Equals(GfVec2d const &lhs,GfVec2d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec2d_GetHashCode(GfVec2d *self){
    return (int)TfHash()(self);
  }
SWIGINTERN double GfVec2d_GetValue(GfVec2d *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec2d_SetValue(GfVec2d *self,int index,double value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec3i.h"

SWIGINTERN bool GfVec3i_Equals(GfVec3i const &lhs,GfVec3i const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec3i_GetHashCode(GfVec3i *self){
    return (int)TfHash()(self);
  }
SWIGINTERN int GfVec3i_GetValue(GfVec3i *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec3i_SetValue(GfVec3i *self,int index,int value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec3h.h"

SWIGINTERN bool GfVec3h_Equals(GfVec3h const &lhs,GfVec3h const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec3h_GetHashCode(GfVec3h *self){
    return (int)TfHash()(self);
  }
SWIGINTERN float GfVec3h_GetValue(GfVec3h *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec3h_SetValue(GfVec3h *self,int index,float value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec3f.h"

SWIGINTERN bool GfVec3f_Equals(GfVec3f const &lhs,GfVec3f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec3f_GetHashCode(GfVec3f *self){
    return (int)TfHash()(self);
  }
SWIGINTERN float GfVec3f_GetValue(GfVec3f *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec3f_SetValue(GfVec3f *self,int index,float value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec3d.h"

SWIGINTERN bool GfVec3d_Equals(GfVec3d const &lhs,GfVec3d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec3d_GetHashCode(GfVec3d *self){
    return (int)TfHash()(self);
  }
SWIGINTERN double GfVec3d_GetValue(GfVec3d *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec3d_SetValue(GfVec3d *self,int index,double value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec4i.h"

SWIGINTERN bool GfVec4i_Equals(GfVec4i const &lhs,GfVec4i const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec4i_GetHashCode(GfVec4i *self){
    return (int)TfHash()(self);
  }
SWIGINTERN int GfVec4i_GetValue(GfVec4i *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec4i_SetValue(GfVec4i *self,int index,int value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec4h.h"

SWIGINTERN bool GfVec4h_Equals(GfVec4h const &lhs,GfVec4h const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec4h_GetHashCode(GfVec4h *self){
    return (int)TfHash()(self);
  }
SWIGINTERN float GfVec4h_GetValue(GfVec4h *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec4h_SetValue(GfVec4h *self,int index,float value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec4f.h"

SWIGINTERN std::vector< GfVec4f > *new_std_vector_Sl_GfVec4f_Sg___SWIG_2(int capacity){
        std::vector< GfVec4f >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< GfVec4f >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN GfVec4f std_vector_Sl_GfVec4f_Sg__getitemcopy(std::vector< GfVec4f > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN GfVec4f const &std_vector_Sl_GfVec4f_Sg__getitem(std::vector< GfVec4f > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__setitem(std::vector< GfVec4f > *self,int index,GfVec4f const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__AddRange(std::vector< GfVec4f > *self,std::vector< GfVec4f > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< GfVec4f > *std_vector_Sl_GfVec4f_Sg__GetRange(std::vector< GfVec4f > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< GfVec4f >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__Insert(std::vector< GfVec4f > *self,int index,GfVec4f const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__InsertRange(std::vector< GfVec4f > *self,int index,std::vector< GfVec4f > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__RemoveAt(std::vector< GfVec4f > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__RemoveRange(std::vector< GfVec4f > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< GfVec4f > *std_vector_Sl_GfVec4f_Sg__Repeat(GfVec4f const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< GfVec4f >(count, value);
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__Reverse__SWIG_0(std::vector< GfVec4f > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__Reverse__SWIG_1(std::vector< GfVec4f > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_GfVec4f_Sg__SetRange(std::vector< GfVec4f > *self,int index,std::vector< GfVec4f > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool GfVec4f_Equals(GfVec4f const &lhs,GfVec4f const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec4f_GetHashCode(GfVec4f *self){
    return (int)TfHash()(self);
  }
SWIGINTERN float GfVec4f_GetValue(GfVec4f *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec4f_SetValue(GfVec4f *self,int index,float value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/vec4d.h"

SWIGINTERN bool GfVec4d_Equals(GfVec4d const &lhs,GfVec4d const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfVec4d_GetHashCode(GfVec4d *self){
    return (int)TfHash()(self);
  }
SWIGINTERN double GfVec4d_GetValue(GfVec4d *self,int index){
    return (*self)[index];
  }
SWIGINTERN void GfVec4d_SetValue(GfVec4d *self,int index,double value){
    (*self)[index] = value;
  }

#include "pxr/base/gf/rotation.h"

SWIGINTERN bool GfRotation_Equals(GfRotation const &lhs,GfRotation const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfRotation_GetHashCode(GfRotation *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/quaternion.h"

SWIGINTERN bool GfQuaternion_Equals(GfQuaternion const &lhs,GfQuaternion const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfQuaternion_GetHashCode(GfQuaternion *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/quath.h"

SWIGINTERN bool GfQuath_Equals(GfQuath const &lhs,GfQuath const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfQuath_GetHashCode(GfQuath *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/quatf.h"

SWIGINTERN bool GfQuatf_Equals(GfQuatf const &lhs,GfQuatf const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfQuatf_GetHashCode(GfQuatf *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/quatd.h"

SWIGINTERN bool GfQuatd_Equals(GfQuatd const &lhs,GfQuatd const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfQuatd_GetHashCode(GfQuatd *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/ray.h"

SWIGINTERN bool GfRay_Equals(GfRay const &lhs,GfRay const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfRay_GetHashCode(GfRay *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/line.h"

SWIGINTERN bool GfLine_Equals(GfLine const &lhs,GfLine const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfLine_GetHashCode(GfLine *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/lineSeg.h"

SWIGINTERN bool GfLineSeg_Equals(GfLineSeg const &lhs,GfLineSeg const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfLineSeg_GetHashCode(GfLineSeg *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/plane.h"

SWIGINTERN bool GfPlane_Equals(GfPlane const &lhs,GfPlane const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfPlane_GetHashCode(GfPlane *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/frustum.h"

SWIGINTERN std::vector< GfVec3d > *new_std_vector_Sl_GfVec3d_Sg___SWIG_2(int capacity){
        std::vector< GfVec3d >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< GfVec3d >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN GfVec3d std_vector_Sl_GfVec3d_Sg__getitemcopy(std::vector< GfVec3d > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN GfVec3d const &std_vector_Sl_GfVec3d_Sg__getitem(std::vector< GfVec3d > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__setitem(std::vector< GfVec3d > *self,int index,GfVec3d const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__AddRange(std::vector< GfVec3d > *self,std::vector< GfVec3d > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< GfVec3d > *std_vector_Sl_GfVec3d_Sg__GetRange(std::vector< GfVec3d > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< GfVec3d >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__Insert(std::vector< GfVec3d > *self,int index,GfVec3d const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__InsertRange(std::vector< GfVec3d > *self,int index,std::vector< GfVec3d > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__RemoveAt(std::vector< GfVec3d > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__RemoveRange(std::vector< GfVec3d > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< GfVec3d > *std_vector_Sl_GfVec3d_Sg__Repeat(GfVec3d const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< GfVec3d >(count, value);
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__Reverse__SWIG_0(std::vector< GfVec3d > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__Reverse__SWIG_1(std::vector< GfVec3d > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_GfVec3d_Sg__SetRange(std::vector< GfVec3d > *self,int index,std::vector< GfVec3d > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool GfFrustum_Equals(GfFrustum const &lhs,GfFrustum const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfFrustum_GetHashCode(GfFrustum *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/gf/camera.h"

SWIGINTERN bool GfCamera_Equals(GfCamera const &lhs,GfCamera const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int GfCamera_GetHashCode(GfCamera *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/vt/array.h"

SWIGINTERN bool VtArray_Sl_SdfAssetPath_Sg__Equals(VtArray< SdfAssetPath > const &lhs,VtArray< SdfAssetPath > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_SdfAssetPath_Sg__ToString(VtArray< SdfAssetPath > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_SdfAssetPath_Sg__CopyToArray__SWIG_0(VtArray< SdfAssetPath > *self,SdfAssetPath *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(SdfAssetPath));
  }
SWIGINTERN void VtArray_Sl_SdfAssetPath_Sg__CopyFromArray__SWIG_0(VtArray< SdfAssetPath > *self,SdfAssetPath *src){ 
    memcpy(self->data(), src, self->size() * sizeof(SdfAssetPath));
  }
SWIGINTERN void VtArray_Sl_SdfAssetPath_Sg__CopyToArray__SWIG_1(VtArray< SdfAssetPath > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(SdfAssetPath));
  }
SWIGINTERN void VtArray_Sl_SdfAssetPath_Sg__CopyFromArray__SWIG_1(VtArray< SdfAssetPath > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(SdfAssetPath));
  }
SWIGINTERN SdfAssetPath const &VtArray_Sl_SdfAssetPath_Sg__GetValue(VtArray< SdfAssetPath > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_SdfAssetPath_Sg__SetValue(VtArray< SdfAssetPath > *self,int index,SdfAssetPath const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_bool_Sg__Equals(VtArray< bool > const &lhs,VtArray< bool > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_bool_Sg__ToString(VtArray< bool > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_bool_Sg__CopyToArray__SWIG_0(VtArray< bool > *self,bool *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(bool));
  }
SWIGINTERN void VtArray_Sl_bool_Sg__CopyFromArray__SWIG_0(VtArray< bool > *self,bool *src){ 
    memcpy(self->data(), src, self->size() * sizeof(bool));
  }
SWIGINTERN void VtArray_Sl_bool_Sg__CopyToArray__SWIG_1(VtArray< bool > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(bool));
  }
SWIGINTERN void VtArray_Sl_bool_Sg__CopyFromArray__SWIG_1(VtArray< bool > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(bool));
  }
SWIGINTERN bool const &VtArray_Sl_bool_Sg__GetValue(VtArray< bool > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_bool_Sg__SetValue(VtArray< bool > *self,int index,bool const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_double_Sg__Equals(VtArray< double > const &lhs,VtArray< double > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_double_Sg__ToString(VtArray< double > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_double_Sg__CopyToArray__SWIG_0(VtArray< double > *self,double *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(double));
  }
SWIGINTERN void VtArray_Sl_double_Sg__CopyFromArray__SWIG_0(VtArray< double > *self,double *src){ 
    memcpy(self->data(), src, self->size() * sizeof(double));
  }
SWIGINTERN void VtArray_Sl_double_Sg__CopyToArray__SWIG_1(VtArray< double > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(double));
  }
SWIGINTERN void VtArray_Sl_double_Sg__CopyFromArray__SWIG_1(VtArray< double > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(double));
  }
SWIGINTERN double const &VtArray_Sl_double_Sg__GetValue(VtArray< double > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_double_Sg__SetValue(VtArray< double > *self,int index,double const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_float_Sg__Equals(VtArray< float > const &lhs,VtArray< float > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_float_Sg__ToString(VtArray< float > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_float_Sg__CopyToArray__SWIG_0(VtArray< float > *self,float *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(float));
  }
SWIGINTERN void VtArray_Sl_float_Sg__CopyFromArray__SWIG_0(VtArray< float > *self,float *src){ 
    memcpy(self->data(), src, self->size() * sizeof(float));
  }
SWIGINTERN void VtArray_Sl_float_Sg__CopyToArray__SWIG_1(VtArray< float > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(float));
  }
SWIGINTERN void VtArray_Sl_float_Sg__CopyFromArray__SWIG_1(VtArray< float > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(float));
  }
SWIGINTERN float const &VtArray_Sl_float_Sg__GetValue(VtArray< float > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_float_Sg__SetValue(VtArray< float > *self,int index,float const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfHalf_Sg__Equals(VtArray< GfHalf > const &lhs,VtArray< GfHalf > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfHalf_Sg__ToString(VtArray< GfHalf > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfHalf_Sg__CopyToArray__SWIG_0(VtArray< GfHalf > *self,GfHalf *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfHalf));
  }
SWIGINTERN void VtArray_Sl_GfHalf_Sg__CopyFromArray__SWIG_0(VtArray< GfHalf > *self,GfHalf *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfHalf));
  }
SWIGINTERN void VtArray_Sl_GfHalf_Sg__CopyToArray__SWIG_1(VtArray< GfHalf > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfHalf));
  }
SWIGINTERN void VtArray_Sl_GfHalf_Sg__CopyFromArray__SWIG_1(VtArray< GfHalf > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfHalf));
  }
SWIGINTERN GfHalf const &VtArray_Sl_GfHalf_Sg__GetValue(VtArray< GfHalf > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfHalf_Sg__SetValue(VtArray< GfHalf > *self,int index,GfHalf const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_int64_t_Sg__Equals(VtArray< long long > const &lhs,VtArray< long long > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_int64_t_Sg__ToString(VtArray< int64_t > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_int64_t_Sg__CopyToArray__SWIG_0(VtArray< int64_t > *self,long long *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(long long));
  }
SWIGINTERN void VtArray_Sl_int64_t_Sg__CopyFromArray__SWIG_0(VtArray< int64_t > *self,long long *src){ 
    memcpy(self->data(), src, self->size() * sizeof(long long));
  }
SWIGINTERN void VtArray_Sl_int64_t_Sg__CopyToArray__SWIG_1(VtArray< int64_t > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(long long));
  }
SWIGINTERN void VtArray_Sl_int64_t_Sg__CopyFromArray__SWIG_1(VtArray< int64_t > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(long long));
  }
SWIGINTERN long long const &VtArray_Sl_int64_t_Sg__GetValue(VtArray< int64_t > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_int64_t_Sg__SetValue(VtArray< int64_t > *self,int index,long long const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_int_Sg__Equals(VtArray< int > const &lhs,VtArray< int > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_int_Sg__ToString(VtArray< int > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_int_Sg__CopyToArray__SWIG_0(VtArray< int > *self,int *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(int));
  }
SWIGINTERN void VtArray_Sl_int_Sg__CopyFromArray__SWIG_0(VtArray< int > *self,int *src){ 
    memcpy(self->data(), src, self->size() * sizeof(int));
  }
SWIGINTERN void VtArray_Sl_int_Sg__CopyToArray__SWIG_1(VtArray< int > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(int));
  }
SWIGINTERN void VtArray_Sl_int_Sg__CopyFromArray__SWIG_1(VtArray< int > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(int));
  }
SWIGINTERN int const &VtArray_Sl_int_Sg__GetValue(VtArray< int > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_int_Sg__SetValue(VtArray< int > *self,int index,int const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfMatrix2d_Sg__Equals(VtArray< GfMatrix2d > const &lhs,VtArray< GfMatrix2d > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfMatrix2d_Sg__ToString(VtArray< GfMatrix2d > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfMatrix2d_Sg__CopyToArray__SWIG_0(VtArray< GfMatrix2d > *self,GfMatrix2d *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfMatrix2d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix2d_Sg__CopyFromArray__SWIG_0(VtArray< GfMatrix2d > *self,GfMatrix2d *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfMatrix2d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix2d_Sg__CopyToArray__SWIG_1(VtArray< GfMatrix2d > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfMatrix2d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix2d_Sg__CopyFromArray__SWIG_1(VtArray< GfMatrix2d > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfMatrix2d));
  }
SWIGINTERN GfMatrix2d const &VtArray_Sl_GfMatrix2d_Sg__GetValue(VtArray< GfMatrix2d > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfMatrix2d_Sg__SetValue(VtArray< GfMatrix2d > *self,int index,GfMatrix2d const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfMatrix3d_Sg__Equals(VtArray< GfMatrix3d > const &lhs,VtArray< GfMatrix3d > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfMatrix3d_Sg__ToString(VtArray< GfMatrix3d > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfMatrix3d_Sg__CopyToArray__SWIG_0(VtArray< GfMatrix3d > *self,GfMatrix3d *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfMatrix3d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix3d_Sg__CopyFromArray__SWIG_0(VtArray< GfMatrix3d > *self,GfMatrix3d *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfMatrix3d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix3d_Sg__CopyToArray__SWIG_1(VtArray< GfMatrix3d > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfMatrix3d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix3d_Sg__CopyFromArray__SWIG_1(VtArray< GfMatrix3d > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfMatrix3d));
  }
SWIGINTERN GfMatrix3d const &VtArray_Sl_GfMatrix3d_Sg__GetValue(VtArray< GfMatrix3d > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfMatrix3d_Sg__SetValue(VtArray< GfMatrix3d > *self,int index,GfMatrix3d const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfMatrix4d_Sg__Equals(VtArray< GfMatrix4d > const &lhs,VtArray< GfMatrix4d > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfMatrix4d_Sg__ToString(VtArray< GfMatrix4d > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfMatrix4d_Sg__CopyToArray__SWIG_0(VtArray< GfMatrix4d > *self,GfMatrix4d *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfMatrix4d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix4d_Sg__CopyFromArray__SWIG_0(VtArray< GfMatrix4d > *self,GfMatrix4d *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfMatrix4d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix4d_Sg__CopyToArray__SWIG_1(VtArray< GfMatrix4d > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfMatrix4d));
  }
SWIGINTERN void VtArray_Sl_GfMatrix4d_Sg__CopyFromArray__SWIG_1(VtArray< GfMatrix4d > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfMatrix4d));
  }
SWIGINTERN GfMatrix4d const &VtArray_Sl_GfMatrix4d_Sg__GetValue(VtArray< GfMatrix4d > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfMatrix4d_Sg__SetValue(VtArray< GfMatrix4d > *self,int index,GfMatrix4d const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfQuatd_Sg__Equals(VtArray< GfQuatd > const &lhs,VtArray< GfQuatd > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfQuatd_Sg__ToString(VtArray< GfQuatd > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfQuatd_Sg__CopyToArray__SWIG_0(VtArray< GfQuatd > *self,GfQuatd *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfQuatd));
  }
SWIGINTERN void VtArray_Sl_GfQuatd_Sg__CopyFromArray__SWIG_0(VtArray< GfQuatd > *self,GfQuatd *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfQuatd));
  }
SWIGINTERN void VtArray_Sl_GfQuatd_Sg__CopyToArray__SWIG_1(VtArray< GfQuatd > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfQuatd));
  }
SWIGINTERN void VtArray_Sl_GfQuatd_Sg__CopyFromArray__SWIG_1(VtArray< GfQuatd > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfQuatd));
  }
SWIGINTERN GfQuatd const &VtArray_Sl_GfQuatd_Sg__GetValue(VtArray< GfQuatd > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfQuatd_Sg__SetValue(VtArray< GfQuatd > *self,int index,GfQuatd const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfQuatf_Sg__Equals(VtArray< GfQuatf > const &lhs,VtArray< GfQuatf > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfQuatf_Sg__ToString(VtArray< GfQuatf > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfQuatf_Sg__CopyToArray__SWIG_0(VtArray< GfQuatf > *self,GfQuatf *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfQuatf));
  }
SWIGINTERN void VtArray_Sl_GfQuatf_Sg__CopyFromArray__SWIG_0(VtArray< GfQuatf > *self,GfQuatf *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfQuatf));
  }
SWIGINTERN void VtArray_Sl_GfQuatf_Sg__CopyToArray__SWIG_1(VtArray< GfQuatf > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfQuatf));
  }
SWIGINTERN void VtArray_Sl_GfQuatf_Sg__CopyFromArray__SWIG_1(VtArray< GfQuatf > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfQuatf));
  }
SWIGINTERN GfQuatf const &VtArray_Sl_GfQuatf_Sg__GetValue(VtArray< GfQuatf > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfQuatf_Sg__SetValue(VtArray< GfQuatf > *self,int index,GfQuatf const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfQuath_Sg__Equals(VtArray< GfQuath > const &lhs,VtArray< GfQuath > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfQuath_Sg__ToString(VtArray< GfQuath > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfQuath_Sg__CopyToArray__SWIG_0(VtArray< GfQuath > *self,GfQuath *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfQuath));
  }
SWIGINTERN void VtArray_Sl_GfQuath_Sg__CopyFromArray__SWIG_0(VtArray< GfQuath > *self,GfQuath *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfQuath));
  }
SWIGINTERN void VtArray_Sl_GfQuath_Sg__CopyToArray__SWIG_1(VtArray< GfQuath > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfQuath));
  }
SWIGINTERN void VtArray_Sl_GfQuath_Sg__CopyFromArray__SWIG_1(VtArray< GfQuath > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfQuath));
  }
SWIGINTERN GfQuath const &VtArray_Sl_GfQuath_Sg__GetValue(VtArray< GfQuath > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfQuath_Sg__SetValue(VtArray< GfQuath > *self,int index,GfQuath const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_std_string_Sg__Equals(VtArray< std::string > const &lhs,VtArray< std::string > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_std_string_Sg__ToString(VtArray< std::string > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_std_string_Sg__CopyToArray__SWIG_0(VtArray< std::string > *self,std::string *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(std::string));
  }
SWIGINTERN void VtArray_Sl_std_string_Sg__CopyFromArray__SWIG_0(VtArray< std::string > *self,std::string *src){ 
    memcpy(self->data(), src, self->size() * sizeof(std::string));
  }
SWIGINTERN void VtArray_Sl_std_string_Sg__CopyToArray__SWIG_1(VtArray< std::string > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(std::string));
  }
SWIGINTERN void VtArray_Sl_std_string_Sg__CopyFromArray__SWIG_1(VtArray< std::string > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(std::string));
  }
SWIGINTERN std::string const &VtArray_Sl_std_string_Sg__GetValue(VtArray< std::string > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_std_string_Sg__SetValue(VtArray< std::string > *self,int index,std::string const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_TfToken_Sg__Equals(VtArray< TfToken > const &lhs,VtArray< TfToken > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_TfToken_Sg__ToString(VtArray< TfToken > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_TfToken_Sg__CopyToArray__SWIG_0(VtArray< TfToken > *self,TfToken *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(TfToken));
  }
SWIGINTERN void VtArray_Sl_TfToken_Sg__CopyFromArray__SWIG_0(VtArray< TfToken > *self,TfToken *src){ 
    memcpy(self->data(), src, self->size() * sizeof(TfToken));
  }
SWIGINTERN void VtArray_Sl_TfToken_Sg__CopyToArray__SWIG_1(VtArray< TfToken > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(TfToken));
  }
SWIGINTERN void VtArray_Sl_TfToken_Sg__CopyFromArray__SWIG_1(VtArray< TfToken > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(TfToken));
  }
SWIGINTERN TfToken const &VtArray_Sl_TfToken_Sg__GetValue(VtArray< TfToken > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_TfToken_Sg__SetValue(VtArray< TfToken > *self,int index,TfToken const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_unsigned_SS_char_Sg__Equals(VtArray< unsigned char > const &lhs,VtArray< unsigned char > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_unsigned_SS_char_Sg__ToString(VtArray< unsigned char > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_char_Sg__CopyToArray__SWIG_0(VtArray< unsigned char > *self,unsigned char *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(unsigned char));
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_char_Sg__CopyFromArray__SWIG_0(VtArray< unsigned char > *self,unsigned char *src){ 
    memcpy(self->data(), src, self->size() * sizeof(unsigned char));
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_char_Sg__CopyToArray__SWIG_1(VtArray< unsigned char > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(unsigned char));
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_char_Sg__CopyFromArray__SWIG_1(VtArray< unsigned char > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(unsigned char));
  }
SWIGINTERN unsigned char const &VtArray_Sl_unsigned_SS_char_Sg__GetValue(VtArray< unsigned char > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_char_Sg__SetValue(VtArray< unsigned char > *self,int index,unsigned char const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_uint64_t_Sg__Equals(VtArray< unsigned long long > const &lhs,VtArray< unsigned long long > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_uint64_t_Sg__ToString(VtArray< uint64_t > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_uint64_t_Sg__CopyToArray__SWIG_0(VtArray< uint64_t > *self,unsigned long long *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(unsigned long long));
  }
SWIGINTERN void VtArray_Sl_uint64_t_Sg__CopyFromArray__SWIG_0(VtArray< uint64_t > *self,unsigned long long *src){ 
    memcpy(self->data(), src, self->size() * sizeof(unsigned long long));
  }
SWIGINTERN void VtArray_Sl_uint64_t_Sg__CopyToArray__SWIG_1(VtArray< uint64_t > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(unsigned long long));
  }
SWIGINTERN void VtArray_Sl_uint64_t_Sg__CopyFromArray__SWIG_1(VtArray< uint64_t > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(unsigned long long));
  }
SWIGINTERN unsigned long long const &VtArray_Sl_uint64_t_Sg__GetValue(VtArray< uint64_t > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_uint64_t_Sg__SetValue(VtArray< uint64_t > *self,int index,unsigned long long const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_unsigned_SS_int_Sg__Equals(VtArray< unsigned int > const &lhs,VtArray< unsigned int > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_unsigned_SS_int_Sg__ToString(VtArray< unsigned int > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_int_Sg__CopyToArray__SWIG_0(VtArray< unsigned int > *self,unsigned int *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(unsigned int));
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_int_Sg__CopyFromArray__SWIG_0(VtArray< unsigned int > *self,unsigned int *src){ 
    memcpy(self->data(), src, self->size() * sizeof(unsigned int));
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_int_Sg__CopyToArray__SWIG_1(VtArray< unsigned int > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(unsigned int));
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_int_Sg__CopyFromArray__SWIG_1(VtArray< unsigned int > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(unsigned int));
  }
SWIGINTERN unsigned int const &VtArray_Sl_unsigned_SS_int_Sg__GetValue(VtArray< unsigned int > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_unsigned_SS_int_Sg__SetValue(VtArray< unsigned int > *self,int index,unsigned int const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec2d_Sg__Equals(VtArray< GfVec2d > const &lhs,VtArray< GfVec2d > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec2d_Sg__ToString(VtArray< GfVec2d > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec2d_Sg__CopyToArray__SWIG_0(VtArray< GfVec2d > *self,GfVec2d *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2d));
  }
SWIGINTERN void VtArray_Sl_GfVec2d_Sg__CopyFromArray__SWIG_0(VtArray< GfVec2d > *self,GfVec2d *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2d));
  }
SWIGINTERN void VtArray_Sl_GfVec2d_Sg__CopyToArray__SWIG_1(VtArray< GfVec2d > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2d));
  }
SWIGINTERN void VtArray_Sl_GfVec2d_Sg__CopyFromArray__SWIG_1(VtArray< GfVec2d > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2d));
  }
SWIGINTERN GfVec2d const &VtArray_Sl_GfVec2d_Sg__GetValue(VtArray< GfVec2d > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec2d_Sg__SetValue(VtArray< GfVec2d > *self,int index,GfVec2d const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec2f_Sg__Equals(VtArray< GfVec2f > const &lhs,VtArray< GfVec2f > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec2f_Sg__ToString(VtArray< GfVec2f > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec2f_Sg__CopyToArray__SWIG_0(VtArray< GfVec2f > *self,GfVec2f *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2f));
  }
SWIGINTERN void VtArray_Sl_GfVec2f_Sg__CopyFromArray__SWIG_0(VtArray< GfVec2f > *self,GfVec2f *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2f));
  }
SWIGINTERN void VtArray_Sl_GfVec2f_Sg__CopyToArray__SWIG_1(VtArray< GfVec2f > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2f));
  }
SWIGINTERN void VtArray_Sl_GfVec2f_Sg__CopyFromArray__SWIG_1(VtArray< GfVec2f > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2f));
  }
SWIGINTERN GfVec2f const &VtArray_Sl_GfVec2f_Sg__GetValue(VtArray< GfVec2f > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec2f_Sg__SetValue(VtArray< GfVec2f > *self,int index,GfVec2f const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec2h_Sg__Equals(VtArray< GfVec2h > const &lhs,VtArray< GfVec2h > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec2h_Sg__ToString(VtArray< GfVec2h > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec2h_Sg__CopyToArray__SWIG_0(VtArray< GfVec2h > *self,GfVec2h *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2h));
  }
SWIGINTERN void VtArray_Sl_GfVec2h_Sg__CopyFromArray__SWIG_0(VtArray< GfVec2h > *self,GfVec2h *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2h));
  }
SWIGINTERN void VtArray_Sl_GfVec2h_Sg__CopyToArray__SWIG_1(VtArray< GfVec2h > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2h));
  }
SWIGINTERN void VtArray_Sl_GfVec2h_Sg__CopyFromArray__SWIG_1(VtArray< GfVec2h > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2h));
  }
SWIGINTERN GfVec2h const &VtArray_Sl_GfVec2h_Sg__GetValue(VtArray< GfVec2h > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec2h_Sg__SetValue(VtArray< GfVec2h > *self,int index,GfVec2h const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec2i_Sg__Equals(VtArray< GfVec2i > const &lhs,VtArray< GfVec2i > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec2i_Sg__ToString(VtArray< GfVec2i > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec2i_Sg__CopyToArray__SWIG_0(VtArray< GfVec2i > *self,GfVec2i *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2i));
  }
SWIGINTERN void VtArray_Sl_GfVec2i_Sg__CopyFromArray__SWIG_0(VtArray< GfVec2i > *self,GfVec2i *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2i));
  }
SWIGINTERN void VtArray_Sl_GfVec2i_Sg__CopyToArray__SWIG_1(VtArray< GfVec2i > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec2i));
  }
SWIGINTERN void VtArray_Sl_GfVec2i_Sg__CopyFromArray__SWIG_1(VtArray< GfVec2i > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec2i));
  }
SWIGINTERN GfVec2i const &VtArray_Sl_GfVec2i_Sg__GetValue(VtArray< GfVec2i > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec2i_Sg__SetValue(VtArray< GfVec2i > *self,int index,GfVec2i const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec3d_Sg__Equals(VtArray< GfVec3d > const &lhs,VtArray< GfVec3d > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec3d_Sg__ToString(VtArray< GfVec3d > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec3d_Sg__CopyToArray__SWIG_0(VtArray< GfVec3d > *self,GfVec3d *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3d));
  }
SWIGINTERN void VtArray_Sl_GfVec3d_Sg__CopyFromArray__SWIG_0(VtArray< GfVec3d > *self,GfVec3d *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3d));
  }
SWIGINTERN void VtArray_Sl_GfVec3d_Sg__CopyToArray__SWIG_1(VtArray< GfVec3d > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3d));
  }
SWIGINTERN void VtArray_Sl_GfVec3d_Sg__CopyFromArray__SWIG_1(VtArray< GfVec3d > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3d));
  }
SWIGINTERN GfVec3d const &VtArray_Sl_GfVec3d_Sg__GetValue(VtArray< GfVec3d > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec3d_Sg__SetValue(VtArray< GfVec3d > *self,int index,GfVec3d const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec3f_Sg__Equals(VtArray< GfVec3f > const &lhs,VtArray< GfVec3f > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec3f_Sg__ToString(VtArray< GfVec3f > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec3f_Sg__CopyToArray__SWIG_0(VtArray< GfVec3f > *self,GfVec3f *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3f));
  }
SWIGINTERN void VtArray_Sl_GfVec3f_Sg__CopyFromArray__SWIG_0(VtArray< GfVec3f > *self,GfVec3f *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3f));
  }
SWIGINTERN void VtArray_Sl_GfVec3f_Sg__CopyToArray__SWIG_1(VtArray< GfVec3f > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3f));
  }
SWIGINTERN void VtArray_Sl_GfVec3f_Sg__CopyFromArray__SWIG_1(VtArray< GfVec3f > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3f));
  }
SWIGINTERN GfVec3f const &VtArray_Sl_GfVec3f_Sg__GetValue(VtArray< GfVec3f > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec3f_Sg__SetValue(VtArray< GfVec3f > *self,int index,GfVec3f const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec3h_Sg__Equals(VtArray< GfVec3h > const &lhs,VtArray< GfVec3h > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec3h_Sg__ToString(VtArray< GfVec3h > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec3h_Sg__CopyToArray__SWIG_0(VtArray< GfVec3h > *self,GfVec3h *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3h));
  }
SWIGINTERN void VtArray_Sl_GfVec3h_Sg__CopyFromArray__SWIG_0(VtArray< GfVec3h > *self,GfVec3h *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3h));
  }
SWIGINTERN void VtArray_Sl_GfVec3h_Sg__CopyToArray__SWIG_1(VtArray< GfVec3h > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3h));
  }
SWIGINTERN void VtArray_Sl_GfVec3h_Sg__CopyFromArray__SWIG_1(VtArray< GfVec3h > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3h));
  }
SWIGINTERN GfVec3h const &VtArray_Sl_GfVec3h_Sg__GetValue(VtArray< GfVec3h > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec3h_Sg__SetValue(VtArray< GfVec3h > *self,int index,GfVec3h const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec3i_Sg__Equals(VtArray< GfVec3i > const &lhs,VtArray< GfVec3i > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec3i_Sg__ToString(VtArray< GfVec3i > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec3i_Sg__CopyToArray__SWIG_0(VtArray< GfVec3i > *self,GfVec3i *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3i));
  }
SWIGINTERN void VtArray_Sl_GfVec3i_Sg__CopyFromArray__SWIG_0(VtArray< GfVec3i > *self,GfVec3i *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3i));
  }
SWIGINTERN void VtArray_Sl_GfVec3i_Sg__CopyToArray__SWIG_1(VtArray< GfVec3i > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec3i));
  }
SWIGINTERN void VtArray_Sl_GfVec3i_Sg__CopyFromArray__SWIG_1(VtArray< GfVec3i > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec3i));
  }
SWIGINTERN GfVec3i const &VtArray_Sl_GfVec3i_Sg__GetValue(VtArray< GfVec3i > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec3i_Sg__SetValue(VtArray< GfVec3i > *self,int index,GfVec3i const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec4d_Sg__Equals(VtArray< GfVec4d > const &lhs,VtArray< GfVec4d > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec4d_Sg__ToString(VtArray< GfVec4d > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec4d_Sg__CopyToArray__SWIG_0(VtArray< GfVec4d > *self,GfVec4d *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4d));
  }
SWIGINTERN void VtArray_Sl_GfVec4d_Sg__CopyFromArray__SWIG_0(VtArray< GfVec4d > *self,GfVec4d *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4d));
  }
SWIGINTERN void VtArray_Sl_GfVec4d_Sg__CopyToArray__SWIG_1(VtArray< GfVec4d > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4d));
  }
SWIGINTERN void VtArray_Sl_GfVec4d_Sg__CopyFromArray__SWIG_1(VtArray< GfVec4d > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4d));
  }
SWIGINTERN GfVec4d const &VtArray_Sl_GfVec4d_Sg__GetValue(VtArray< GfVec4d > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec4d_Sg__SetValue(VtArray< GfVec4d > *self,int index,GfVec4d const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec4f_Sg__Equals(VtArray< GfVec4f > const &lhs,VtArray< GfVec4f > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec4f_Sg__ToString(VtArray< GfVec4f > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec4f_Sg__CopyToArray__SWIG_0(VtArray< GfVec4f > *self,GfVec4f *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4f));
  }
SWIGINTERN void VtArray_Sl_GfVec4f_Sg__CopyFromArray__SWIG_0(VtArray< GfVec4f > *self,GfVec4f *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4f));
  }
SWIGINTERN void VtArray_Sl_GfVec4f_Sg__CopyToArray__SWIG_1(VtArray< GfVec4f > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4f));
  }
SWIGINTERN void VtArray_Sl_GfVec4f_Sg__CopyFromArray__SWIG_1(VtArray< GfVec4f > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4f));
  }
SWIGINTERN GfVec4f const &VtArray_Sl_GfVec4f_Sg__GetValue(VtArray< GfVec4f > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec4f_Sg__SetValue(VtArray< GfVec4f > *self,int index,GfVec4f const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec4h_Sg__Equals(VtArray< GfVec4h > const &lhs,VtArray< GfVec4h > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec4h_Sg__ToString(VtArray< GfVec4h > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec4h_Sg__CopyToArray__SWIG_0(VtArray< GfVec4h > *self,GfVec4h *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4h));
  }
SWIGINTERN void VtArray_Sl_GfVec4h_Sg__CopyFromArray__SWIG_0(VtArray< GfVec4h > *self,GfVec4h *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4h));
  }
SWIGINTERN void VtArray_Sl_GfVec4h_Sg__CopyToArray__SWIG_1(VtArray< GfVec4h > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4h));
  }
SWIGINTERN void VtArray_Sl_GfVec4h_Sg__CopyFromArray__SWIG_1(VtArray< GfVec4h > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4h));
  }
SWIGINTERN GfVec4h const &VtArray_Sl_GfVec4h_Sg__GetValue(VtArray< GfVec4h > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec4h_Sg__SetValue(VtArray< GfVec4h > *self,int index,GfVec4h const &value){
    (*self)[index] = value;
  }
SWIGINTERN bool VtArray_Sl_GfVec4i_Sg__Equals(VtArray< GfVec4i > const &lhs,VtArray< GfVec4i > const &rhs){
    return lhs == rhs;
  }
SWIGINTERN std::string VtArray_Sl_GfVec4i_Sg__ToString(VtArray< GfVec4i > *self){
      std::stringstream s;
    s << *self;
    return s.str();
  }
SWIGINTERN void VtArray_Sl_GfVec4i_Sg__CopyToArray__SWIG_0(VtArray< GfVec4i > *self,GfVec4i *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4i));
  }
SWIGINTERN void VtArray_Sl_GfVec4i_Sg__CopyFromArray__SWIG_0(VtArray< GfVec4i > *self,GfVec4i *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4i));
  }
SWIGINTERN void VtArray_Sl_GfVec4i_Sg__CopyToArray__SWIG_1(VtArray< GfVec4i > *self,void *dest){ 
    memcpy(dest, self->data(), self->size() * sizeof(GfVec4i));
  }
SWIGINTERN void VtArray_Sl_GfVec4i_Sg__CopyFromArray__SWIG_1(VtArray< GfVec4i > *self,void *src){ 
    memcpy(self->data(), src, self->size() * sizeof(GfVec4i));
  }
SWIGINTERN GfVec4i const &VtArray_Sl_GfVec4i_Sg__GetValue(VtArray< GfVec4i > *self,int index){
    return (*self)[index];
  }
SWIGINTERN void VtArray_Sl_GfVec4i_Sg__SetValue(VtArray< GfVec4i > *self,int index,GfVec4i const &value){
    (*self)[index] = value;
  }

#include "pxr/base/vt/value.h"


// This code manifests in UsdCs class.


extern GfHalf VtValueToGfHalf(VtValue const& value) {
  if (value.IsHolding<GfHalf>()) {
    return value.UncheckedGet<GfHalf>();
  }
  return GfHalf();
}
extern void VtValueToGfHalf(VtValue const& value, GfHalf* output) {
  if (value.IsHolding<GfHalf>()) {
    *output = value.UncheckedGet<GfHalf>();
  }
}

extern GfMatrix2d VtValueToGfMatrix2d(VtValue const& value) {
  if (value.IsHolding<GfMatrix2d>()) {
    return value.UncheckedGet<GfMatrix2d>();
  }
  return GfMatrix2d();
}
extern void VtValueToGfMatrix2d(VtValue const& value, GfMatrix2d* output) {
  if (value.IsHolding<GfMatrix2d>()) {
    *output = value.UncheckedGet<GfMatrix2d>();
  }
}

extern GfMatrix3d VtValueToGfMatrix3d(VtValue const& value) {
  if (value.IsHolding<GfMatrix3d>()) {
    return value.UncheckedGet<GfMatrix3d>();
  }
  return GfMatrix3d();
}
extern void VtValueToGfMatrix3d(VtValue const& value, GfMatrix3d* output) {
  if (value.IsHolding<GfMatrix3d>()) {
    *output = value.UncheckedGet<GfMatrix3d>();
  }
}

extern GfMatrix4d VtValueToGfMatrix4d(VtValue const& value) {
  if (value.IsHolding<GfMatrix4d>()) {
    return value.UncheckedGet<GfMatrix4d>();
  }
  return GfMatrix4d();
}
extern void VtValueToGfMatrix4d(VtValue const& value, GfMatrix4d* output) {
  if (value.IsHolding<GfMatrix4d>()) {
    *output = value.UncheckedGet<GfMatrix4d>();
  }
}

extern GfQuatd VtValueToGfQuatd(VtValue const& value) {
  if (value.IsHolding<GfQuatd>()) {
    return value.UncheckedGet<GfQuatd>();
  }
  return GfQuatd();
}
extern void VtValueToGfQuatd(VtValue const& value, GfQuatd* output) {
  if (value.IsHolding<GfQuatd>()) {
    *output = value.UncheckedGet<GfQuatd>();
  }
}

extern GfQuatf VtValueToGfQuatf(VtValue const& value) {
  if (value.IsHolding<GfQuatf>()) {
    return value.UncheckedGet<GfQuatf>();
  }
  return GfQuatf();
}
extern void VtValueToGfQuatf(VtValue const& value, GfQuatf* output) {
  if (value.IsHolding<GfQuatf>()) {
    *output = value.UncheckedGet<GfQuatf>();
  }
}

extern GfQuath VtValueToGfQuath(VtValue const& value) {
  if (value.IsHolding<GfQuath>()) {
    return value.UncheckedGet<GfQuath>();
  }
  return GfQuath();
}
extern void VtValueToGfQuath(VtValue const& value, GfQuath* output) {
  if (value.IsHolding<GfQuath>()) {
    *output = value.UncheckedGet<GfQuath>();
  }
}

extern GfVec2d VtValueToGfVec2d(VtValue const& value) {
  if (value.IsHolding<GfVec2d>()) {
    return value.UncheckedGet<GfVec2d>();
  }
  return GfVec2d();
}
extern void VtValueToGfVec2d(VtValue const& value, GfVec2d* output) {
  if (value.IsHolding<GfVec2d>()) {
    *output = value.UncheckedGet<GfVec2d>();
  }
}

extern GfVec2f VtValueToGfVec2f(VtValue const& value) {
  if (value.IsHolding<GfVec2f>()) {
    return value.UncheckedGet<GfVec2f>();
  }
  return GfVec2f();
}
extern void VtValueToGfVec2f(VtValue const& value, GfVec2f* output) {
  if (value.IsHolding<GfVec2f>()) {
    *output = value.UncheckedGet<GfVec2f>();
  }
}

extern GfVec2h VtValueToGfVec2h(VtValue const& value) {
  if (value.IsHolding<GfVec2h>()) {
    return value.UncheckedGet<GfVec2h>();
  }
  return GfVec2h();
}
extern void VtValueToGfVec2h(VtValue const& value, GfVec2h* output) {
  if (value.IsHolding<GfVec2h>()) {
    *output = value.UncheckedGet<GfVec2h>();
  }
}

extern GfVec2i VtValueToGfVec2i(VtValue const& value) {
  if (value.IsHolding<GfVec2i>()) {
    return value.UncheckedGet<GfVec2i>();
  }
  return GfVec2i();
}
extern void VtValueToGfVec2i(VtValue const& value, GfVec2i* output) {
  if (value.IsHolding<GfVec2i>()) {
    *output = value.UncheckedGet<GfVec2i>();
  }
}

extern GfVec3d VtValueToGfVec3d(VtValue const& value) {
  if (value.IsHolding<GfVec3d>()) {
    return value.UncheckedGet<GfVec3d>();
  }
  return GfVec3d();
}
extern void VtValueToGfVec3d(VtValue const& value, GfVec3d* output) {
  if (value.IsHolding<GfVec3d>()) {
    *output = value.UncheckedGet<GfVec3d>();
  }
}

extern GfVec3f VtValueToGfVec3f(VtValue const& value) {
  if (value.IsHolding<GfVec3f>()) {
    return value.UncheckedGet<GfVec3f>();
  }
  return GfVec3f();
}
extern void VtValueToGfVec3f(VtValue const& value, GfVec3f* output) {
  if (value.IsHolding<GfVec3f>()) {
    *output = value.UncheckedGet<GfVec3f>();
  }
}

extern GfVec3h VtValueToGfVec3h(VtValue const& value) {
  if (value.IsHolding<GfVec3h>()) {
    return value.UncheckedGet<GfVec3h>();
  }
  return GfVec3h();
}
extern void VtValueToGfVec3h(VtValue const& value, GfVec3h* output) {
  if (value.IsHolding<GfVec3h>()) {
    *output = value.UncheckedGet<GfVec3h>();
  }
}

extern GfVec3i VtValueToGfVec3i(VtValue const& value) {
  if (value.IsHolding<GfVec3i>()) {
    return value.UncheckedGet<GfVec3i>();
  }
  return GfVec3i();
}
extern void VtValueToGfVec3i(VtValue const& value, GfVec3i* output) {
  if (value.IsHolding<GfVec3i>()) {
    *output = value.UncheckedGet<GfVec3i>();
  }
}

extern GfVec4d VtValueToGfVec4d(VtValue const& value) {
  if (value.IsHolding<GfVec4d>()) {
    return value.UncheckedGet<GfVec4d>();
  }
  return GfVec4d();
}
extern void VtValueToGfVec4d(VtValue const& value, GfVec4d* output) {
  if (value.IsHolding<GfVec4d>()) {
    *output = value.UncheckedGet<GfVec4d>();
  }
}

extern GfVec4f VtValueToGfVec4f(VtValue const& value) {
  if (value.IsHolding<GfVec4f>()) {
    return value.UncheckedGet<GfVec4f>();
  }
  return GfVec4f();
}
extern void VtValueToGfVec4f(VtValue const& value, GfVec4f* output) {
  if (value.IsHolding<GfVec4f>()) {
    *output = value.UncheckedGet<GfVec4f>();
  }
}

extern GfVec4h VtValueToGfVec4h(VtValue const& value) {
  if (value.IsHolding<GfVec4h>()) {
    return value.UncheckedGet<GfVec4h>();
  }
  return GfVec4h();
}
extern void VtValueToGfVec4h(VtValue const& value, GfVec4h* output) {
  if (value.IsHolding<GfVec4h>()) {
    *output = value.UncheckedGet<GfVec4h>();
  }
}

extern GfVec4i VtValueToGfVec4i(VtValue const& value) {
  if (value.IsHolding<GfVec4i>()) {
    return value.UncheckedGet<GfVec4i>();
  }
  return GfVec4i();
}
extern void VtValueToGfVec4i(VtValue const& value, GfVec4i* output) {
  if (value.IsHolding<GfVec4i>()) {
    *output = value.UncheckedGet<GfVec4i>();
  }
}

extern SdfAssetPath VtValueToSdfAssetPath(VtValue const& value) {
  if (value.IsHolding<SdfAssetPath>()) {
    return value.UncheckedGet<SdfAssetPath>();
  }
  return SdfAssetPath();
}
extern void VtValueToSdfAssetPath(VtValue const& value, SdfAssetPath* output) {
  if (value.IsHolding<SdfAssetPath>()) {
    *output = value.UncheckedGet<SdfAssetPath>();
  }
}

extern SdfAssetPathArray VtValueToSdfAssetPathArray(VtValue const& value) {
  if (value.IsHolding<SdfAssetPathArray>()) {
    return value.UncheckedGet<SdfAssetPathArray>();
  }
  return SdfAssetPathArray();
}
extern void VtValueToSdfAssetPathArray(VtValue const& value, SdfAssetPathArray* output) {
  if (value.IsHolding<SdfAssetPathArray>()) {
    *output = value.UncheckedGet<SdfAssetPathArray>();
  }
}

extern TfToken VtValueToTfToken(VtValue const& value) {
  if (value.IsHolding<TfToken>()) {
    return value.UncheckedGet<TfToken>();
  }
  return TfToken();
}
extern void VtValueToTfToken(VtValue const& value, TfToken* output) {
  if (value.IsHolding<TfToken>()) {
    *output = value.UncheckedGet<TfToken>();
  }
}

extern VtBoolArray VtValueToVtBoolArray(VtValue const& value) {
  if (value.IsHolding<VtBoolArray>()) {
    return value.UncheckedGet<VtBoolArray>();
  }
  return VtBoolArray();
}
extern void VtValueToVtBoolArray(VtValue const& value, VtBoolArray* output) {
  if (value.IsHolding<VtBoolArray>()) {
    *output = value.UncheckedGet<VtBoolArray>();
  }
}

extern VtDoubleArray VtValueToVtDoubleArray(VtValue const& value) {
  if (value.IsHolding<VtDoubleArray>()) {
    return value.UncheckedGet<VtDoubleArray>();
  }
  return VtDoubleArray();
}
extern void VtValueToVtDoubleArray(VtValue const& value, VtDoubleArray* output) {
  if (value.IsHolding<VtDoubleArray>()) {
    *output = value.UncheckedGet<VtDoubleArray>();
  }
}

extern VtFloatArray VtValueToVtFloatArray(VtValue const& value) {
  if (value.IsHolding<VtFloatArray>()) {
    return value.UncheckedGet<VtFloatArray>();
  }
  return VtFloatArray();
}
extern void VtValueToVtFloatArray(VtValue const& value, VtFloatArray* output) {
  if (value.IsHolding<VtFloatArray>()) {
    *output = value.UncheckedGet<VtFloatArray>();
  }
}

extern VtHalfArray VtValueToVtHalfArray(VtValue const& value) {
  if (value.IsHolding<VtHalfArray>()) {
    return value.UncheckedGet<VtHalfArray>();
  }
  return VtHalfArray();
}
extern void VtValueToVtHalfArray(VtValue const& value, VtHalfArray* output) {
  if (value.IsHolding<VtHalfArray>()) {
    *output = value.UncheckedGet<VtHalfArray>();
  }
}

extern VtInt64Array VtValueToVtInt64Array(VtValue const& value) {
  if (value.IsHolding<VtInt64Array>()) {
    return value.UncheckedGet<VtInt64Array>();
  }
  return VtInt64Array();
}
extern void VtValueToVtInt64Array(VtValue const& value, VtInt64Array* output) {
  if (value.IsHolding<VtInt64Array>()) {
    *output = value.UncheckedGet<VtInt64Array>();
  }
}

extern VtIntArray VtValueToVtIntArray(VtValue const& value) {
  if (value.IsHolding<VtIntArray>()) {
    return value.UncheckedGet<VtIntArray>();
  }
  return VtIntArray();
}
extern void VtValueToVtIntArray(VtValue const& value, VtIntArray* output) {
  if (value.IsHolding<VtIntArray>()) {
    *output = value.UncheckedGet<VtIntArray>();
  }
}

extern VtMatrix2dArray VtValueToVtMatrix2dArray(VtValue const& value) {
  if (value.IsHolding<VtMatrix2dArray>()) {
    return value.UncheckedGet<VtMatrix2dArray>();
  }
  return VtMatrix2dArray();
}
extern void VtValueToVtMatrix2dArray(VtValue const& value, VtMatrix2dArray* output) {
  if (value.IsHolding<VtMatrix2dArray>()) {
    *output = value.UncheckedGet<VtMatrix2dArray>();
  }
}

extern VtMatrix3dArray VtValueToVtMatrix3dArray(VtValue const& value) {
  if (value.IsHolding<VtMatrix3dArray>()) {
    return value.UncheckedGet<VtMatrix3dArray>();
  }
  return VtMatrix3dArray();
}
extern void VtValueToVtMatrix3dArray(VtValue const& value, VtMatrix3dArray* output) {
  if (value.IsHolding<VtMatrix3dArray>()) {
    *output = value.UncheckedGet<VtMatrix3dArray>();
  }
}

extern VtMatrix4dArray VtValueToVtMatrix4dArray(VtValue const& value) {
  if (value.IsHolding<VtMatrix4dArray>()) {
    return value.UncheckedGet<VtMatrix4dArray>();
  }
  return VtMatrix4dArray();
}
extern void VtValueToVtMatrix4dArray(VtValue const& value, VtMatrix4dArray* output) {
  if (value.IsHolding<VtMatrix4dArray>()) {
    *output = value.UncheckedGet<VtMatrix4dArray>();
  }
}

extern VtQuatdArray VtValueToVtQuatdArray(VtValue const& value) {
  if (value.IsHolding<VtQuatdArray>()) {
    return value.UncheckedGet<VtQuatdArray>();
  }
  return VtQuatdArray();
}
extern void VtValueToVtQuatdArray(VtValue const& value, VtQuatdArray* output) {
  if (value.IsHolding<VtQuatdArray>()) {
    *output = value.UncheckedGet<VtQuatdArray>();
  }
}

extern VtQuatfArray VtValueToVtQuatfArray(VtValue const& value) {
  if (value.IsHolding<VtQuatfArray>()) {
    return value.UncheckedGet<VtQuatfArray>();
  }
  return VtQuatfArray();
}
extern void VtValueToVtQuatfArray(VtValue const& value, VtQuatfArray* output) {
  if (value.IsHolding<VtQuatfArray>()) {
    *output = value.UncheckedGet<VtQuatfArray>();
  }
}

extern VtQuathArray VtValueToVtQuathArray(VtValue const& value) {
  if (value.IsHolding<VtQuathArray>()) {
    return value.UncheckedGet<VtQuathArray>();
  }
  return VtQuathArray();
}
extern void VtValueToVtQuathArray(VtValue const& value, VtQuathArray* output) {
  if (value.IsHolding<VtQuathArray>()) {
    *output = value.UncheckedGet<VtQuathArray>();
  }
}

extern VtStringArray VtValueToVtStringArray(VtValue const& value) {
  if (value.IsHolding<VtStringArray>()) {
    return value.UncheckedGet<VtStringArray>();
  }
  return VtStringArray();
}
extern void VtValueToVtStringArray(VtValue const& value, VtStringArray* output) {
  if (value.IsHolding<VtStringArray>()) {
    *output = value.UncheckedGet<VtStringArray>();
  }
}

extern VtTokenArray VtValueToVtTokenArray(VtValue const& value) {
  if (value.IsHolding<VtTokenArray>()) {
    return value.UncheckedGet<VtTokenArray>();
  }
  return VtTokenArray();
}
extern void VtValueToVtTokenArray(VtValue const& value, VtTokenArray* output) {
  if (value.IsHolding<VtTokenArray>()) {
    *output = value.UncheckedGet<VtTokenArray>();
  }
}

extern VtUCharArray VtValueToVtUCharArray(VtValue const& value) {
  if (value.IsHolding<VtUCharArray>()) {
    return value.UncheckedGet<VtUCharArray>();
  }
  return VtUCharArray();
}
extern void VtValueToVtUCharArray(VtValue const& value, VtUCharArray* output) {
  if (value.IsHolding<VtUCharArray>()) {
    *output = value.UncheckedGet<VtUCharArray>();
  }
}

extern VtUInt64Array VtValueToVtUInt64Array(VtValue const& value) {
  if (value.IsHolding<VtUInt64Array>()) {
    return value.UncheckedGet<VtUInt64Array>();
  }
  return VtUInt64Array();
}
extern void VtValueToVtUInt64Array(VtValue const& value, VtUInt64Array* output) {
  if (value.IsHolding<VtUInt64Array>()) {
    *output = value.UncheckedGet<VtUInt64Array>();
  }
}

extern VtUIntArray VtValueToVtUIntArray(VtValue const& value) {
  if (value.IsHolding<VtUIntArray>()) {
    return value.UncheckedGet<VtUIntArray>();
  }
  return VtUIntArray();
}
extern void VtValueToVtUIntArray(VtValue const& value, VtUIntArray* output) {
  if (value.IsHolding<VtUIntArray>()) {
    *output = value.UncheckedGet<VtUIntArray>();
  }
}

extern VtVec2dArray VtValueToVtVec2dArray(VtValue const& value) {
  if (value.IsHolding<VtVec2dArray>()) {
    return value.UncheckedGet<VtVec2dArray>();
  }
  return VtVec2dArray();
}
extern void VtValueToVtVec2dArray(VtValue const& value, VtVec2dArray* output) {
  if (value.IsHolding<VtVec2dArray>()) {
    *output = value.UncheckedGet<VtVec2dArray>();
  }
}

extern VtVec2fArray VtValueToVtVec2fArray(VtValue const& value) {
  if (value.IsHolding<VtVec2fArray>()) {
    return value.UncheckedGet<VtVec2fArray>();
  }
  return VtVec2fArray();
}
extern void VtValueToVtVec2fArray(VtValue const& value, VtVec2fArray* output) {
  if (value.IsHolding<VtVec2fArray>()) {
    *output = value.UncheckedGet<VtVec2fArray>();
  }
}

extern VtVec2hArray VtValueToVtVec2hArray(VtValue const& value) {
  if (value.IsHolding<VtVec2hArray>()) {
    return value.UncheckedGet<VtVec2hArray>();
  }
  return VtVec2hArray();
}
extern void VtValueToVtVec2hArray(VtValue const& value, VtVec2hArray* output) {
  if (value.IsHolding<VtVec2hArray>()) {
    *output = value.UncheckedGet<VtVec2hArray>();
  }
}

extern VtVec2iArray VtValueToVtVec2iArray(VtValue const& value) {
  if (value.IsHolding<VtVec2iArray>()) {
    return value.UncheckedGet<VtVec2iArray>();
  }
  return VtVec2iArray();
}
extern void VtValueToVtVec2iArray(VtValue const& value, VtVec2iArray* output) {
  if (value.IsHolding<VtVec2iArray>()) {
    *output = value.UncheckedGet<VtVec2iArray>();
  }
}

extern VtVec3dArray VtValueToVtVec3dArray(VtValue const& value) {
  if (value.IsHolding<VtVec3dArray>()) {
    return value.UncheckedGet<VtVec3dArray>();
  }
  return VtVec3dArray();
}
extern void VtValueToVtVec3dArray(VtValue const& value, VtVec3dArray* output) {
  if (value.IsHolding<VtVec3dArray>()) {
    *output = value.UncheckedGet<VtVec3dArray>();
  }
}

extern VtVec3fArray VtValueToVtVec3fArray(VtValue const& value) {
  if (value.IsHolding<VtVec3fArray>()) {
    return value.UncheckedGet<VtVec3fArray>();
  }
  return VtVec3fArray();
}
extern void VtValueToVtVec3fArray(VtValue const& value, VtVec3fArray* output) {
  if (value.IsHolding<VtVec3fArray>()) {
    *output = value.UncheckedGet<VtVec3fArray>();
  }
}

extern VtVec3hArray VtValueToVtVec3hArray(VtValue const& value) {
  if (value.IsHolding<VtVec3hArray>()) {
    return value.UncheckedGet<VtVec3hArray>();
  }
  return VtVec3hArray();
}
extern void VtValueToVtVec3hArray(VtValue const& value, VtVec3hArray* output) {
  if (value.IsHolding<VtVec3hArray>()) {
    *output = value.UncheckedGet<VtVec3hArray>();
  }
}

extern VtVec3iArray VtValueToVtVec3iArray(VtValue const& value) {
  if (value.IsHolding<VtVec3iArray>()) {
    return value.UncheckedGet<VtVec3iArray>();
  }
  return VtVec3iArray();
}
extern void VtValueToVtVec3iArray(VtValue const& value, VtVec3iArray* output) {
  if (value.IsHolding<VtVec3iArray>()) {
    *output = value.UncheckedGet<VtVec3iArray>();
  }
}

extern VtVec4dArray VtValueToVtVec4dArray(VtValue const& value) {
  if (value.IsHolding<VtVec4dArray>()) {
    return value.UncheckedGet<VtVec4dArray>();
  }
  return VtVec4dArray();
}
extern void VtValueToVtVec4dArray(VtValue const& value, VtVec4dArray* output) {
  if (value.IsHolding<VtVec4dArray>()) {
    *output = value.UncheckedGet<VtVec4dArray>();
  }
}

extern VtVec4fArray VtValueToVtVec4fArray(VtValue const& value) {
  if (value.IsHolding<VtVec4fArray>()) {
    return value.UncheckedGet<VtVec4fArray>();
  }
  return VtVec4fArray();
}
extern void VtValueToVtVec4fArray(VtValue const& value, VtVec4fArray* output) {
  if (value.IsHolding<VtVec4fArray>()) {
    *output = value.UncheckedGet<VtVec4fArray>();
  }
}

extern VtVec4hArray VtValueToVtVec4hArray(VtValue const& value) {
  if (value.IsHolding<VtVec4hArray>()) {
    return value.UncheckedGet<VtVec4hArray>();
  }
  return VtVec4hArray();
}
extern void VtValueToVtVec4hArray(VtValue const& value, VtVec4hArray* output) {
  if (value.IsHolding<VtVec4hArray>()) {
    *output = value.UncheckedGet<VtVec4hArray>();
  }
}

extern VtVec4iArray VtValueToVtVec4iArray(VtValue const& value) {
  if (value.IsHolding<VtVec4iArray>()) {
    return value.UncheckedGet<VtVec4iArray>();
  }
  return VtVec4iArray();
}
extern void VtValueToVtVec4iArray(VtValue const& value, VtVec4iArray* output) {
  if (value.IsHolding<VtVec4iArray>()) {
    *output = value.UncheckedGet<VtVec4iArray>();
  }
}

extern bool VtValueTobool(VtValue const& value) {
  if (value.IsHolding<bool>()) {
    return value.UncheckedGet<bool>();
  }
  return bool();
}
extern void VtValueTobool(VtValue const& value, bool* output) {
  if (value.IsHolding<bool>()) {
    *output = value.UncheckedGet<bool>();
  }
}

extern double VtValueTodouble(VtValue const& value) {
  if (value.IsHolding<double>()) {
    return value.UncheckedGet<double>();
  }
  return double();
}
extern void VtValueTodouble(VtValue const& value, double* output) {
  if (value.IsHolding<double>()) {
    *output = value.UncheckedGet<double>();
  }
}

extern float VtValueTofloat(VtValue const& value) {
  if (value.IsHolding<float>()) {
    return value.UncheckedGet<float>();
  }
  return float();
}
extern void VtValueTofloat(VtValue const& value, float* output) {
  if (value.IsHolding<float>()) {
    *output = value.UncheckedGet<float>();
  }
}

extern int VtValueToint(VtValue const& value) {
  if (value.IsHolding<int>()) {
    return value.UncheckedGet<int>();
  }
  return int();
}
extern void VtValueToint(VtValue const& value, int* output) {
  if (value.IsHolding<int>()) {
    *output = value.UncheckedGet<int>();
  }
}

extern int64_t VtValueTolong(VtValue const& value) {
  if (value.IsHolding<int64_t>()) {
    return value.UncheckedGet<int64_t>();
  }
  return int64_t();
}
extern void VtValueTolong(VtValue const& value, int64_t* output) {
  if (value.IsHolding<int64_t>()) {
    *output = value.UncheckedGet<int64_t>();
  }
}

extern std::string VtValueTostring(VtValue const& value) {
  if (value.IsHolding<std::string>()) {
    return value.UncheckedGet<std::string>();
  }
  return std::string();
}
extern void VtValueTostring(VtValue const& value, std::string* output) {
  if (value.IsHolding<std::string>()) {
    *output = value.UncheckedGet<std::string>();
  }
}

extern uint64_t VtValueToulong(VtValue const& value) {
  if (value.IsHolding<uint64_t>()) {
    return value.UncheckedGet<uint64_t>();
  }
  return uint64_t();
}
extern void VtValueToulong(VtValue const& value, uint64_t* output) {
  if (value.IsHolding<uint64_t>()) {
    *output = value.UncheckedGet<uint64_t>();
  }
}

extern unsigned char VtValueTobyte(VtValue const& value) {
  if (value.IsHolding<unsigned char>()) {
    return value.UncheckedGet<unsigned char>();
  }
  return (unsigned char)(0);
}
extern void VtValueTobyte(VtValue const& value, unsigned char* output) {
  if (value.IsHolding<unsigned char>()) {
    *output = value.UncheckedGet<unsigned char>();
  }
}

extern unsigned int VtValueTouint(VtValue const& value) {
  if (value.IsHolding<unsigned int>()) {
    return value.UncheckedGet<unsigned int>();
  }
  return (unsigned int)(0);
}
extern void VtValueTouint(VtValue const& value, unsigned int* output) {
  if (value.IsHolding<unsigned int>()) {
    *output = value.UncheckedGet<unsigned int>();
  }
}

SWIGINTERN bool VtValue_Equals(VtValue const &lhs,VtValue const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int VtValue_GetHashCode(VtValue *self){
    return (int)TfHash()(self);
  }

#include "pxr/base/vt/dictionary.h"


#include "pxr/usd/ar/resolverContext.h"


#include "pxr/usd/sdf/types.h"


#include "pxr/usd/sdf/listOp.h"


#include "pxr/usd/sdf/valueTypeName.h"

SWIGINTERN bool SdfValueTypeName_Equals(SdfValueTypeName const &lhs,SdfValueTypeName const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int SdfValueTypeName_GetHashCode(SdfValueTypeName *self){
    return (int)TfHash()(self);
  }

#include "pxr/usd/sdf/types.h"


    SdfValueTypeName SdfGetValueTypeColor4dArray() { return SdfValueTypeNames->Color4dArray; }
    SdfValueTypeName SdfGetValueTypeMatrix3d() { return SdfValueTypeNames->Matrix3d; }
    SdfValueTypeName SdfGetValueTypeTexCoord3dArray() { return SdfValueTypeNames->TexCoord3dArray; }
    SdfValueTypeName SdfGetValueTypePoint3h() { return SdfValueTypeNames->Point3h; }
    SdfValueTypeName SdfGetValueTypeAsset() { return SdfValueTypeNames->Asset; }
    SdfValueTypeName SdfGetValueTypePoint3d() { return SdfValueTypeNames->Point3d; }
    SdfValueTypeName SdfGetValueTypePoint3f() { return SdfValueTypeNames->Point3f; }
    SdfValueTypeName SdfGetValueTypeQuathArray() { return SdfValueTypeNames->QuathArray; }
    SdfValueTypeName SdfGetValueTypeUChar() { return SdfValueTypeNames->UChar; }
    SdfValueTypeName SdfGetValueTypeMatrix2dArray() { return SdfValueTypeNames->Matrix2dArray; }
    SdfValueTypeName SdfGetValueTypeTexCoord2fArray() { return SdfValueTypeNames->TexCoord2fArray; }
    SdfValueTypeName SdfGetValueTypeVector3dArray() { return SdfValueTypeNames->Vector3dArray; }
    SdfValueTypeName SdfGetValueTypeColor4h() { return SdfValueTypeNames->Color4h; }
    SdfValueTypeName SdfGetValueTypeColor4f() { return SdfValueTypeNames->Color4f; }
    SdfValueTypeName SdfGetValueTypeColor4d() { return SdfValueTypeNames->Color4d; }
    SdfValueTypeName SdfGetValueTypeFloat2Array() { return SdfValueTypeNames->Float2Array; }
    SdfValueTypeName SdfGetValueTypeFloat4Array() { return SdfValueTypeNames->Float4Array; }
    SdfValueTypeName SdfGetValueTypeAssetArray() { return SdfValueTypeNames->AssetArray; }
    SdfValueTypeName SdfGetValueTypeUInt() { return SdfValueTypeNames->UInt; }
    SdfValueTypeName SdfGetValueTypeNormal3fArray() { return SdfValueTypeNames->Normal3fArray; }
    SdfValueTypeName SdfGetValueTypeToken() { return SdfValueTypeNames->Token; }
    SdfValueTypeName SdfGetValueTypeFloat3Array() { return SdfValueTypeNames->Float3Array; }
    SdfValueTypeName SdfGetValueTypeTexCoord2hArray() { return SdfValueTypeNames->TexCoord2hArray; }
    SdfValueTypeName SdfGetValueTypeUCharArray() { return SdfValueTypeNames->UCharArray; }
    SdfValueTypeName SdfGetValueTypeDoubleArray() { return SdfValueTypeNames->DoubleArray; }
    SdfValueTypeName SdfGetValueTypeFrame4d() { return SdfValueTypeNames->Frame4d; }
    SdfValueTypeName SdfGetValueTypeQuatdArray() { return SdfValueTypeNames->QuatdArray; }
    SdfValueTypeName SdfGetValueTypePoint3hArray() { return SdfValueTypeNames->Point3hArray; }
    SdfValueTypeName SdfGetValueTypeString() { return SdfValueTypeNames->String; }
    SdfValueTypeName SdfGetValueTypeDouble4() { return SdfValueTypeNames->Double4; }
    SdfValueTypeName SdfGetValueTypeNormal3dArray() { return SdfValueTypeNames->Normal3dArray; }
    SdfValueTypeName SdfGetValueTypeColor3dArray() { return SdfValueTypeNames->Color3dArray; }
    SdfValueTypeName SdfGetValueTypeTexCoord2dArray() { return SdfValueTypeNames->TexCoord2dArray; }
    SdfValueTypeName SdfGetValueTypeHalf3Array() { return SdfValueTypeNames->Half3Array; }
    SdfValueTypeName SdfGetValueTypeMatrix4dArray() { return SdfValueTypeNames->Matrix4dArray; }
    SdfValueTypeName SdfGetValueTypeNormal3h() { return SdfValueTypeNames->Normal3h; }
    SdfValueTypeName SdfGetValueTypeColor3fArray() { return SdfValueTypeNames->Color3fArray; }
    SdfValueTypeName SdfGetValueTypeColor4hArray() { return SdfValueTypeNames->Color4hArray; }
    SdfValueTypeName SdfGetValueTypeNormal3d() { return SdfValueTypeNames->Normal3d; }
    SdfValueTypeName SdfGetValueTypeMatrix2d() { return SdfValueTypeNames->Matrix2d; }
    SdfValueTypeName SdfGetValueTypeNormal3f() { return SdfValueTypeNames->Normal3f; }
    SdfValueTypeName SdfGetValueTypeUInt64() { return SdfValueTypeNames->UInt64; }
    SdfValueTypeName SdfGetValueTypeFloatArray() { return SdfValueTypeNames->FloatArray; }
    SdfValueTypeName SdfGetValueTypeColor3f() { return SdfValueTypeNames->Color3f; }
    SdfValueTypeName SdfGetValueTypeColor3d() { return SdfValueTypeNames->Color3d; }
    SdfValueTypeName SdfGetValueTypeInt64Array() { return SdfValueTypeNames->Int64Array; }
    SdfValueTypeName SdfGetValueTypeIntArray() { return SdfValueTypeNames->IntArray; }
    SdfValueTypeName SdfGetValueTypePoint3dArray() { return SdfValueTypeNames->Point3dArray; }
    SdfValueTypeName SdfGetValueTypeTexCoord3hArray() { return SdfValueTypeNames->TexCoord3hArray; }
    SdfValueTypeName SdfGetValueTypeBool() { return SdfValueTypeNames->Bool; }
    SdfValueTypeName SdfGetValueTypeColor3hArray() { return SdfValueTypeNames->Color3hArray; }
    SdfValueTypeName SdfGetValueTypeDouble2() { return SdfValueTypeNames->Double2; }
    SdfValueTypeName SdfGetValueTypeDouble3() { return SdfValueTypeNames->Double3; }
    SdfValueTypeName SdfGetValueTypeUInt64Array() { return SdfValueTypeNames->UInt64Array; }
    SdfValueTypeName SdfGetValueTypeStringArray() { return SdfValueTypeNames->StringArray; }
    SdfValueTypeName SdfGetValueTypeVector3hArray() { return SdfValueTypeNames->Vector3hArray; }
    SdfValueTypeName SdfGetValueTypeMatrix3dArray() { return SdfValueTypeNames->Matrix3dArray; }
    SdfValueTypeName SdfGetValueTypeQuatf() { return SdfValueTypeNames->Quatf; }
    SdfValueTypeName SdfGetValueTypeDouble3Array() { return SdfValueTypeNames->Double3Array; }
    SdfValueTypeName SdfGetValueTypeQuatd() { return SdfValueTypeNames->Quatd; }
    SdfValueTypeName SdfGetValueTypeQuath() { return SdfValueTypeNames->Quath; }
    SdfValueTypeName SdfGetValueTypeInt4() { return SdfValueTypeNames->Int4; }
    SdfValueTypeName SdfGetValueTypeHalf4Array() { return SdfValueTypeNames->Half4Array; }
    SdfValueTypeName SdfGetValueTypeInt2() { return SdfValueTypeNames->Int2; }
    SdfValueTypeName SdfGetValueTypePoint3fArray() { return SdfValueTypeNames->Point3fArray; }
    SdfValueTypeName SdfGetValueTypeInt3() { return SdfValueTypeNames->Int3; }
    SdfValueTypeName SdfGetValueTypeBoolArray() { return SdfValueTypeNames->BoolArray; }
    SdfValueTypeName SdfGetValueTypeHalf2Array() { return SdfValueTypeNames->Half2Array; }
    SdfValueTypeName SdfGetValueTypeMatrix4d() { return SdfValueTypeNames->Matrix4d; }
    SdfValueTypeName SdfGetValueTypeInt() { return SdfValueTypeNames->Int; }
    SdfValueTypeName SdfGetValueTypeDouble4Array() { return SdfValueTypeNames->Double4Array; }
    SdfValueTypeName SdfGetValueTypeHalfArray() { return SdfValueTypeNames->HalfArray; }
    SdfValueTypeName SdfGetValueTypeFloat4() { return SdfValueTypeNames->Float4; }
    SdfValueTypeName SdfGetValueTypeFloat2() { return SdfValueTypeNames->Float2; }
    SdfValueTypeName SdfGetValueTypeFloat3() { return SdfValueTypeNames->Float3; }
    SdfValueTypeName SdfGetValueTypeUIntArray() { return SdfValueTypeNames->UIntArray; }
    SdfValueTypeName SdfGetValueTypeTexCoord2d() { return SdfValueTypeNames->TexCoord2d; }
    SdfValueTypeName SdfGetValueTypeHalf3() { return SdfValueTypeNames->Half3; }
    SdfValueTypeName SdfGetValueTypeTexCoord3h() { return SdfValueTypeNames->TexCoord3h; }
    SdfValueTypeName SdfGetValueTypeFrame4dArray() { return SdfValueTypeNames->Frame4dArray; }
    SdfValueTypeName SdfGetValueTypeVector3fArray() { return SdfValueTypeNames->Vector3fArray; }
    SdfValueTypeName SdfGetValueTypeTexCoord3d() { return SdfValueTypeNames->TexCoord3d; }
    SdfValueTypeName SdfGetValueTypeTexCoord3f() { return SdfValueTypeNames->TexCoord3f; }
    SdfValueTypeName SdfGetValueTypeColor3h() { return SdfValueTypeNames->Color3h; }
    SdfValueTypeName SdfGetValueTypeHalf() { return SdfValueTypeNames->Half; }
    SdfValueTypeName SdfGetValueTypeVector3h() { return SdfValueTypeNames->Vector3h; }
    SdfValueTypeName SdfGetValueTypeVector3d() { return SdfValueTypeNames->Vector3d; }
    SdfValueTypeName SdfGetValueTypeDouble() { return SdfValueTypeNames->Double; }
    SdfValueTypeName SdfGetValueTypeVector3f() { return SdfValueTypeNames->Vector3f; }
    SdfValueTypeName SdfGetValueTypeInt4Array() { return SdfValueTypeNames->Int4Array; }
    SdfValueTypeName SdfGetValueTypeColor4fArray() { return SdfValueTypeNames->Color4fArray; }
    SdfValueTypeName SdfGetValueTypeQuatfArray() { return SdfValueTypeNames->QuatfArray; }
    SdfValueTypeName SdfGetValueTypeDouble2Array() { return SdfValueTypeNames->Double2Array; }
    SdfValueTypeName SdfGetValueTypeTokenArray() { return SdfValueTypeNames->TokenArray; }
    SdfValueTypeName SdfGetValueTypeNormal3hArray() { return SdfValueTypeNames->Normal3hArray; }
    SdfValueTypeName SdfGetValueTypeInt3Array() { return SdfValueTypeNames->Int3Array; }
    SdfValueTypeName SdfGetValueTypeTexCoord2h() { return SdfValueTypeNames->TexCoord2h; }
    SdfValueTypeName SdfGetValueTypeHalf4() { return SdfValueTypeNames->Half4; }
    SdfValueTypeName SdfGetValueTypeFloat() { return SdfValueTypeNames->Float; }
    SdfValueTypeName SdfGetValueTypeTexCoord2f() { return SdfValueTypeNames->TexCoord2f; }
    SdfValueTypeName SdfGetValueTypeHalf2() { return SdfValueTypeNames->Half2; }
    SdfValueTypeName SdfGetValueTypeInt2Array() { return SdfValueTypeNames->Int2Array; }
    SdfValueTypeName SdfGetValueTypeInt64() { return SdfValueTypeNames->Int64; }
    SdfValueTypeName SdfGetValueTypeTexCoord3fArray() { return SdfValueTypeNames->TexCoord3fArray; }


#include "pxr/usd/sdf/assetPath.h"

SWIGINTERN bool SdfAssetPath_Equals(SdfAssetPath const &lhs,SdfAssetPath const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int SdfAssetPath_GetHashCode(SdfAssetPath *self){
    return (int)TfHash()(self);
  }

#include "pxr/usd/sdf/path.h"

SWIGINTERN std::vector< SdfPath > *new_std_vector_Sl_SdfPath_Sg___SWIG_2(int capacity){
        std::vector< SdfPath >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SdfPath >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SdfPath std_vector_Sl_SdfPath_Sg__getitemcopy(std::vector< SdfPath > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN SdfPath const &std_vector_Sl_SdfPath_Sg__getitem(std::vector< SdfPath > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__setitem(std::vector< SdfPath > *self,int index,SdfPath const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__AddRange(std::vector< SdfPath > *self,std::vector< SdfPath > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SdfPath > *std_vector_Sl_SdfPath_Sg__GetRange(std::vector< SdfPath > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SdfPath >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__Insert(std::vector< SdfPath > *self,int index,SdfPath const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__InsertRange(std::vector< SdfPath > *self,int index,std::vector< SdfPath > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__RemoveAt(std::vector< SdfPath > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__RemoveRange(std::vector< SdfPath > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SdfPath > *std_vector_Sl_SdfPath_Sg__Repeat(SdfPath const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SdfPath >(count, value);
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__Reverse__SWIG_0(std::vector< SdfPath > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__Reverse__SWIG_1(std::vector< SdfPath > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfPath_Sg__SetRange(std::vector< SdfPath > *self,int index,std::vector< SdfPath > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

  void GetPathFromVector(std::vector<SdfPath> const& paths, int index, SdfPath* output) {
    *output = paths[index];
  }

SWIGINTERN bool SdfPath_Equals(SdfPath const &lhs,SdfPath const &rhs){
  return lhs == rhs;
  }

#include "pxr/usd/sdf/layerOffset.h"

SWIGINTERN std::vector< SdfLayerOffset > *new_std_vector_Sl_SdfLayerOffset_Sg___SWIG_2(int capacity){
        std::vector< SdfLayerOffset >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SdfLayerOffset >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SdfLayerOffset std_vector_Sl_SdfLayerOffset_Sg__getitemcopy(std::vector< SdfLayerOffset > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN SdfLayerOffset const &std_vector_Sl_SdfLayerOffset_Sg__getitem(std::vector< SdfLayerOffset > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__setitem(std::vector< SdfLayerOffset > *self,int index,SdfLayerOffset const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__AddRange(std::vector< SdfLayerOffset > *self,std::vector< SdfLayerOffset > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SdfLayerOffset > *std_vector_Sl_SdfLayerOffset_Sg__GetRange(std::vector< SdfLayerOffset > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SdfLayerOffset >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__Insert(std::vector< SdfLayerOffset > *self,int index,SdfLayerOffset const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__InsertRange(std::vector< SdfLayerOffset > *self,int index,std::vector< SdfLayerOffset > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__RemoveAt(std::vector< SdfLayerOffset > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__RemoveRange(std::vector< SdfLayerOffset > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SdfLayerOffset > *std_vector_Sl_SdfLayerOffset_Sg__Repeat(SdfLayerOffset const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SdfLayerOffset >(count, value);
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__Reverse__SWIG_0(std::vector< SdfLayerOffset > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__Reverse__SWIG_1(std::vector< SdfLayerOffset > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfLayerOffset_Sg__SetRange(std::vector< SdfLayerOffset > *self,int index,std::vector< SdfLayerOffset > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/sdf/payload.h"


#include "pxr/usd/sdf/namespaceEdit.h"

SWIGINTERN std::vector< SdfNamespaceEdit > *new_std_vector_Sl_SdfNamespaceEdit_Sg___SWIG_2(int capacity){
        std::vector< SdfNamespaceEdit >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SdfNamespaceEdit >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SdfNamespaceEdit std_vector_Sl_SdfNamespaceEdit_Sg__getitemcopy(std::vector< SdfNamespaceEdit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN SdfNamespaceEdit const &std_vector_Sl_SdfNamespaceEdit_Sg__getitem(std::vector< SdfNamespaceEdit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__setitem(std::vector< SdfNamespaceEdit > *self,int index,SdfNamespaceEdit const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__AddRange(std::vector< SdfNamespaceEdit > *self,std::vector< SdfNamespaceEdit > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SdfNamespaceEdit > *std_vector_Sl_SdfNamespaceEdit_Sg__GetRange(std::vector< SdfNamespaceEdit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SdfNamespaceEdit >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__Insert(std::vector< SdfNamespaceEdit > *self,int index,SdfNamespaceEdit const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__InsertRange(std::vector< SdfNamespaceEdit > *self,int index,std::vector< SdfNamespaceEdit > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__RemoveAt(std::vector< SdfNamespaceEdit > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__RemoveRange(std::vector< SdfNamespaceEdit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SdfNamespaceEdit > *std_vector_Sl_SdfNamespaceEdit_Sg__Repeat(SdfNamespaceEdit const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SdfNamespaceEdit >(count, value);
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__Reverse__SWIG_0(std::vector< SdfNamespaceEdit > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__Reverse__SWIG_1(std::vector< SdfNamespaceEdit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEdit_Sg__SetRange(std::vector< SdfNamespaceEdit > *self,int index,std::vector< SdfNamespaceEdit > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< SdfNamespaceEditDetail > *new_std_vector_Sl_SdfNamespaceEditDetail_Sg___SWIG_2(int capacity){
        std::vector< SdfNamespaceEditDetail >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SdfNamespaceEditDetail >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SdfNamespaceEditDetail std_vector_Sl_SdfNamespaceEditDetail_Sg__getitemcopy(std::vector< SdfNamespaceEditDetail > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN SdfNamespaceEditDetail const &std_vector_Sl_SdfNamespaceEditDetail_Sg__getitem(std::vector< SdfNamespaceEditDetail > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__setitem(std::vector< SdfNamespaceEditDetail > *self,int index,SdfNamespaceEditDetail const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__AddRange(std::vector< SdfNamespaceEditDetail > *self,std::vector< SdfNamespaceEditDetail > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SdfNamespaceEditDetail > *std_vector_Sl_SdfNamespaceEditDetail_Sg__GetRange(std::vector< SdfNamespaceEditDetail > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SdfNamespaceEditDetail >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__Insert(std::vector< SdfNamespaceEditDetail > *self,int index,SdfNamespaceEditDetail const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__InsertRange(std::vector< SdfNamespaceEditDetail > *self,int index,std::vector< SdfNamespaceEditDetail > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__RemoveAt(std::vector< SdfNamespaceEditDetail > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__RemoveRange(std::vector< SdfNamespaceEditDetail > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SdfNamespaceEditDetail > *std_vector_Sl_SdfNamespaceEditDetail_Sg__Repeat(SdfNamespaceEditDetail const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SdfNamespaceEditDetail >(count, value);
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__Reverse__SWIG_0(std::vector< SdfNamespaceEditDetail > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__Reverse__SWIG_1(std::vector< SdfNamespaceEditDetail > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfNamespaceEditDetail_Sg__SetRange(std::vector< SdfNamespaceEditDetail > *self,int index,std::vector< SdfNamespaceEditDetail > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/sdf/layerBase.h"


#include "pxr/usd/sdf/layer.h"
#include "pxr/usd/sdf/attributeSpec.h"
#include "pxr/usd/sdf/relationshipSpec.h"

SWIGINTERN std::vector< SdfLayerHandle > *new_std_vector_Sl_SdfLayerHandle_Sg___SWIG_2(int capacity){
        std::vector< SdfLayerHandle >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SdfLayerHandle >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SdfLayerHandle std_vector_Sl_SdfLayerHandle_Sg__getitemcopy(std::vector< SdfLayerHandle > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN SdfLayerHandle const &std_vector_Sl_SdfLayerHandle_Sg__getitem(std::vector< SdfLayerHandle > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__setitem(std::vector< SdfLayerHandle > *self,int index,SdfLayerHandle const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__AddRange(std::vector< SdfLayerHandle > *self,std::vector< SdfLayerHandle > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SdfLayerHandle > *std_vector_Sl_SdfLayerHandle_Sg__GetRange(std::vector< SdfLayerHandle > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SdfLayerHandle >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__Insert(std::vector< SdfLayerHandle > *self,int index,SdfLayerHandle const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__InsertRange(std::vector< SdfLayerHandle > *self,int index,std::vector< SdfLayerHandle > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__RemoveAt(std::vector< SdfLayerHandle > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__RemoveRange(std::vector< SdfLayerHandle > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SdfLayerHandle > *std_vector_Sl_SdfLayerHandle_Sg__Repeat(SdfLayerHandle const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SdfLayerHandle >(count, value);
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__Reverse__SWIG_0(std::vector< SdfLayerHandle > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__Reverse__SWIG_1(std::vector< SdfLayerHandle > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SdfLayerHandle_Sg__SetRange(std::vector< SdfLayerHandle > *self,int index,std::vector< SdfLayerHandle > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::string SdfLayer_ExportToString(SdfLayer const *self){
  std::string str;
  self->ExportToString(&str);
  return str;
  }

#include "pxr/base/vt/value.h"
#include "pxr/base/tf/token.h"
#include "pxr/usd/usd/common.h"

SWIGINTERN VtValue const &UsdMetadataValueMap_GetValue(UsdMetadataValueMap const *self,TfToken const &key){
    return self->at(key);
  }
SWIGINTERN void UsdMetadataValueMap_SetValue(UsdMetadataValueMap *self,TfToken const &key,VtValue const &value){
    (*self)[key] = value;
  }

#include "pxr/usd/usd/common.h"


#include "pxr/usd/usd/timeCode.h"


#include "pxr/usd/usd/editTarget.h"


#include "pxr/usd/usd/interpolation.h"


#include "pxr/usd/usd/primFlags.h"


#include "pxr/usd/usd/primRange.h"

SWIGINTERN void UsdPrimRange_iterator_MoveNext(UsdPrimRange::iterator *self){
    ++(*self);
  }
SWIGINTERN UsdPrim UsdPrimRange_iterator_GetCurrent(UsdPrimRange::iterator *self){
    return **self;
  }
SWIGINTERN bool UsdPrimRange_iterator_Equals(UsdPrimRange::iterator const &lhs,UsdPrimRange::iterator const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int UsdPrimRange_iterator_GetHashCode(UsdPrimRange::iterator *self){
    return (int)TfHash()(self);
  }
SWIGINTERN bool UsdPrimRange_Equals(UsdPrimRange const &lhs,UsdPrimRange const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int UsdPrimRange_GetHashCode(UsdPrimRange *self){
    return (int)TfHash()(self);
  }

#include "pxr/usd/usd/stagePopulationMask.h"


#include "pxr/usd/usd/stage.h"
#include "pxr/usd/usd/prim.h"
#include "pxr/usd/usd/primRange.h"
#include <string>

SWIGINTERN std::vector< UsdPrim > UsdStage_GetAllPrims(UsdStage *self){
    std::vector<UsdPrim> targets;
    for (auto&& p : self->Traverse()) { targets.push_back(p); }
    return targets;
  }
SWIGINTERN std::vector< UsdPrim > UsdStage_GetAllPrimsByType(UsdStage *self,std::string typeName){
    std::vector<UsdPrim> targets;
    for (auto&& p : self->Traverse()) {
      if (p.GetTypeName() == typeName) {
        targets.push_back(p);
      }
    }
    return targets;
  }
SWIGINTERN std::vector< SdfPath > UsdStage_GetAllPaths(UsdStage *self){
    std::vector<SdfPath> targets;
    for (auto&& p : self->Traverse()) {
      targets.push_back(p.GetPath());
    }
    return targets;
  }
SWIGINTERN std::vector< SdfPath > UsdStage_GetAllPathsByType(UsdStage *self,std::string typeName){
    std::vector<SdfPath> targets;
    for (auto&& p : self->Traverse()) {
      if (p.GetTypeName() == typeName) {
        targets.push_back(p.GetPath());
      }
    }
    return targets;
  }

#include "pxr/usd/usd/stageCache.h"


#include "pxr/usd/usd/resolveInfo.h"


#include "pxr/usd/usd/object.h"

SWIGINTERN bool UsdObject_Equals(UsdObject const &lhs,UsdObject const &rhs){
  return lhs == rhs;
  }
SWIGINTERN bool UsdObject__IsValid(UsdObject *self){
  return bool(*self);
  }
SWIGINTERN VtValue UsdObject_GetMetadata(UsdObject const *self,TfToken key){
  VtValue v;
  self->GetMetadata(key, &v);
  return v;
  }
SWIGINTERN VtValue UsdObject_GetMetadataByDictKey(UsdObject const *self,TfToken const &key,TfToken const &keyPath){
  VtValue v;
  self->GetMetadataByDictKey(key, keyPath, &v);
  return v;
  }

#include "pxr/usd/usd/prim.h"
#include "pxr/usd/usd/variantSets.h"
#include "pxr/usd/usd/inherits.h"
#include "pxr/usd/usd/references.h"
#include "pxr/usd/usd/specializes.h"
#include "pxr/usd/usd/property.h"
#include "pxr/usd/usd/attribute.h"
#include "pxr/usd/usd/relationship.h"


  void GetPrimFromVector(std::vector<UsdPrim> const& prims, int index, UsdPrim* output) {
    *output = prims[index];
  }

SWIGINTERN std::vector< UsdPrim > *new_std_vector_Sl_UsdPrim_Sg___SWIG_2(int capacity){
        std::vector< UsdPrim >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdPrim >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdPrim std_vector_Sl_UsdPrim_Sg__getitemcopy(std::vector< UsdPrim > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdPrim const &std_vector_Sl_UsdPrim_Sg__getitem(std::vector< UsdPrim > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__setitem(std::vector< UsdPrim > *self,int index,UsdPrim const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__AddRange(std::vector< UsdPrim > *self,std::vector< UsdPrim > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdPrim > *std_vector_Sl_UsdPrim_Sg__GetRange(std::vector< UsdPrim > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdPrim >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__Insert(std::vector< UsdPrim > *self,int index,UsdPrim const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__InsertRange(std::vector< UsdPrim > *self,int index,std::vector< UsdPrim > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__RemoveAt(std::vector< UsdPrim > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__RemoveRange(std::vector< UsdPrim > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdPrim > *std_vector_Sl_UsdPrim_Sg__Repeat(UsdPrim const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdPrim >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__Reverse__SWIG_0(std::vector< UsdPrim > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__Reverse__SWIG_1(std::vector< UsdPrim > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdPrim_Sg__SetRange(std::vector< UsdPrim > *self,int index,std::vector< UsdPrim > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN void UsdPrimSiblingIterator_MoveNext(UsdPrimSiblingIterator *self){
    ++(*self);
  }
SWIGINTERN UsdPrim UsdPrimSiblingIterator_GetCurrent(UsdPrimSiblingIterator *self){
    return **self;
  }
SWIGINTERN bool UsdPrimSiblingIterator_Equals(UsdPrimSiblingIterator const &lhs,UsdPrimSiblingIterator const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int UsdPrimSiblingIterator_GetHashCode(UsdPrimSiblingIterator *self){
    return (int)TfHash()(self);
  }
SWIGINTERN void UsdPrimSubtreeIterator_MoveNext(UsdPrimSubtreeIterator *self){
    ++(*self);
  }
SWIGINTERN UsdPrim UsdPrimSubtreeIterator_GetCurrent(UsdPrimSubtreeIterator *self){
    return **self;
  }
SWIGINTERN bool UsdPrimSubtreeIterator_Equals(UsdPrimSubtreeIterator const &lhs,UsdPrimSubtreeIterator const &rhs){
    return lhs == rhs;
  }
SWIGINTERN int UsdPrimSubtreeIterator_GetHashCode(UsdPrimSubtreeIterator *self){
    return (int)TfHash()(self);
  }
SWIGINTERN UsdPrimSiblingIterator boost_iterator_range_Sl_UsdPrimSiblingIterator_Sg__GetStart(boost::iterator_range< UsdPrimSiblingIterator > *self){
    return self->begin();
  }
SWIGINTERN UsdPrimSiblingIterator boost_iterator_range_Sl_UsdPrimSiblingIterator_Sg__GetEnd(boost::iterator_range< UsdPrimSiblingIterator > *self){
    return self->end();
  }
SWIGINTERN UsdPrimSubtreeIterator boost_iterator_range_Sl_UsdPrimSubtreeIterator_Sg__GetStart(boost::iterator_range< UsdPrimSubtreeIterator > *self){
    return self->begin();
  }
SWIGINTERN UsdPrimSubtreeIterator boost_iterator_range_Sl_UsdPrimSubtreeIterator_Sg__GetEnd(boost::iterator_range< UsdPrimSubtreeIterator > *self){
    return self->end();
  }
SWIGINTERN bool UsdPrim_GetAttributeValue(UsdPrim *self,TfToken attrName,VtValue *valueOut,UsdTimeCode time){
    UsdAttribute attr = self->GetAttribute(attrName);
    if (!attr) { return false; }
    return attr.Get(valueOut, time);
  }

#include "pxr/usd/usd/property.h"

SWIGINTERN std::vector< UsdProperty > *new_std_vector_Sl_UsdProperty_Sg___SWIG_2(int capacity){
        std::vector< UsdProperty >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdProperty >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdProperty std_vector_Sl_UsdProperty_Sg__getitemcopy(std::vector< UsdProperty > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdProperty const &std_vector_Sl_UsdProperty_Sg__getitem(std::vector< UsdProperty > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__setitem(std::vector< UsdProperty > *self,int index,UsdProperty const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__AddRange(std::vector< UsdProperty > *self,std::vector< UsdProperty > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdProperty > *std_vector_Sl_UsdProperty_Sg__GetRange(std::vector< UsdProperty > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdProperty >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__Insert(std::vector< UsdProperty > *self,int index,UsdProperty const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__InsertRange(std::vector< UsdProperty > *self,int index,std::vector< UsdProperty > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__RemoveAt(std::vector< UsdProperty > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__RemoveRange(std::vector< UsdProperty > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdProperty > *std_vector_Sl_UsdProperty_Sg__Repeat(UsdProperty const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdProperty >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__Reverse__SWIG_0(std::vector< UsdProperty > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__Reverse__SWIG_1(std::vector< UsdProperty > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdProperty_Sg__SetRange(std::vector< UsdProperty > *self,int index,std::vector< UsdProperty > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usd/relationship.h"

SWIGINTERN std::vector< UsdRelationship > *new_std_vector_Sl_UsdRelationship_Sg___SWIG_2(int capacity){
        std::vector< UsdRelationship >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdRelationship >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdRelationship std_vector_Sl_UsdRelationship_Sg__getitemcopy(std::vector< UsdRelationship > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdRelationship const &std_vector_Sl_UsdRelationship_Sg__getitem(std::vector< UsdRelationship > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__setitem(std::vector< UsdRelationship > *self,int index,UsdRelationship const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__AddRange(std::vector< UsdRelationship > *self,std::vector< UsdRelationship > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdRelationship > *std_vector_Sl_UsdRelationship_Sg__GetRange(std::vector< UsdRelationship > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdRelationship >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__Insert(std::vector< UsdRelationship > *self,int index,UsdRelationship const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__InsertRange(std::vector< UsdRelationship > *self,int index,std::vector< UsdRelationship > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__RemoveAt(std::vector< UsdRelationship > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__RemoveRange(std::vector< UsdRelationship > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdRelationship > *std_vector_Sl_UsdRelationship_Sg__Repeat(UsdRelationship const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdRelationship >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__Reverse__SWIG_0(std::vector< UsdRelationship > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__Reverse__SWIG_1(std::vector< UsdRelationship > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdRelationship_Sg__SetRange(std::vector< UsdRelationship > *self,int index,std::vector< UsdRelationship > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN SdfPathVector UsdRelationship_GetTargets(UsdRelationship *self){
  SdfPathVector targets;
  self->GetTargets(&targets);
  return targets;
  }
SWIGINTERN SdfPathVector UsdRelationship_GetForwardedTargets(UsdRelationship const *self){
     SdfPathVector targets;
  self->GetForwardedTargets(&targets);
  return targets;
   }

#include "pxr/usd/usd/attribute.h"

SWIGINTERN std::vector< UsdAttribute > *new_std_vector_Sl_UsdAttribute_Sg___SWIG_2(int capacity){
        std::vector< UsdAttribute >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdAttribute >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdAttribute std_vector_Sl_UsdAttribute_Sg__getitemcopy(std::vector< UsdAttribute > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdAttribute const &std_vector_Sl_UsdAttribute_Sg__getitem(std::vector< UsdAttribute > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__setitem(std::vector< UsdAttribute > *self,int index,UsdAttribute const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__AddRange(std::vector< UsdAttribute > *self,std::vector< UsdAttribute > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdAttribute > *std_vector_Sl_UsdAttribute_Sg__GetRange(std::vector< UsdAttribute > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdAttribute >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__Insert(std::vector< UsdAttribute > *self,int index,UsdAttribute const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__InsertRange(std::vector< UsdAttribute > *self,int index,std::vector< UsdAttribute > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__RemoveAt(std::vector< UsdAttribute > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__RemoveRange(std::vector< UsdAttribute > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdAttribute > *std_vector_Sl_UsdAttribute_Sg__Repeat(UsdAttribute const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdAttribute >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__Reverse__SWIG_0(std::vector< UsdAttribute > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__Reverse__SWIG_1(std::vector< UsdAttribute > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdAttribute_Sg__SetRange(std::vector< UsdAttribute > *self,int index,std::vector< UsdAttribute > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< double > UsdAttribute_GetTimeSamples(UsdAttribute const *self){
  std::vector<double> v;
  self->GetTimeSamples(&v);
  return v;
  }
SWIGINTERN std::vector< double > UsdAttribute_GetTimeSamplesInInterval(UsdAttribute const *self,GfInterval const &interval){
  std::vector<double> v;
  self->GetTimeSamplesInInterval(interval, &v);
  return v;
  }
SWIGINTERN VtValue UsdAttribute_Get__SWIG_3(UsdAttribute const *self){
  VtValue v;
  self->Get(&v);
  return v;
  }
SWIGINTERN VtValue UsdAttribute_Get__SWIG_4(UsdAttribute const *self,UsdTimeCode time){
  VtValue v;
  self->Get(&v, time);
  return v;
  }

#include "pxr/usd/usd/variantSets.h"


#include "pxr/usd/usd/inherits.h"


#include "pxr/usd/usd/references.h"


#include "pxr/usd/usd/specializes.h"


#include "pxr/usd/usd/schemaBase.h"

SWIGINTERN bool UsdSchemaBase_Equals(UsdSchemaBase const &lhs,UsdSchemaBase const &rhs){
    return bool(lhs) == bool(rhs) && (!bool(lhs) || lhs.GetPrim() == rhs.GetPrim());
  }
SWIGINTERN int UsdSchemaBase_GetHashCode(UsdSchemaBase *self){
    return (int)TfHash()(self);
  }
SWIGINTERN bool UsdSchemaBase__IsValid(UsdSchemaBase *self){
    return bool(*self);
  }

#include "pxr/usd/usd/typed.h"


#include "pxr/usd/usdGeom/tokens.h"


#include "pxr/usd/usdGeom/faceSetAPI.h"

SWIGINTERN std::vector< UsdGeomFaceSetAPI > *new_std_vector_Sl_UsdGeomFaceSetAPI_Sg___SWIG_2(int capacity){
        std::vector< UsdGeomFaceSetAPI >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdGeomFaceSetAPI >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdGeomFaceSetAPI std_vector_Sl_UsdGeomFaceSetAPI_Sg__getitemcopy(std::vector< UsdGeomFaceSetAPI > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdGeomFaceSetAPI const &std_vector_Sl_UsdGeomFaceSetAPI_Sg__getitem(std::vector< UsdGeomFaceSetAPI > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__setitem(std::vector< UsdGeomFaceSetAPI > *self,int index,UsdGeomFaceSetAPI const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__AddRange(std::vector< UsdGeomFaceSetAPI > *self,std::vector< UsdGeomFaceSetAPI > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdGeomFaceSetAPI > *std_vector_Sl_UsdGeomFaceSetAPI_Sg__GetRange(std::vector< UsdGeomFaceSetAPI > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdGeomFaceSetAPI >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__Insert(std::vector< UsdGeomFaceSetAPI > *self,int index,UsdGeomFaceSetAPI const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__InsertRange(std::vector< UsdGeomFaceSetAPI > *self,int index,std::vector< UsdGeomFaceSetAPI > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__RemoveAt(std::vector< UsdGeomFaceSetAPI > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__RemoveRange(std::vector< UsdGeomFaceSetAPI > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdGeomFaceSetAPI > *std_vector_Sl_UsdGeomFaceSetAPI_Sg__Repeat(UsdGeomFaceSetAPI const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdGeomFaceSetAPI >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__Reverse__SWIG_0(std::vector< UsdGeomFaceSetAPI > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__Reverse__SWIG_1(std::vector< UsdGeomFaceSetAPI > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomFaceSetAPI_Sg__SetRange(std::vector< UsdGeomFaceSetAPI > *self,int index,std::vector< UsdGeomFaceSetAPI > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usdGeom/motionAPI.h"


#include "pxr/usd/usdGeom/collectionAPI.h"

SWIGINTERN std::vector< UsdGeomCollectionAPI > *new_std_vector_Sl_UsdGeomCollectionAPI_Sg___SWIG_2(int capacity){
        std::vector< UsdGeomCollectionAPI >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdGeomCollectionAPI >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdGeomCollectionAPI std_vector_Sl_UsdGeomCollectionAPI_Sg__getitemcopy(std::vector< UsdGeomCollectionAPI > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdGeomCollectionAPI const &std_vector_Sl_UsdGeomCollectionAPI_Sg__getitem(std::vector< UsdGeomCollectionAPI > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__setitem(std::vector< UsdGeomCollectionAPI > *self,int index,UsdGeomCollectionAPI const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__AddRange(std::vector< UsdGeomCollectionAPI > *self,std::vector< UsdGeomCollectionAPI > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdGeomCollectionAPI > *std_vector_Sl_UsdGeomCollectionAPI_Sg__GetRange(std::vector< UsdGeomCollectionAPI > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdGeomCollectionAPI >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__Insert(std::vector< UsdGeomCollectionAPI > *self,int index,UsdGeomCollectionAPI const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__InsertRange(std::vector< UsdGeomCollectionAPI > *self,int index,std::vector< UsdGeomCollectionAPI > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__RemoveAt(std::vector< UsdGeomCollectionAPI > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__RemoveRange(std::vector< UsdGeomCollectionAPI > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdGeomCollectionAPI > *std_vector_Sl_UsdGeomCollectionAPI_Sg__Repeat(UsdGeomCollectionAPI const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdGeomCollectionAPI >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__Reverse__SWIG_0(std::vector< UsdGeomCollectionAPI > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__Reverse__SWIG_1(std::vector< UsdGeomCollectionAPI > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomCollectionAPI_Sg__SetRange(std::vector< UsdGeomCollectionAPI > *self,int index,std::vector< UsdGeomCollectionAPI > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usdGeom/primvar.h"

SWIGINTERN std::vector< UsdGeomPrimvar > *new_std_vector_Sl_UsdGeomPrimvar_Sg___SWIG_2(int capacity){
        std::vector< UsdGeomPrimvar >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdGeomPrimvar >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdGeomPrimvar std_vector_Sl_UsdGeomPrimvar_Sg__getitemcopy(std::vector< UsdGeomPrimvar > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdGeomPrimvar const &std_vector_Sl_UsdGeomPrimvar_Sg__getitem(std::vector< UsdGeomPrimvar > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__setitem(std::vector< UsdGeomPrimvar > *self,int index,UsdGeomPrimvar const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__AddRange(std::vector< UsdGeomPrimvar > *self,std::vector< UsdGeomPrimvar > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdGeomPrimvar > *std_vector_Sl_UsdGeomPrimvar_Sg__GetRange(std::vector< UsdGeomPrimvar > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdGeomPrimvar >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__Insert(std::vector< UsdGeomPrimvar > *self,int index,UsdGeomPrimvar const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__InsertRange(std::vector< UsdGeomPrimvar > *self,int index,std::vector< UsdGeomPrimvar > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__RemoveAt(std::vector< UsdGeomPrimvar > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__RemoveRange(std::vector< UsdGeomPrimvar > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdGeomPrimvar > *std_vector_Sl_UsdGeomPrimvar_Sg__Repeat(UsdGeomPrimvar const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdGeomPrimvar >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__Reverse__SWIG_0(std::vector< UsdGeomPrimvar > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__Reverse__SWIG_1(std::vector< UsdGeomPrimvar > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomPrimvar_Sg__SetRange(std::vector< UsdGeomPrimvar > *self,int index,std::vector< UsdGeomPrimvar > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usdGeom/scope.h"


#include "pxr/usd/usdGeom/imageable.h"


#include "pxr/usd/usdGeom/xformOp.h"

SWIGINTERN std::vector< UsdGeomXformOp > *new_std_vector_Sl_UsdGeomXformOp_Sg___SWIG_2(int capacity){
        std::vector< UsdGeomXformOp >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdGeomXformOp >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdGeomXformOp std_vector_Sl_UsdGeomXformOp_Sg__getitemcopy(std::vector< UsdGeomXformOp > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdGeomXformOp const &std_vector_Sl_UsdGeomXformOp_Sg__getitem(std::vector< UsdGeomXformOp > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__setitem(std::vector< UsdGeomXformOp > *self,int index,UsdGeomXformOp const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__AddRange(std::vector< UsdGeomXformOp > *self,std::vector< UsdGeomXformOp > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdGeomXformOp > *std_vector_Sl_UsdGeomXformOp_Sg__GetRange(std::vector< UsdGeomXformOp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdGeomXformOp >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__Insert(std::vector< UsdGeomXformOp > *self,int index,UsdGeomXformOp const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__InsertRange(std::vector< UsdGeomXformOp > *self,int index,std::vector< UsdGeomXformOp > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__RemoveAt(std::vector< UsdGeomXformOp > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__RemoveRange(std::vector< UsdGeomXformOp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdGeomXformOp > *std_vector_Sl_UsdGeomXformOp_Sg__Repeat(UsdGeomXformOp const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdGeomXformOp >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__Reverse__SWIG_0(std::vector< UsdGeomXformOp > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__Reverse__SWIG_1(std::vector< UsdGeomXformOp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomXformOp_Sg__SetRange(std::vector< UsdGeomXformOp > *self,int index,std::vector< UsdGeomXformOp > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool UsdGeomXformOp_Set__SWIG_2(UsdGeomXformOp const *self,GfMatrix4d const &value,UsdTimeCode time=UsdTimeCode::Default()){
    return self->Set(value, time);
  }

#include "pxr/usd/usdGeom/xformable.h"


#include "pxr/usd/usdGeom/xform.h"


#include "pxr/usd/usdGeom/camera.h"


#include "pxr/usd/usdGeom/boundable.h"


#include "pxr/usd/usdGeom/pointInstancer.h"

SWIGINTERN std::vector< bool > *new_std_vector_Sl_bool_Sg___SWIG_2(int capacity){
        std::vector< bool >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< bool >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitemcopy(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitem(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__setitem(std::vector< bool > *self,int index,bool const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__AddRange(std::vector< bool > *self,std::vector< bool > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__GetRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< bool >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Insert(std::vector< bool > *self,int index,bool const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__InsertRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveAt(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__Repeat(bool const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< bool >(count, value);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_0(std::vector< bool > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_1(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__SetRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Contains(std::vector< bool > *self,bool const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_bool_Sg__IndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_bool_Sg__LastIndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Remove(std::vector< bool > *self,bool const &value){
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< int64_t > *new_std_vector_Sl_int64_t_Sg___SWIG_2(int capacity){
        std::vector< long long >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< long long >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN long long std_vector_Sl_int64_t_Sg__getitemcopy(std::vector< int64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN long long const &std_vector_Sl_int64_t_Sg__getitem(std::vector< int64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__setitem(std::vector< int64_t > *self,int index,long long const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__AddRange(std::vector< int64_t > *self,std::vector< long long > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< long long > *std_vector_Sl_int64_t_Sg__GetRange(std::vector< int64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< long long >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__Insert(std::vector< int64_t > *self,int index,long long const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__InsertRange(std::vector< int64_t > *self,int index,std::vector< long long > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__RemoveAt(std::vector< int64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__RemoveRange(std::vector< int64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< long long > *std_vector_Sl_int64_t_Sg__Repeat(long long const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< long long >(count, value);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__Reverse__SWIG_0(std::vector< int64_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__Reverse__SWIG_1(std::vector< int64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int64_t_Sg__SetRange(std::vector< int64_t > *self,int index,std::vector< long long > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int64_t_Sg__Contains(std::vector< int64_t > *self,long long const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int64_t_Sg__IndexOf(std::vector< int64_t > *self,long long const &value){
        int index = -1;
        std::vector< long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int64_t_Sg__LastIndexOf(std::vector< int64_t > *self,long long const &value){
        int index = -1;
        std::vector< long long >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int64_t_Sg__Remove(std::vector< int64_t > *self,long long const &value){
        std::vector< long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#include "pxr/usd/usdGeom/gprim.h"


#include "pxr/usd/usdGeom/capsule.h"


#include "pxr/usd/usdGeom/cone.h"


#include "pxr/usd/usdGeom/cube.h"


#include "pxr/usd/usdGeom/cylinder.h"


#include "pxr/usd/usdGeom/sphere.h"


#include "pxr/usd/usdGeom/pointBased.h"


#include "pxr/usd/usdGeom/points.h"


#include "pxr/usd/usdGeom/curves.h"


#include "pxr/usd/usdGeom/basisCurves.h"

SWIGINTERN std::vector< std::pair< TfToken,size_t > > *new_std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::pair< TfToken,size_t > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::pair< TfToken,size_t > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::pair< TfToken,size_t > std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__getitemcopy(std::vector< std::pair< TfToken,size_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::pair< TfToken,size_t > const &std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__getitem(std::vector< std::pair< TfToken,size_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__setitem(std::vector< std::pair< TfToken,size_t > > *self,int index,std::pair< TfToken,size_t > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__AddRange(std::vector< std::pair< TfToken,size_t > > *self,std::vector< std::pair< TfToken,size_t > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::pair< TfToken,size_t > > *std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__GetRange(std::vector< std::pair< TfToken,size_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::pair< TfToken,size_t > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Insert(std::vector< std::pair< TfToken,size_t > > *self,int index,std::pair< TfToken,size_t > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__InsertRange(std::vector< std::pair< TfToken,size_t > > *self,int index,std::vector< std::pair< TfToken,size_t > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__RemoveAt(std::vector< std::pair< TfToken,size_t > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__RemoveRange(std::vector< std::pair< TfToken,size_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::pair< TfToken,size_t > > *std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Repeat(std::pair< TfToken,size_t > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::pair< TfToken,size_t > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Reverse__SWIG_0(std::vector< std::pair< TfToken,size_t > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Reverse__SWIG_1(std::vector< std::pair< TfToken,size_t > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__SetRange(std::vector< std::pair< TfToken,size_t > > *self,int index,std::vector< std::pair< TfToken,size_t > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usdGeom/nurbsCurves.h"


#include "pxr/usd/usdGeom/nurbsPatch.h"


#include "pxr/usd/usdGeom/mesh.h"

SWIGINTERN void UsdGeomMesh_Triangulate(VtIntArray &faceVertexIndices,VtIntArray &faceVertexCounts){
    VtIntArray newIndices;
    VtIntArray newCounts;
    
    newIndices.reserve(faceVertexIndices.size());
    newCounts.reserve(faceVertexCounts.size());

    int last = 0;
    int next = 1;
    for (int i = 0; i < faceVertexCounts.size(); i++) {
      next = last + 1;
      for (int t = 0; t < faceVertexCounts[i] - 2; t++) {
        newCounts.push_back(3);
        newIndices.push_back(faceVertexIndices[last]);
        newIndices.push_back(faceVertexIndices[next++]);
        newIndices.push_back(faceVertexIndices[next]);
      }
      last += faceVertexCounts[i];
    }

    faceVertexIndices.swap(newIndices);
    faceVertexCounts.swap(newCounts);
  }

#include "pxr/usd/usdGeom/constraintTarget.h"


#include "pxr/usd/usdGeom/xformCache.h"


#include "pxr/usd/usdGeom/bboxCache.h"


#include "pxr/usd/usdGeom/modelAPI.h"

SWIGINTERN std::vector< UsdGeomConstraintTarget > *new_std_vector_Sl_UsdGeomConstraintTarget_Sg___SWIG_2(int capacity){
        std::vector< UsdGeomConstraintTarget >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdGeomConstraintTarget >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdGeomConstraintTarget std_vector_Sl_UsdGeomConstraintTarget_Sg__getitemcopy(std::vector< UsdGeomConstraintTarget > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdGeomConstraintTarget const &std_vector_Sl_UsdGeomConstraintTarget_Sg__getitem(std::vector< UsdGeomConstraintTarget > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__setitem(std::vector< UsdGeomConstraintTarget > *self,int index,UsdGeomConstraintTarget const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__AddRange(std::vector< UsdGeomConstraintTarget > *self,std::vector< UsdGeomConstraintTarget > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdGeomConstraintTarget > *std_vector_Sl_UsdGeomConstraintTarget_Sg__GetRange(std::vector< UsdGeomConstraintTarget > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdGeomConstraintTarget >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__Insert(std::vector< UsdGeomConstraintTarget > *self,int index,UsdGeomConstraintTarget const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__InsertRange(std::vector< UsdGeomConstraintTarget > *self,int index,std::vector< UsdGeomConstraintTarget > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__RemoveAt(std::vector< UsdGeomConstraintTarget > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__RemoveRange(std::vector< UsdGeomConstraintTarget > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdGeomConstraintTarget > *std_vector_Sl_UsdGeomConstraintTarget_Sg__Repeat(UsdGeomConstraintTarget const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdGeomConstraintTarget >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__Reverse__SWIG_0(std::vector< UsdGeomConstraintTarget > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__Reverse__SWIG_1(std::vector< UsdGeomConstraintTarget > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdGeomConstraintTarget_Sg__SetRange(std::vector< UsdGeomConstraintTarget > *self,int index,std::vector< UsdGeomConstraintTarget > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usdShade/utils.h"


#include "pxr/usd/usdShade/nodeGraph.h"


#include "pxr/usd/usdShade/material.h"


#include "pxr/usd/usdShade/shader.h"
#include "pxr/usd/usdShade/connectableAPI.h"

SWIGINTERN std::vector< UsdShadeShader > *new_std_vector_Sl_UsdShadeShader_Sg___SWIG_2(int capacity){
        std::vector< UsdShadeShader >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< UsdShadeShader >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN UsdShadeShader std_vector_Sl_UsdShadeShader_Sg__getitemcopy(std::vector< UsdShadeShader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN UsdShadeShader const &std_vector_Sl_UsdShadeShader_Sg__getitem(std::vector< UsdShadeShader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__setitem(std::vector< UsdShadeShader > *self,int index,UsdShadeShader const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__AddRange(std::vector< UsdShadeShader > *self,std::vector< UsdShadeShader > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< UsdShadeShader > *std_vector_Sl_UsdShadeShader_Sg__GetRange(std::vector< UsdShadeShader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< UsdShadeShader >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__Insert(std::vector< UsdShadeShader > *self,int index,UsdShadeShader const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__InsertRange(std::vector< UsdShadeShader > *self,int index,std::vector< UsdShadeShader > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__RemoveAt(std::vector< UsdShadeShader > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__RemoveRange(std::vector< UsdShadeShader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< UsdShadeShader > *std_vector_Sl_UsdShadeShader_Sg__Repeat(UsdShadeShader const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< UsdShadeShader >(count, value);
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__Reverse__SWIG_0(std::vector< UsdShadeShader > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__Reverse__SWIG_1(std::vector< UsdShadeShader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_UsdShadeShader_Sg__SetRange(std::vector< UsdShadeShader > *self,int index,std::vector< UsdShadeShader > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/usd/usdShade/input.h"


#include "pxr/usd/usdShade/output.h"


#include "pxr/usd/usdShade/connectableAPI.h"


#include "pxr/usd/usdShade/tokens.h"


#include "pxr/usd/usdSkel/animMapper.h"


#include "pxr/usd/usdSkel/animQuery.h"


#include "pxr/usd/usdSkel/blendShape.h"


#include "pxr/usd/usdSkel/cache.h"


#include "pxr/usd/usdSkel/inbetweenShape.h"


#include "pxr/usd/usdSkel/packedJointAnimation.h"


#include "pxr/usd/usdSkel/root.h"


#include "pxr/usd/usdSkel/skeleton.h"


#include "pxr/usd/usdSkel/skeletonQuery.h"


#include "pxr/usd/usdSkel/skinningQuery.h"


#include "pxr/usd/usdSkel/topology.h"


#include "pxr/usd/usdSkel/utils.h"


#include "pxr/usd/usdSkel/binding.h"


#include "pxr/usd/usdSkel/bindingAPI.h"


#include "pxr/usd/usdSkel/tokens.h"


#include "pxr/base/work/loops.h"
#include <functional>
#include "diagnosticHandler.h"


  class TaskCallback {
  public:
    virtual ~TaskCallback() {}
    virtual void Run(size_t start, size_t end) {}
  };

  void TestCall(TaskCallback& cb, int start, int end) {
    cb.Run(start, end);
  }

  typedef std::vector<TaskCallback> TaskCallbackVector;
  void ParallelForN(size_t n, TaskCallback& dispatch) {
    WorkParallelForN(n, [&dispatch](size_t start, size_t end) { dispatch.Run(start, end); });
  }


SWIGINTERN std::vector< TaskCallback > *new_std_vector_Sl_TaskCallback_Sg___SWIG_2(int capacity){
        std::vector< TaskCallback >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< TaskCallback >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN TaskCallback std_vector_Sl_TaskCallback_Sg__getitemcopy(std::vector< TaskCallback > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN TaskCallback const &std_vector_Sl_TaskCallback_Sg__getitem(std::vector< TaskCallback > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__setitem(std::vector< TaskCallback > *self,int index,TaskCallback const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__AddRange(std::vector< TaskCallback > *self,std::vector< TaskCallback > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< TaskCallback > *std_vector_Sl_TaskCallback_Sg__GetRange(std::vector< TaskCallback > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< TaskCallback >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__Insert(std::vector< TaskCallback > *self,int index,TaskCallback const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__InsertRange(std::vector< TaskCallback > *self,int index,std::vector< TaskCallback > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__RemoveAt(std::vector< TaskCallback > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__RemoveRange(std::vector< TaskCallback > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< TaskCallback > *std_vector_Sl_TaskCallback_Sg__Repeat(TaskCallback const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< TaskCallback >(count, value);
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__Reverse__SWIG_0(std::vector< TaskCallback > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__Reverse__SWIG_1(std::vector< TaskCallback > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TaskCallback_Sg__SetRange(std::vector< TaskCallback > *self,int index,std::vector< TaskCallback > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pxr/base/arch/env.h"
#include "pxr/usd/usdGeom/xformable.h"



void SetEnv(std::string name, std::string value) {
  ArchSetEnv(name, value, true);
}

VtValue GetFusedTransform(UsdPrim prim, UsdTimeCode time) {
  VtValue value;
  
  if (!prim) {
    return value;
  }

  UsdGeomXformable xf(prim);
  GfMatrix4d mat;
  bool resetsXfStack = false;
  if (!xf.GetLocalTransformation(&mat, &resetsXfStack, time)) {
    return VtValue();
  }

  return VtValue(mat);
}

VtValue GetFusedDisplayColor(UsdPrim prim, UsdTimeCode time) {
  VtValue value;
  
  if (!prim) {
    return value;
  }

  auto rgbAttr = prim.GetAttribute(UsdGeomTokens->primvarsDisplayColor);
  auto alphaAttr = prim.GetAttribute(UsdGeomTokens->primvarsDisplayOpacity);

  size_t n = 0;
  VtVec3fArray rgb;
  VtFloatArray alpha;
  if (rgbAttr) { rgbAttr.Get(&rgb, time); }
  if (alphaAttr) { alphaAttr.Get(&alpha, time); }

  n = rgb.size() > alpha.size() ? rgb.size() : alpha.size();

  if (n == 0) {
    return value;
  }

  VtVec4fArray fused(n);
  for (size_t i = 0; i < n; i++) {
    if (i < rgb.size()) {
      fused[i][0] = rgb[i][0];
      fused[i][1] = rgb[i][1];
      fused[i][2] = rgb[i][2];
    }
    if (i < alpha.size()) {
      fused[i][3] = alpha[i];
    }
  }

  return VtValue(fused);
}

bool SetFusedDisplayColor(UsdPrim prim, VtVec4fArray values, UsdTimeCode time) {
  if (!prim) { return false; }

  UsdGeomMesh mesh(prim);
  auto rgbPv = mesh.CreateDisplayColorAttr();
  auto alphaPv = mesh.CreateDisplayOpacityAttr();
  
  mesh.GetDisplayColorPrimvar().SetInterpolation(UsdGeomTokens->vertex);
  mesh.GetDisplayOpacityPrimvar().SetInterpolation(UsdGeomTokens->vertex);

  size_t n = values.size();
  VtVec3fArray rgb(n);
  VtFloatArray alpha(n);

  for (size_t i = 0; i < n; i++) {
    rgb[i][0] = values[i][0];
    rgb[i][1] = values[i][1];
    rgb[i][2] = values[i][2];
    alpha[i] = values[i][3];
  }

  return rgbPv.Set(rgb, time) && alphaPv.Set(alpha, time);
}



  #include "../USDIPC/server.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "usdCs_wrap.h"

SwigDirector_DiagnosticHandler::SwigDirector_DiagnosticHandler() : DiagnosticHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_DiagnosticHandler::~SwigDirector_DiagnosticHandler() {
  
}


void SwigDirector_DiagnosticHandler::OnInfo(char const *msg) {
  char * jmsg = 0 ;
  
  if (!swig_callbackOnInfo) {
    DiagnosticHandler::OnInfo(msg);
    return;
  } else {
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackOnInfo(jmsg);
  }
}

void SwigDirector_DiagnosticHandler::OnWarning(char const *msg) {
  char * jmsg = 0 ;
  
  if (!swig_callbackOnWarning) {
    DiagnosticHandler::OnWarning(msg);
    return;
  } else {
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackOnWarning(jmsg);
  }
}

void SwigDirector_DiagnosticHandler::OnError(char const *msg) {
  char * jmsg = 0 ;
  
  if (!swig_callbackOnError) {
    DiagnosticHandler::OnError(msg);
    return;
  } else {
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackOnError(jmsg);
  }
}

void SwigDirector_DiagnosticHandler::OnFatalError(char const *msg) {
  char * jmsg = 0 ;
  
  if (!swig_callbackOnFatalError) {
    DiagnosticHandler::OnFatalError(msg);
    return;
  } else {
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackOnFatalError(jmsg);
  }
}

void SwigDirector_DiagnosticHandler::swig_connect_director(SWIG_Callback0_t callbackOnInfo, SWIG_Callback1_t callbackOnWarning, SWIG_Callback2_t callbackOnError, SWIG_Callback3_t callbackOnFatalError) {
  swig_callbackOnInfo = callbackOnInfo;
  swig_callbackOnWarning = callbackOnWarning;
  swig_callbackOnError = callbackOnError;
  swig_callbackOnFatalError = callbackOnFatalError;
}

void SwigDirector_DiagnosticHandler::swig_init_callbacks() {
  swig_callbackOnInfo = 0;
  swig_callbackOnWarning = 0;
  swig_callbackOnError = 0;
  swig_callbackOnFatalError = 0;
}

SwigDirector_TaskCallback::SwigDirector_TaskCallback() : TaskCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TaskCallback::~SwigDirector_TaskCallback() {
  
}


void SwigDirector_TaskCallback::Run(size_t start, size_t end) {
  unsigned long jstart  ;
  unsigned long jend  ;
  
  if (!swig_callbackRun) {
    TaskCallback::Run(start,end);
    return;
  } else {
    jstart = (unsigned long)start;
    jend = (unsigned long)end;
    swig_callbackRun(jstart, jend);
  }
}

void SwigDirector_TaskCallback::swig_connect_director(SWIG_Callback0_t callbackRun) {
  swig_callbackRun = callbackRun;
}

void SwigDirector_TaskCallback::swig_init_callbacks() {
  swig_callbackRun = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdStringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdStringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdStringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdStringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdStringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_StdStringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_StdStringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdStringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdStringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdStringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdStringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdStringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdStringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdStringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_StdStringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdIntVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdIntVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdIntVector__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdIntVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdIntVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdIntVector_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdIntVector_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdIntVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdIntVector_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdIntVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdIntVector_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdIntVector_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdIntVector_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdIntVector_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_StdIntVector(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_Clear(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_Add(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdFloatVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdFloatVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdFloatVector__SWIG_0() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdFloatVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdFloatVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_StdFloatVector_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_StdFloatVector_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdFloatVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdFloatVector_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdFloatVector_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdFloatVector_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdFloatVector_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdFloatVector_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_StdFloatVector(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_Clear(void * jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< float > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type result;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  result = ((std::vector< std::vector< float > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type result;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  result = ((std::vector< std::vector< float > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (std::vector< std::vector< float > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdFloatVectorVector__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< float > > *result = 0 ;
  
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdFloatVectorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdFloatVectorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< float > > *)new_std_vector_Sl_std_vector_Sl_float_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > result;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *) &std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__setitem(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (std::vector< std::vector< float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_float_Sg__Sg__AddRange(arg1,(std::vector< std::vector< float > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< float > > *)std_vector_Sl_std_vector_Sl_float_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__Insert(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< float > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< float > > *)std_vector_Sl_std_vector_Sl_float_Sg__Sg__Repeat((std::vector< float > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdFloatVectorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< float > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_StdFloatVectorVector(void * jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdDoubleVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdDoubleVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdDoubleVector__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdDoubleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdDoubleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_StdDoubleVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_StdDoubleVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdDoubleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdDoubleVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdDoubleVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdDoubleVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_StdDoubleVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_StdDoubleVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_StdDoubleVector(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_Clear(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< double > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< std::vector< double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdDoubleVectorVector__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< double > > *result = 0 ;
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdDoubleVectorVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_StdDoubleVectorVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< double > > *)new_std_vector_Sl_std_vector_Sl_double_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > result;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__setitem(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (std::vector< std::vector< double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__AddRange(arg1,(std::vector< std::vector< double > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< double > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__Insert(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__Repeat((std::vector< double > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_StdDoubleVectorVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_StdDoubleVectorVector(void * jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_PXR_USE_NAMESPACES_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringPrintf(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  std::string result;
  
  arg1 = (char *)jarg1; 
  result = TfStringPrintf((char const *)arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfSafeString(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  arg1 = (char *)jarg1; 
  result = TfSafeString((char const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfIntToString(int jarg1) {
  char * jresult ;
  int arg1 ;
  std::string result;
  
  arg1 = (int)jarg1; 
  result = TfIntToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_TfStringToDouble__SWIG_0(char * jarg1) {
  double jresult ;
  std::string *arg1 = 0 ;
  double result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (double)TfStringToDouble((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_pxr_TfStringToLong__SWIG_0(char * jarg1, unsigned int * jarg2) {
  long jresult ;
  std::string *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  long result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (bool *)jarg2; 
  result = (long)TfStringToLong((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_pxr_TfStringToLong__SWIG_1(char * jarg1) {
  long jresult ;
  std::string *arg1 = 0 ;
  long result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (long)TfStringToLong((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfStringToULong__SWIG_0(char * jarg1, unsigned int * jarg2) {
  unsigned long jresult ;
  std::string *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned long result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (bool *)jarg2; 
  result = (unsigned long)TfStringToULong((std::string const &)*arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfStringToULong__SWIG_1(char * jarg1) {
  unsigned long jresult ;
  std::string *arg1 = 0 ;
  unsigned long result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (unsigned long)TfStringToULong((std::string const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_TfStringToInt64__SWIG_0(char * jarg1, unsigned int * jarg2) {
  long long jresult ;
  std::string *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (bool *)jarg2; 
  result = (int64_t)TfStringToInt64((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_TfStringToInt64__SWIG_1(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)TfStringToInt64((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pxr_TfStringToUInt64__SWIG_0(char * jarg1, unsigned int * jarg2) {
  unsigned long long jresult ;
  std::string *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  uint64_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (bool *)jarg2; 
  result = (uint64_t)TfStringToUInt64((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pxr_TfStringToUInt64__SWIG_1(char * jarg1) {
  unsigned long long jresult ;
  std::string *arg1 = 0 ;
  uint64_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (uint64_t)TfStringToUInt64((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_Tf_StringStartsWithImpl(char * jarg1, unsigned long jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)Tf_StringStartsWithImpl((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfStringStartsWith__SWIG_0(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = (bool)TfStringStartsWith((std::string const &)*arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfStringStartsWith__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)TfStringStartsWith((std::string const &)*arg1,(TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_Tf_StringEndsWithImpl(char * jarg1, unsigned long jarg2, char * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)Tf_StringEndsWithImpl((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfStringEndsWith__SWIG_0(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = (bool)TfStringEndsWith((std::string const &)*arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfStringEndsWith__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)TfStringEndsWith((std::string const &)*arg1,(TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfStringContains__SWIG_0(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = (bool)TfStringContains((std::string const &)*arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfStringContains__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)TfStringContains((std::string const &)*arg1,(TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringToLower(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringToLower((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringToUpper(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringToUpper((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringCapitalize(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringCapitalize((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringTrimLeft__SWIG_0(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = TfStringTrimLeft((std::string const &)*arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringTrimLeft__SWIG_1(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringTrimLeft((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringTrimRight__SWIG_0(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = TfStringTrimRight((std::string const &)*arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringTrimRight__SWIG_1(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringTrimRight((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringTrim__SWIG_0(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = TfStringTrim((std::string const &)*arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringTrim__SWIG_1(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringTrim((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringGetCommonPrefix(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = TfStringGetCommonPrefix(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringGetSuffix__SWIG_0(char * jarg1, char jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  char arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char)jarg2; 
  result = TfStringGetSuffix((std::string const &)*arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringGetSuffix__SWIG_1(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringGetSuffix((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringGetBeforeSuffix__SWIG_0(char * jarg1, char jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  char arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char)jarg2; 
  result = TfStringGetBeforeSuffix((std::string const &)*arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringGetBeforeSuffix__SWIG_1(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringGetBeforeSuffix((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfGetBaseName(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfGetBaseName((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfGetPathName(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfGetPathName((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringReplace(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = TfStringReplace((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringJoin__SWIG_2(void * jarg1, char * jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg2 = (char *)jarg2; 
  result = TfStringJoin((std::vector< std::string > const &)*arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringJoin__SWIG_3(void * jarg1) {
  char * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = TfStringJoin((std::vector< std::string > const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringJoin__SWIG_4(void * jarg1, char * jarg2) {
  char * jresult ;
  std::set< std::string > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (std::set< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< std::string > const & type is null", 0);
    return 0;
  } 
  arg2 = (char *)jarg2; 
  result = TfStringJoin((std::set< std::string > const &)*arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringJoin__SWIG_5(void * jarg1) {
  char * jresult ;
  std::set< std::string > *arg1 = 0 ;
  std::string result;
  
  arg1 = (std::set< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< std::string > const & type is null", 0);
    return 0;
  } 
  result = TfStringJoin((std::set< std::string > const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfStringSplit(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = TfStringSplit((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfStringTokenize__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = TfStringTokenize((std::string const &)*arg1,(char const *)arg2);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfStringTokenize__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringTokenize((std::string const &)*arg1);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfStringTokenizeToSet__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = TfStringTokenizeToSet((std::string const &)*arg1,(char const *)arg2);
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfStringTokenizeToSet__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringTokenizeToSet((std::string const &)*arg1);
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfQuotedStringTokenize__SWIG_0(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  arg3 = (std::string *)jarg3; 
  result = TfQuotedStringTokenize((std::string const &)*arg1,(char const *)arg2,arg3);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfQuotedStringTokenize__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char *)jarg2; 
  result = TfQuotedStringTokenize((std::string const &)*arg1,(char const *)arg2);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfQuotedStringTokenize__SWIG_2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfQuotedStringTokenize((std::string const &)*arg1);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfMatchedStringTokenize__SWIG_0(char * jarg1, char jarg2, char jarg3, char jarg4, void * jarg5) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char arg2 ;
  char arg3 ;
  char arg4 ;
  std::string *arg5 = (std::string *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (std::string *)jarg5; 
  result = TfMatchedStringTokenize((std::string const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfMatchedStringTokenize__SWIG_1(char * jarg1, char jarg2, char jarg3, char jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char arg2 ;
  char arg3 ;
  char arg4 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = TfMatchedStringTokenize((std::string const &)*arg1,arg2,arg3,arg4);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfMatchedStringTokenize__SWIG_2(char * jarg1, char jarg2, char jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char arg2 ;
  char arg3 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char)jarg2; 
  arg3 = (char)jarg3; 
  result = TfMatchedStringTokenize((std::string const &)*arg1,arg2,arg3);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfMatchedStringTokenize__SWIG_3(char * jarg1, char jarg2, char jarg3, void * jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  char arg2 ;
  char arg3 ;
  std::string *arg4 = (std::string *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (std::string *)jarg4; 
  result = TfMatchedStringTokenize((std::string const &)*arg1,arg2,arg3,arg4);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfDictionaryLessThan() {
  void * jresult ;
  TfDictionaryLessThan *result = 0 ;
  
  result = (TfDictionaryLessThan *)new TfDictionaryLessThan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfDictionaryLessThan(void * jarg1) {
  TfDictionaryLessThan *arg1 = (TfDictionaryLessThan *) 0 ;
  
  arg1 = (TfDictionaryLessThan *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringify__SWIG_1(unsigned int jarg1) {
  char * jresult ;
  bool arg1 ;
  std::string result;
  
  arg1 = jarg1 ? true : false; 
  result = TfStringify(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringify__SWIG_2(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringify((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringify__SWIG_3(float jarg1) {
  char * jresult ;
  float arg1 ;
  std::string result;
  
  arg1 = (float)jarg1; 
  result = TfStringify(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringify__SWIG_4(double jarg1) {
  char * jresult ;
  double arg1 ;
  std::string result;
  
  arg1 = (double)jarg1; 
  result = TfStringify(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfStreamFloat(float jarg1) {
  void * jresult ;
  float arg1 ;
  TfStreamFloat *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (TfStreamFloat *)new TfStreamFloat(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfStreamFloat_value_set(void * jarg1, float jarg2) {
  TfStreamFloat *arg1 = (TfStreamFloat *) 0 ;
  float arg2 ;
  
  arg1 = (TfStreamFloat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_TfStreamFloat_value_get(void * jarg1) {
  float jresult ;
  TfStreamFloat *arg1 = (TfStreamFloat *) 0 ;
  float result;
  
  arg1 = (TfStreamFloat *)jarg1; 
  result = (float) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfStreamFloat(void * jarg1) {
  TfStreamFloat *arg1 = (TfStreamFloat *) 0 ;
  
  arg1 = (TfStreamFloat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfStreamDouble(double jarg1) {
  void * jresult ;
  double arg1 ;
  TfStreamDouble *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (TfStreamDouble *)new TfStreamDouble(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfStreamDouble_value_set(void * jarg1, double jarg2) {
  TfStreamDouble *arg1 = (TfStreamDouble *) 0 ;
  double arg2 ;
  
  arg1 = (TfStreamDouble *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_TfStreamDouble_value_get(void * jarg1) {
  double jresult ;
  TfStreamDouble *arg1 = (TfStreamDouble *) 0 ;
  double result;
  
  arg1 = (TfStreamDouble *)jarg1; 
  result = (double) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfStreamDouble(void * jarg1) {
  TfStreamDouble *arg1 = (TfStreamDouble *) 0 ;
  
  arg1 = (TfStreamDouble *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringGlobToRegex(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfStringGlobToRegex((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfEscapeString(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfEscapeString((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfEscapeStringReplaceChar(void * jarg1, void * jarg2) {
  char **arg1 = (char **) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (char **)jarg1; 
  arg2 = (char **)jarg2; 
  TfEscapeStringReplaceChar((char const **)arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfStringCatPaths(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = TfStringCatPaths((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfIsValidIdentifier(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)TfIsValidIdentifier((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfMakeValidIdentifier(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfMakeValidIdentifier((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfGetXmlEscapedString(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfGetXmlEscapedString((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_Clear(void * jarg1) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_Add(void * jarg1, void * jarg2) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  TfType *arg2 = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (TfType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((TfType const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfTypeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  std::vector< TfType >::size_type result;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  result = ((std::vector< TfType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfTypeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  std::vector< TfType >::size_type result;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  result = ((std::vector< TfType > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  std::vector< TfType >::size_type arg2 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (std::vector< TfType >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTypeVector__SWIG_0() {
  void * jresult ;
  std::vector< TfType > *result = 0 ;
  
  result = (std::vector< TfType > *)new std::vector< TfType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTypeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< TfType > *arg1 = 0 ;
  std::vector< TfType > *result = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfType > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< TfType > *)new std::vector< TfType >((std::vector< TfType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTypeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< TfType > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< TfType > *)new_std_vector_Sl_TfType_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTypeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  TfType result;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_TfType_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new TfType((const TfType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTypeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  TfType *result = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (TfType *) &std_vector_Sl_TfType_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  TfType *arg3 = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TfType *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfType_Sg__setitem(arg1,arg2,(TfType const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  std::vector< TfType > *arg2 = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (std::vector< TfType > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfType > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_TfType_Sg__AddRange(arg1,(std::vector< TfType > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTypeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< TfType > *result = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< TfType > *)std_vector_Sl_TfType_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  TfType *arg3 = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TfType *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfType_Sg__Insert(arg1,arg2,(TfType const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  std::vector< TfType > *arg3 = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TfType > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfType > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfType_Sg__InsertRange(arg1,arg2,(std::vector< TfType > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_TfType_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TfType_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTypeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  TfType *arg1 = 0 ;
  int arg2 ;
  std::vector< TfType > *result = 0 ;
  
  arg1 = (TfType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TfType > *)std_vector_Sl_TfType_Sg__Repeat((TfType const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  std_vector_Sl_TfType_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TfType_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTypeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  int arg2 ;
  std::vector< TfType > *arg3 = 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TfType > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfType > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfType_Sg__SetRange(arg1,arg2,(std::vector< TfType > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfTypeVector(void * jarg1) {
  std::vector< TfType > *arg1 = (std::vector< TfType > *) 0 ;
  
  arg1 = (std::vector< TfType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfType_FactoryBase(void * jarg1) {
  TfType::FactoryBase *arg1 = (TfType::FactoryBase *) 0 ;
  
  arg1 = (TfType::FactoryBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfType_FactoryBase() {
  void * jresult ;
  TfType::FactoryBase *result = 0 ;
  
  result = (TfType::FactoryBase *)new TfType::FactoryBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfType() {
  void * jresult ;
  TfType *result = 0 ;
  
  result = (TfType *)new TfType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetUnknownType() {
  void * jresult ;
  TfType *result = 0 ;
  
  result = (TfType *) &TfType::GetUnknownType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_Find(void * jarg1) {
  void * jresult ;
  std::type_info *arg1 = 0 ;
  TfType *result = 0 ;
  
  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  result = (TfType *) &TfType::Find((std::type_info const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_FindByTypeid(void * jarg1) {
  void * jresult ;
  std::type_info *arg1 = 0 ;
  TfType *result = 0 ;
  
  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  result = (TfType *) &TfType::FindByTypeid((std::type_info const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_FindByName(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfType *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (TfType *) &TfType::FindByName((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_FindDerivedByName(void * jarg1, char * jarg2) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  std::string *arg2 = 0 ;
  TfType *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (TfType *) &((TfType const *)arg1)->FindDerivedByName((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetRoot() {
  void * jresult ;
  TfType *result = 0 ;
  
  result = (TfType *) &TfType::GetRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfType_GetTypeName(void * jarg1) {
  char * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  result = (std::string *) &((TfType const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetTypeid(void * jarg1) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  std::type_info *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  result = (std::type_info *) &((TfType const *)arg1)->GetTypeid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfType_GetCanonicalTypeName(void * jarg1) {
  char * jresult ;
  std::type_info *arg1 = 0 ;
  std::string result;
  
  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  result = TfType::GetCanonicalTypeName((std::type_info const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetAliases(void * jarg1, void * jarg2) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  TfType arg2 ;
  TfType *argp2 ;
  std::vector< std::string > result;
  
  arg1 = (TfType *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((TfType const *)arg1)->GetAliases(arg2);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetBaseTypes(void * jarg1) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  std::vector< TfType > result;
  
  arg1 = (TfType *)jarg1; 
  result = ((TfType const *)arg1)->GetBaseTypes();
  jresult = new std::vector< TfType >((const std::vector< TfType > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetDirectlyDerivedTypes(void * jarg1) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  std::vector< TfType > result;
  
  arg1 = (TfType *)jarg1; 
  result = ((TfType const *)arg1)->GetDirectlyDerivedTypes();
  jresult = new std::vector< TfType >((const std::vector< TfType > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_GetCanonicalType(void * jarg1) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  TfType *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  result = (TfType *) &((TfType const *)arg1)->GetCanonicalType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfType_GetAllDerivedTypes(void * jarg1, void * jarg2) {
  TfType *arg1 = (TfType *) 0 ;
  std::set< TfType > *arg2 = (std::set< TfType > *) 0 ;
  
  arg1 = (TfType *)jarg1; 
  arg2 = (std::set< TfType > *)jarg2; 
  ((TfType const *)arg1)->GetAllDerivedTypes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfType_GetAllAncestorTypes(void * jarg1, void * jarg2) {
  TfType *arg1 = (TfType *) 0 ;
  std::vector< TfType > *arg2 = (std::vector< TfType > *) 0 ;
  
  arg1 = (TfType *)jarg1; 
  arg2 = (std::vector< TfType > *)jarg2; 
  ((TfType const *)arg1)->GetAllAncestorTypes(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfType_IsA(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TfType *arg1 = (TfType *) 0 ;
  TfType arg2 ;
  TfType *argp2 ;
  bool result;
  
  arg1 = (TfType *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((TfType const *)arg1)->IsA(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfType_IsUnknown(void * jarg1) {
  unsigned int jresult ;
  TfType *arg1 = (TfType *) 0 ;
  bool result;
  
  arg1 = (TfType *)jarg1; 
  result = (bool)((TfType const *)arg1)->IsUnknown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfType_IsRoot(void * jarg1) {
  unsigned int jresult ;
  TfType *arg1 = (TfType *) 0 ;
  bool result;
  
  arg1 = (TfType *)jarg1; 
  result = (bool)((TfType const *)arg1)->IsRoot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfType_IsEnumType(void * jarg1) {
  unsigned int jresult ;
  TfType *arg1 = (TfType *) 0 ;
  bool result;
  
  arg1 = (TfType *)jarg1; 
  result = (bool)((TfType const *)arg1)->IsEnumType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfType_IsPlainOldDataType(void * jarg1) {
  unsigned int jresult ;
  TfType *arg1 = (TfType *) 0 ;
  bool result;
  
  arg1 = (TfType *)jarg1; 
  result = (bool)((TfType const *)arg1)->IsPlainOldDataType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfType_GetSizeof(void * jarg1) {
  unsigned long jresult ;
  TfType *arg1 = (TfType *) 0 ;
  size_t result;
  
  arg1 = (TfType *)jarg1; 
  result = ((TfType const *)arg1)->GetSizeof();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_Declare(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfType *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (TfType *) &TfType::Declare((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfType_AddAlias(void * jarg1, void * jarg2, char * jarg3) {
  TfType *arg1 = (TfType *) 0 ;
  TfType arg2 ;
  std::string *arg3 = 0 ;
  TfType *argp2 ;
  
  arg1 = (TfType *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  ((TfType const *)arg1)->AddAlias(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_Alias(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  TfType arg2 ;
  std::string *arg3 = 0 ;
  TfType *argp2 ;
  TfType *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (TfType *) &((TfType const *)arg1)->Alias(arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_CastToAncestor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  TfType arg2 ;
  void *arg3 = (void *) 0 ;
  TfType *argp2 ;
  void *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; 
  result = (void *)((TfType const *)arg1)->CastToAncestor(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfType_CastFromAncestor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  TfType *arg1 = (TfType *) 0 ;
  TfType arg2 ;
  void *arg3 = (void *) 0 ;
  TfType *argp2 ;
  void *result = 0 ;
  
  arg1 = (TfType *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; 
  result = (void *)((TfType const *)arg1)->CastFromAncestor(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfType(void * jarg1) {
  TfType *arg1 = (TfType *) 0 ;
  
  arg1 = (TfType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_Clear(void * jarg1) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_Add(void * jarg1, void * jarg2) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((TfToken const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfTokenVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  std::vector< TfToken >::size_type result;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  result = ((std::vector< TfToken > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfTokenVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  std::vector< TfToken >::size_type result;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  result = ((std::vector< TfToken > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  std::vector< TfToken >::size_type arg2 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (std::vector< TfToken >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTokenVector__SWIG_0() {
  void * jresult ;
  std::vector< TfToken > *result = 0 ;
  
  result = (std::vector< TfToken > *)new std::vector< TfToken >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTokenVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< TfToken > *arg1 = 0 ;
  std::vector< TfToken > *result = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< TfToken > *)new std::vector< TfToken >((std::vector< TfToken > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTokenVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< TfToken > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< TfToken > *)new_std_vector_Sl_TfToken_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTokenVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  TfToken result;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_TfToken_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTokenVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  TfToken *result = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (TfToken *) &std_vector_Sl_TfToken_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  TfToken *arg3 = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfToken_Sg__setitem(arg1,arg2,(TfToken const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  std::vector< TfToken > *arg2 = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (std::vector< TfToken > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_TfToken_Sg__AddRange(arg1,(std::vector< TfToken > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTokenVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< TfToken > *result = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< TfToken > *)std_vector_Sl_TfToken_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  TfToken *arg3 = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfToken_Sg__Insert(arg1,arg2,(TfToken const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  std::vector< TfToken > *arg3 = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TfToken > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfToken_Sg__InsertRange(arg1,arg2,(std::vector< TfToken > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_TfToken_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TfToken_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfTokenVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  TfToken *arg1 = 0 ;
  int arg2 ;
  std::vector< TfToken > *result = 0 ;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TfToken > *)std_vector_Sl_TfToken_Sg__Repeat((TfToken const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  std_vector_Sl_TfToken_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TfToken_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfTokenVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  int arg2 ;
  std::vector< TfToken > *arg3 = 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TfToken > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TfToken_Sg__SetRange(arg1,arg2,(std::vector< TfToken > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfTokenVector(void * jarg1) {
  std::vector< TfToken > *arg1 = (std::vector< TfToken > *) 0 ;
  
  arg1 = (std::vector< TfToken > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfToken__SWIG_0() {
  void * jresult ;
  TfToken *result = 0 ;
  
  result = (TfToken *)new TfToken();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfToken__SWIG_1(void * jarg1) {
  void * jresult ;
  TfToken *arg1 = 0 ;
  TfToken *result = 0 ;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (TfToken *)new TfToken((TfToken const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfToken(void * jarg1) {
  TfToken *arg1 = (TfToken *) 0 ;
  
  arg1 = (TfToken *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfToken__SWIG_3(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfToken *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (TfToken *)new TfToken((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfToken__SWIG_4(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfToken::_ImmortalTag arg2 ;
  TfToken *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (TfToken::_ImmortalTag)jarg2; 
  result = (TfToken *)new TfToken((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfToken_Find(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfToken result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = TfToken::Find((std::string const &)*arg1);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfToken_Hash(void * jarg1) {
  unsigned long jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  size_t result;
  
  arg1 = (TfToken *)jarg1; 
  result = ((TfToken const *)arg1)->Hash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfToken_HashFunctor() {
  void * jresult ;
  TfToken::HashFunctor *result = 0 ;
  
  result = (TfToken::HashFunctor *)new TfToken::HashFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfToken_HashFunctor(void * jarg1) {
  TfToken::HashFunctor *arg1 = (TfToken::HashFunctor *) 0 ;
  
  arg1 = (TfToken::HashFunctor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfToken_LTTokenFunctor() {
  void * jresult ;
  TfToken::LTTokenFunctor *result = 0 ;
  
  result = (TfToken::LTTokenFunctor *)new TfToken::LTTokenFunctor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfToken_LTTokenFunctor(void * jarg1) {
  TfToken::LTTokenFunctor *arg1 = (TfToken::LTTokenFunctor *) 0 ;
  
  arg1 = (TfToken::LTTokenFunctor *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TfToken_size(void * jarg1) {
  unsigned long jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  size_t result;
  
  arg1 = (TfToken *)jarg1; 
  result = ((TfToken const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfToken_GetText(void * jarg1) {
  char * jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  char *result = 0 ;
  
  arg1 = (TfToken *)jarg1; 
  result = (char *)((TfToken const *)arg1)->GetText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfToken_data(void * jarg1) {
  char * jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  char *result = 0 ;
  
  arg1 = (TfToken *)jarg1; 
  result = (char *)((TfToken const *)arg1)->data();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_TfToken_GetString(void * jarg1) {
  char * jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (TfToken *)jarg1; 
  result = (std::string *) &((TfToken const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TfToken_Swap(void * jarg1, void * jarg2) {
  TfToken *arg1 = (TfToken *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (TfToken *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken & type is null", 0);
    return ;
  } 
  (arg1)->Swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfToken_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  bool result;
  
  arg1 = (TfToken *)jarg1; 
  result = (bool)((TfToken const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_0(void * jarg1, void * jarg2) {
  TfToken *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken & type is null", 0);
    return ;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_TfToken_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TfToken *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)TfToken_Equals((TfToken const &)*arg1,(TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_TfToken_GetHashCode(void * jarg1) {
  int jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  int result;
  
  arg1 = (TfToken *)jarg1; 
  result = (int)TfToken_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TfTokenFastArbitraryLessThan() {
  void * jresult ;
  TfTokenFastArbitraryLessThan *result = 0 ;
  
  result = (TfTokenFastArbitraryLessThan *)new TfTokenFastArbitraryLessThan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TfTokenFastArbitraryLessThan(void * jarg1) {
  TfTokenFastArbitraryLessThan *arg1 = (TfTokenFastArbitraryLessThan *) 0 ;
  
  arg1 = (TfTokenFastArbitraryLessThan *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfToTokenVector(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< TfToken > result;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = TfToTokenVector((std::vector< std::string > const &)*arg1);
  jresult = new std::vector< TfToken >((const std::vector< TfToken > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TfToStringVector(void * jarg1) {
  void * jresult ;
  std::vector< TfToken > *arg1 = 0 ;
  std::vector< std::string > result;
  
  arg1 = (std::vector< TfToken > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return 0;
  } 
  result = TfToStringVector((std::vector< TfToken > const &)*arg1);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_0(void * jarg1) {
  unsigned long jresult ;
  TfToken *arg1 = 0 ;
  size_t result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = hash_value((TfToken const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_JS_VALUE_API_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_0() {
  void * jresult ;
  JsValue *result = 0 ;
  
  result = (JsValue *)new JsValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_1(void * jarg1) {
  void * jresult ;
  JsObject *arg1 = 0 ;
  JsValue *result = 0 ;
  
  arg1 = (JsObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsObject const & type is null", 0);
    return 0;
  } 
  result = (JsValue *)new JsValue((JsObject const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_3(void * jarg1) {
  void * jresult ;
  JsArray *arg1 = 0 ;
  JsValue *result = 0 ;
  
  arg1 = (JsArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsArray const & type is null", 0);
    return 0;
  } 
  result = (JsValue *)new JsValue((JsArray const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  JsValue *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (JsValue *)new JsValue((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_7(void * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  JsValue *result = 0 ;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string && type is null", 0);
    return 0;
  } 
  result = (JsValue *)new JsValue((std::string &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_8(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  JsValue *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (JsValue *)new JsValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_9(int jarg1) {
  void * jresult ;
  int arg1 ;
  JsValue *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (JsValue *)new JsValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_10(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  JsValue *result = 0 ;
  
  arg1 = (int64_t)jarg1; 
  result = (JsValue *)new JsValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_11(unsigned long long jarg1) {
  void * jresult ;
  uint64_t arg1 ;
  JsValue *result = 0 ;
  
  arg1 = (uint64_t)jarg1; 
  result = (JsValue *)new JsValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsValue__SWIG_12(double jarg1) {
  void * jresult ;
  double arg1 ;
  JsValue *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (JsValue *)new JsValue(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsValue_GetJsObject(void * jarg1) {
  void * jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  JsObject *result = 0 ;
  
  arg1 = (JsValue *)jarg1; 
  result = (JsObject *) &((JsValue const *)arg1)->GetJsObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsValue_GetJsArray(void * jarg1) {
  void * jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  JsArray *result = 0 ;
  
  arg1 = (JsValue *)jarg1; 
  result = (JsArray *) &((JsValue const *)arg1)->GetJsArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_JsValue_GetString(void * jarg1) {
  char * jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (JsValue *)jarg1; 
  result = (std::string *) &((JsValue const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_GetBool(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->GetBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_JsValue_GetInt(void * jarg1) {
  int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  int result;
  
  arg1 = (JsValue *)jarg1; 
  result = (int)((JsValue const *)arg1)->GetInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_JsValue_GetInt64(void * jarg1) {
  long long jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  int64_t result;
  
  arg1 = (JsValue *)jarg1; 
  result = (int64_t)((JsValue const *)arg1)->GetInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pxr_JsValue_GetUInt64(void * jarg1) {
  unsigned long long jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  uint64_t result;
  
  arg1 = (JsValue *)jarg1; 
  result = (uint64_t)((JsValue const *)arg1)->GetUInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_JsValue_GetReal(void * jarg1) {
  double jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  double result;
  
  arg1 = (JsValue *)jarg1; 
  result = (double)((JsValue const *)arg1)->GetReal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_JsValue_GetType(void * jarg1) {
  int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  JsValue::Type result;
  
  arg1 = (JsValue *)jarg1; 
  result = (JsValue::Type)((JsValue const *)arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_JsValue_GetTypeName(void * jarg1) {
  char * jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  std::string result;
  
  arg1 = (JsValue *)jarg1; 
  result = ((JsValue const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsObject(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsArray(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsArray();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsString(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsString();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsBool(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsInt(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsReal(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsReal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsUInt64(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsUInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsValue_IsNull(void * jarg1) {
  unsigned int jresult ;
  JsValue *arg1 = (JsValue *) 0 ;
  bool result;
  
  arg1 = (JsValue *)jarg1; 
  result = (bool)((JsValue const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_JsValue(void * jarg1) {
  JsValue *arg1 = (JsValue *) 0 ;
  
  arg1 = (JsValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsObject__SWIG_0() {
  void * jresult ;
  std::map< std::string,JsValue > *result = 0 ;
  
  result = (std::map< std::string,JsValue > *)new std::map< std::string,JsValue >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsObject__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,JsValue,std::less< std::string > > *arg1 = 0 ;
  std::map< std::string,JsValue > *result = 0 ;
  
  arg1 = (std::map< std::string,JsValue,std::less< std::string > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,JsValue,std::less< std::string > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,JsValue > *)new std::map< std::string,JsValue >((std::map< std::string,JsValue,std::less< std::string > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_JsObject_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue >::size_type result;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  result = ((std::map< std::string,JsValue > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsObject_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  result = (bool)((std::map< std::string,JsValue > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObject_Clear(void * jarg1) {
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsObject_getitem(void * jarg1, char * jarg2) {
  void * jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue >::key_type *arg2 = 0 ;
  std::map< std::string,JsValue >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,JsValue >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,JsValue >::mapped_type *) &std_map_Sl_std_string_Sc_JsValue_Sg__getitem(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObject_setitem(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue >::key_type *arg2 = 0 ;
  std::map< std::string,JsValue >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,JsValue >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::map< std::string,JsValue >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,JsValue >::mapped_type const & type is null", 0);
    return ;
  } 
  std_map_Sl_std_string_Sc_JsValue_Sg__setitem(arg1,(std::string const &)*arg2,(JsValue const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsObject_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,JsValue >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_JsValue_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObject_Add(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue >::key_type *arg2 = 0 ;
  std::map< std::string,JsValue >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,JsValue >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::map< std::string,JsValue >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,JsValue >::mapped_type const & type is null", 0);
    return ;
  } 
  try {
    std_map_Sl_std_string_Sc_JsValue_Sg__Add(arg1,(std::string const &)*arg2,(JsValue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsObject_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,JsValue >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_JsValue_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsObject_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  result = (std::map< std::string,JsValue,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_JsValue_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_JsObject_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue,std::less< std::string > >::iterator *arg2 = (std::map< std::string,JsValue,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,JsValue >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  arg2 = (std::map< std::string,JsValue,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,JsValue >::key_type *) &std_map_Sl_std_string_Sc_JsValue_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObject_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  std::map< std::string,JsValue,std::less< std::string > >::iterator *arg2 = (std::map< std::string,JsValue,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  arg2 = (std::map< std::string,JsValue,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_JsValue_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_JsObject(void * jarg1) {
  std::map< std::string,JsValue > *arg1 = (std::map< std::string,JsValue > *) 0 ;
  
  arg1 = (std::map< std::string,JsValue > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_Clear(void * jarg1) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_Add(void * jarg1, void * jarg2) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  JsValue *arg2 = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (JsValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsValue const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((JsValue const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_JsObjectVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  std::vector< JsValue >::size_type result;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  result = ((std::vector< JsValue > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_JsObjectVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  std::vector< JsValue >::size_type result;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  result = ((std::vector< JsValue > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  std::vector< JsValue >::size_type arg2 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (std::vector< JsValue >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsObjectVector__SWIG_0() {
  void * jresult ;
  std::vector< JsValue > *result = 0 ;
  
  result = (std::vector< JsValue > *)new std::vector< JsValue >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsObjectVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< JsValue > *arg1 = 0 ;
  std::vector< JsValue > *result = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< JsValue > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< JsValue > *)new std::vector< JsValue >((std::vector< JsValue > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsObjectVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< JsValue > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< JsValue > *)new_std_vector_Sl_JsValue_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsObjectVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  JsValue result;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_JsValue_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new JsValue((const JsValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsObjectVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  JsValue *result = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (JsValue *) &std_vector_Sl_JsValue_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  JsValue *arg3 = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (JsValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsValue const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_JsValue_Sg__setitem(arg1,arg2,(JsValue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  std::vector< JsValue > *arg2 = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (std::vector< JsValue > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< JsValue > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_JsValue_Sg__AddRange(arg1,(std::vector< JsValue > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsObjectVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< JsValue > *result = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< JsValue > *)std_vector_Sl_JsValue_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  JsValue *arg3 = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (JsValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsValue const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_JsValue_Sg__Insert(arg1,arg2,(JsValue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  std::vector< JsValue > *arg3 = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< JsValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< JsValue > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_JsValue_Sg__InsertRange(arg1,arg2,(std::vector< JsValue > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_JsValue_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_JsValue_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsObjectVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  JsValue *arg1 = 0 ;
  int arg2 ;
  std::vector< JsValue > *result = 0 ;
  
  arg1 = (JsValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsValue const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< JsValue > *)std_vector_Sl_JsValue_Sg__Repeat((JsValue const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  std_vector_Sl_JsValue_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_JsValue_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsObjectVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  int arg2 ;
  std::vector< JsValue > *arg3 = 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< JsValue > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< JsValue > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_JsValue_Sg__SetRange(arg1,arg2,(std::vector< JsValue > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_JsObjectVector(void * jarg1) {
  std::vector< JsValue > *arg1 = (std::vector< JsValue > *) 0 ;
  
  arg1 = (std::vector< JsValue > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_JsParseError() {
  void * jresult ;
  JsParseError *result = 0 ;
  
  result = (JsParseError *)new JsParseError();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsParseError_line_set(void * jarg1, unsigned int jarg2) {
  JsParseError *arg1 = (JsParseError *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (JsParseError *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->line = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsParseError_line_get(void * jarg1) {
  unsigned int jresult ;
  JsParseError *arg1 = (JsParseError *) 0 ;
  unsigned int result;
  
  arg1 = (JsParseError *)jarg1; 
  result = (unsigned int) ((arg1)->line);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsParseError_column_set(void * jarg1, unsigned int jarg2) {
  JsParseError *arg1 = (JsParseError *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (JsParseError *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->column = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_JsParseError_column_get(void * jarg1) {
  unsigned int jresult ;
  JsParseError *arg1 = (JsParseError *) 0 ;
  unsigned int result;
  
  arg1 = (JsParseError *)jarg1; 
  result = (unsigned int) ((arg1)->column);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_JsParseError_reason_set(void * jarg1, char * jarg2) {
  JsParseError *arg1 = (JsParseError *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (JsParseError *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_JsParseError_reason_get(void * jarg1) {
  char * jresult ;
  JsParseError *arg1 = (JsParseError *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (JsParseError *)jarg1; 
  result = (std::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_JsParseError(void * jarg1) {
  JsParseError *arg1 = (JsParseError *) 0 ;
  
  arg1 = (JsParseError *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsParseString__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  JsParseError *arg2 = (JsParseError *) 0 ;
  JsValue result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (JsParseError *)jarg2; 
  result = JsParseString((std::string const &)*arg1,arg2);
  jresult = new JsValue((const JsValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_JsParseString__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  JsValue result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = JsParseString((std::string const &)*arg1);
  jresult = new JsValue((const JsValue &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_JsWriteToString(void * jarg1) {
  char * jresult ;
  JsValue *arg1 = 0 ;
  std::string result;
  
  arg1 = (JsValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "JsValue const & type is null", 0);
    return 0;
  } 
  result = JsWriteToString((JsValue const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_PlugPlugin(void * jarg1) {
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  
  arg1 = (PlugPlugin *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_PlugPlugin_Load(void * jarg1) {
  unsigned int jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  bool result;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (bool)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_PlugPlugin_IsLoaded(void * jarg1) {
  unsigned int jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  bool result;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (bool)((PlugPlugin const *)arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_PlugPlugin_IsResource(void * jarg1) {
  unsigned int jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  bool result;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (bool)((PlugPlugin const *)arg1)->IsResource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugPlugin_GetMetadata(void * jarg1) {
  void * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  JsObject result;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (arg1)->GetMetadata();
  jresult = new JsObject((const JsObject &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugPlugin_GetMetadataForType(void * jarg1, void * jarg2) {
  void * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  TfType *arg2 = 0 ;
  JsObject result;
  
  arg1 = (PlugPlugin *)jarg1; 
  arg2 = (TfType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetMetadataForType((TfType const &)*arg2);
  jresult = new JsObject((const JsObject &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugPlugin_GetDependencies(void * jarg1) {
  void * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  JsObject result;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (arg1)->GetDependencies();
  jresult = new JsObject((const JsObject &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_PlugPlugin_DeclaresType__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  TfType *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (PlugPlugin *)jarg1; 
  arg2 = (TfType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((PlugPlugin const *)arg1)->DeclaresType((TfType const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_PlugPlugin_DeclaresType__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  TfType *arg2 = 0 ;
  bool result;
  
  arg1 = (PlugPlugin *)jarg1; 
  arg2 = (TfType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfType const & type is null", 0);
    return 0;
  } 
  result = (bool)((PlugPlugin const *)arg1)->DeclaresType((TfType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugPlugin_GetName(void * jarg1) {
  char * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (std::string *) &((PlugPlugin const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugPlugin_GetPath(void * jarg1) {
  char * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (std::string *) &((PlugPlugin const *)arg1)->GetPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugPlugin_GetResourcePath(void * jarg1) {
  char * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (PlugPlugin *)jarg1; 
  result = (std::string *) &((PlugPlugin const *)arg1)->GetResourcePath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugPlugin_MakeResourcePath(void * jarg1, char * jarg2) {
  char * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (PlugPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((PlugPlugin const *)arg1)->MakeResourcePath((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugPlugin_FindPluginResource__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string result;
  
  arg1 = (PlugPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = ((PlugPlugin const *)arg1)->FindPluginResource((std::string const &)*arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugPlugin_FindPluginResource__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  PlugPlugin *arg1 = (PlugPlugin *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (PlugPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((PlugPlugin const *)arg1)->FindPluginResource((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugFindPluginResource__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  PlugPluginPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string result;
  
  arg1 = (PlugPluginPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PlugPluginPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = PlugFindPluginResource((TfDeclarePtrs< PlugPlugin >::Ptr const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugFindPluginResource__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  PlugPluginPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (PlugPluginPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PlugPluginPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = PlugFindPluginResource((TfDeclarePtrs< PlugPlugin >::Ptr const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetInstance() {
  void * jresult ;
  PlugRegistry *result = 0 ;
  
  result = (PlugRegistry *) &PlugRegistry::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_RegisterPlugins__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< TfDeclarePtrs< PlugPlugin >::PtrVector > result;
  
  arg1 = (PlugRegistry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->RegisterPlugins((std::string const &)*arg2);
  jresult = new PlugPluginPtrVector((const PlugPluginPtrVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_RegisterPlugins__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  SwigValueWrapper< TfDeclarePtrs< PlugPlugin >::PtrVector > result;
  
  arg1 = (PlugRegistry *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (arg1)->RegisterPlugins((std::vector< std::string > const &)*arg2);
  jresult = new PlugPluginPtrVector((const PlugPluginPtrVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_FindTypeByName(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = PlugRegistry::FindTypeByName((std::string const &)*arg1);
  jresult = new TfType((const TfType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_FindDerivedTypeByName(void * jarg1, char * jarg2) {
  void * jresult ;
  TfType arg1 ;
  std::string *arg2 = 0 ;
  TfType *argp1 ;
  TfType result;
  
  argp1 = (TfType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg1 = *argp1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = PlugRegistry::FindDerivedTypeByName(arg1,(std::string const &)*arg2);
  jresult = new TfType((const TfType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetDirectlyDerivedTypes(void * jarg1) {
  void * jresult ;
  TfType arg1 ;
  TfType *argp1 ;
  std::vector< TfType > result;
  
  argp1 = (TfType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = PlugRegistry::GetDirectlyDerivedTypes(arg1);
  jresult = new std::vector< TfType >((const std::vector< TfType > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_PlugRegistry_GetAllDerivedTypes(void * jarg1, void * jarg2) {
  TfType arg1 ;
  std::set< TfType > *arg2 = (std::set< TfType > *) 0 ;
  TfType *argp1 ;
  
  argp1 = (TfType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (std::set< TfType > *)jarg2; 
  PlugRegistry::GetAllDerivedTypes(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetPluginForType(void * jarg1, void * jarg2) {
  void * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  TfType arg2 ;
  TfType *argp2 ;
  SwigValueWrapper< TfDeclarePtrs< PlugPlugin >::Ptr > result;
  
  arg1 = (PlugRegistry *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((PlugRegistry const *)arg1)->GetPluginForType(arg2);
  jresult = new PlugPluginPtr((const PlugPluginPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetAllPlugins(void * jarg1) {
  void * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  SwigValueWrapper< TfDeclarePtrs< PlugPlugin >::PtrVector > result;
  
  arg1 = (PlugRegistry *)jarg1; 
  result = ((PlugRegistry const *)arg1)->GetAllPlugins();
  jresult = new PlugPluginPtrVector((const PlugPluginPtrVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetPluginWithName(void * jarg1, char * jarg2) {
  void * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< TfDeclarePtrs< PlugPlugin >::Ptr > result;
  
  arg1 = (PlugRegistry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((PlugRegistry const *)arg1)->GetPluginWithName((std::string const &)*arg2);
  jresult = new PlugPluginPtr((const PlugPluginPtr &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetStringFromPluginMetaData(void * jarg1, void * jarg2, char * jarg3) {
  char * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  TfType arg2 ;
  std::string *arg3 = 0 ;
  TfType *argp2 ;
  std::string result;
  
  arg1 = (PlugRegistry *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = ((PlugRegistry const *)arg1)->GetStringFromPluginMetaData(arg2,(std::string const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_PlugRegistry_GetDataFromPluginMetaData(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  PlugRegistry *arg1 = (PlugRegistry *) 0 ;
  TfType arg2 ;
  std::string *arg3 = 0 ;
  TfType *argp2 ;
  JsValue result;
  
  arg1 = (PlugRegistry *)jarg1; 
  argp2 = (TfType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfType", 0);
    return 0;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = ((PlugRegistry const *)arg1)->GetDataFromPluginMetaData(arg2,(std::string const &)*arg3);
  jresult = new JsValue((const JsValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfBBox3d__SWIG_0() {
  void * jresult ;
  GfBBox3d *result = 0 ;
  
  result = (GfBBox3d *)new GfBBox3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfBBox3d__SWIG_1(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = 0 ;
  GfBBox3d *result = 0 ;
  
  arg1 = (GfBBox3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  result = (GfBBox3d *)new GfBBox3d((GfBBox3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfBBox3d__SWIG_2(void * jarg1) {
  void * jresult ;
  GfRange3d *arg1 = 0 ;
  GfBBox3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (GfBBox3d *)new GfBBox3d((GfRange3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfBBox3d__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = 0 ;
  GfMatrix4d *arg2 = 0 ;
  GfBBox3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (GfBBox3d *)new GfBBox3d((GfRange3d const &)*arg1,(GfMatrix4d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBBox3d_Set(void * jarg1, void * jarg2, void * jarg3) {
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  GfMatrix4d *arg3 = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfMatrix4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  (arg1)->Set((GfRange3d const &)*arg2,(GfMatrix4d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBBox3d_SetMatrix(void * jarg1, void * jarg2) {
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrix((GfMatrix4d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBBox3d_SetRange(void * jarg1, void * jarg2) {
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetRange((GfRange3d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_GetRange(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (GfRange3d *) &((GfBBox3d const *)arg1)->GetRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_GetBox(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (GfRange3d *) &((GfBBox3d const *)arg1)->GetBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_GetMatrix(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (GfMatrix4d *) &((GfBBox3d const *)arg1)->GetMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_GetInverseMatrix(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (GfMatrix4d *) &((GfBBox3d const *)arg1)->GetInverseMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBBox3d_SetHasZeroAreaPrimitives(void * jarg1, unsigned int jarg2) {
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  bool arg2 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHasZeroAreaPrimitives(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfBBox3d_HasZeroAreaPrimitives(void * jarg1) {
  unsigned int jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  bool result;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (bool)((GfBBox3d const *)arg1)->HasZeroAreaPrimitives();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfBBox3d_GetVolume(void * jarg1) {
  double jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  double result;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (double)((GfBBox3d const *)arg1)->GetVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBBox3d_Transform(void * jarg1, void * jarg2) {
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  (arg1)->Transform((GfMatrix4d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_ComputeAlignedRange(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfRange3d result;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = ((GfBBox3d const *)arg1)->ComputeAlignedRange();
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_ComputeAlignedBox(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfRange3d result;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = ((GfBBox3d const *)arg1)->ComputeAlignedBox();
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_Combine(void * jarg1, void * jarg2) {
  void * jresult ;
  GfBBox3d *arg1 = 0 ;
  GfBBox3d *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (GfBBox3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfBBox3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  result = GfBBox3d::Combine((GfBBox3d const &)*arg1,(GfBBox3d const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfBBox3d_ComputeCentroid(void * jarg1) {
  void * jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  GfVec3d result;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = ((GfBBox3d const *)arg1)->ComputeCentroid();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_1(void * jarg1) {
  unsigned long jresult ;
  GfBBox3d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfBBox3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfBBox3d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfBBox3d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfBBox3d *arg1 = 0 ;
  GfBBox3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfBBox3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfBBox3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfBBox3d_Equals((GfBBox3d const &)*arg1,(GfBBox3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfBBox3d_GetHashCode(void * jarg1) {
  int jresult ;
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  int result;
  
  arg1 = (GfBBox3d *)jarg1; 
  result = (int)GfBBox3d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfBBox3d(void * jarg1) {
  GfBBox3d *arg1 = (GfBBox3d *) 0 ;
  
  arg1 = (GfBBox3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfInterval__SWIG_0() {
  void * jresult ;
  GfInterval *result = 0 ;
  
  result = (GfInterval *)new GfInterval();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfInterval__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfInterval *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfInterval *)new GfInterval(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfInterval__SWIG_2(double jarg1, double jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  bool arg3 ;
  bool arg4 ;
  GfInterval *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (GfInterval *)new GfInterval(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfInterval__SWIG_3(double jarg1, double jarg2, unsigned int jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  bool arg3 ;
  GfInterval *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (GfInterval *)new GfInterval(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfInterval__SWIG_4(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  GfInterval *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfInterval *)new GfInterval(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfInterval_Hash(void * jarg1) {
  unsigned long jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  size_t result;
  
  arg1 = (GfInterval *)jarg1; 
  result = ((GfInterval const *)arg1)->Hash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_2(void * jarg1) {
  unsigned long jresult ;
  GfInterval *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfInterval *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfInterval const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfInterval_GetMin(void * jarg1) {
  double jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  double result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (double)((GfInterval const *)arg1)->GetMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfInterval_GetMax(void * jarg1) {
  double jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  double result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (double)((GfInterval const *)arg1)->GetMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfInterval_SetMin__SWIG_0(void * jarg1, double jarg2) {
  GfInterval *arg1 = (GfInterval *) 0 ;
  double arg2 ;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetMin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfInterval_SetMin__SWIG_1(void * jarg1, double jarg2, unsigned int jarg3) {
  GfInterval *arg1 = (GfInterval *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetMin(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfInterval_SetMax__SWIG_0(void * jarg1, double jarg2) {
  GfInterval *arg1 = (GfInterval *) 0 ;
  double arg2 ;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfInterval_SetMax__SWIG_1(void * jarg1, double jarg2, unsigned int jarg3) {
  GfInterval *arg1 = (GfInterval *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetMax(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsMinClosed(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsMinClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsMaxClosed(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsMaxClosed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsMinOpen(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsMinOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsMaxOpen(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsMaxOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsMaxFinite(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsMaxFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsMinFinite(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsMinFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsFinite(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (bool)((GfInterval const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfInterval_GetSize(void * jarg1) {
  double jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  double result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (double)((GfInterval const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfInterval_Size(void * jarg1) {
  double jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  double result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (double)((GfInterval const *)arg1)->Size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_Contains__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((GfInterval const *)arg1)->Contains(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_In(void * jarg1, double jarg2) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((GfInterval const *)arg1)->In(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  GfInterval *arg2 = 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfInterval const *)arg1)->Contains((GfInterval const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_Intersects(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  GfInterval *arg2 = 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1; 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfInterval const *)arg1)->Intersects((GfInterval const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfInterval_GetFullInterval() {
  void * jresult ;
  GfInterval result;
  
  result = GfInterval::GetFullInterval();
  jresult = new GfInterval((const GfInterval &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfInterval_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfInterval *arg1 = 0 ;
  GfInterval *arg2 = 0 ;
  bool result;
  
  arg1 = (GfInterval *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = (bool)GfInterval_Equals((GfInterval const &)*arg1,(GfInterval const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfInterval_GetHashCode(void * jarg1) {
  int jresult ;
  GfInterval *arg1 = (GfInterval *) 0 ;
  int result;
  
  arg1 = (GfInterval *)jarg1; 
  result = (int)GfInterval_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfInterval(void * jarg1) {
  GfInterval *arg1 = (GfInterval *) 0 ;
  
  arg1 = (GfInterval *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfHalf_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfHalf *arg1 = 0 ;
  GfHalf *arg2 = 0 ;
  bool result;
  
  arg1 = (GfHalf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfHalf const & type is null", 0);
    return 0;
  } 
  arg2 = (GfHalf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfHalf const & type is null", 0);
    return 0;
  } 
  result = (bool)GfHalf_Equals((GfHalf const &)*arg1,(GfHalf const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfHalf_GetHashCode(void * jarg1) {
  int jresult ;
  GfHalf *arg1 = (GfHalf *) 0 ;
  int result;
  
  arg1 = (GfHalf *)jarg1; 
  result = (int)GfHalf_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfHalf() {
  void * jresult ;
  GfHalf *result = 0 ;
  
  result = (GfHalf *)new GfHalf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfHalf(void * jarg1) {
  GfHalf *arg1 = (GfHalf *) 0 ;
  
  arg1 = (GfHalf *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfRange1f_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfRange1f::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1f_SetEmpty(void * jarg1) {
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange1f__SWIG_0() {
  void * jresult ;
  GfRange1f *result = 0 ;
  
  result = (GfRange1f *)new GfRange1f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange1f__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  GfRange1f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfRange1f *)new GfRange1f(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfRange1f_GetMin(void * jarg1) {
  float jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float result;
  
  arg1 = (GfRange1f *)jarg1; 
  result = (float)((GfRange1f const *)arg1)->GetMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfRange1f_GetMax(void * jarg1) {
  float jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float result;
  
  arg1 = (GfRange1f *)jarg1; 
  result = (float)((GfRange1f const *)arg1)->GetMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfRange1f_GetSize(void * jarg1) {
  float jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float result;
  
  arg1 = (GfRange1f *)jarg1; 
  result = (float)((GfRange1f const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfRange1f_GetMidpoint(void * jarg1) {
  float jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float result;
  
  arg1 = (GfRange1f *)jarg1; 
  result = (float)((GfRange1f const *)arg1)->GetMidpoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1f_SetMin(void * jarg1, float jarg2) {
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1f_SetMax(void * jarg1, float jarg2) {
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMax(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1; 
  result = (bool)((GfRange1f const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1f_ExtendBy__SWIG_0(void * jarg1, float jarg2) {
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ExtendBy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1f_ExtendBy__SWIG_1(void * jarg1, void * jarg2) {
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  GfRange1f *arg2 = 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return ;
  } 
  (arg1)->ExtendBy((GfRange1f const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_Contains__SWIG_0(void * jarg1, float jarg2) {
  unsigned int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((GfRange1f const *)arg1)->Contains(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  GfRange1f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange1f const *)arg1)->Contains((GfRange1f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_IsInside__SWIG_0(void * jarg1, float jarg2) {
  unsigned int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((GfRange1f const *)arg1)->IsInside(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_IsInside__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  GfRange1f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange1f const *)arg1)->IsInside((GfRange1f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_IsOutside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  GfRange1f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange1f const *)arg1)->IsOutside((GfRange1f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_GetUnion(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1f *arg1 = 0 ;
  GfRange1f *arg2 = 0 ;
  GfRange1f result;
  
  arg1 = (GfRange1f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = GfRange1f::GetUnion((GfRange1f const &)*arg1,(GfRange1f const &)*arg2);
  jresult = new GfRange1f((const GfRange1f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_UnionWith__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  GfRange1f *arg2 = 0 ;
  GfRange1f *result = 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (GfRange1f *) &(arg1)->UnionWith((GfRange1f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_UnionWith__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  GfRange1f *result = 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfRange1f *) &(arg1)->UnionWith(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_Union__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1f *arg1 = 0 ;
  GfRange1f *arg2 = 0 ;
  GfRange1f result;
  
  arg1 = (GfRange1f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = GfRange1f::Union((GfRange1f const &)*arg1,(GfRange1f const &)*arg2);
  jresult = new GfRange1f((const GfRange1f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_Union__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  GfRange1f *result = 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfRange1f *) &(arg1)->Union(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_GetIntersection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1f *arg1 = 0 ;
  GfRange1f *arg2 = 0 ;
  GfRange1f result;
  
  arg1 = (GfRange1f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = GfRange1f::GetIntersection((GfRange1f const &)*arg1,(GfRange1f const &)*arg2);
  jresult = new GfRange1f((const GfRange1f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_Intersection__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1f *arg1 = 0 ;
  GfRange1f *arg2 = 0 ;
  GfRange1f result;
  
  arg1 = (GfRange1f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = GfRange1f::Intersection((GfRange1f const &)*arg1,(GfRange1f const &)*arg2);
  jresult = new GfRange1f((const GfRange1f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1f_IntersectWith(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  GfRange1f *arg2 = 0 ;
  GfRange1f *result = 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (GfRange1f *) &(arg1)->IntersectWith((GfRange1f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_3(void * jarg1) {
  unsigned long jresult ;
  GfRange1f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfRange1f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfRange1f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange1f_GetDistanceSquared(void * jarg1, float jarg2) {
  double jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  float arg2 ;
  double result;
  
  arg1 = (GfRange1f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (double)((GfRange1f const *)arg1)->GetDistanceSquared(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1f *arg1 = 0 ;
  GfRange1f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfRange1f_Equals((GfRange1f const &)*arg1,(GfRange1f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfRange1f_GetHashCode(void * jarg1) {
  int jresult ;
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  int result;
  
  arg1 = (GfRange1f *)jarg1; 
  result = (int)GfRange1f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfRange1f(void * jarg1) {
  GfRange1f *arg1 = (GfRange1f *) 0 ;
  
  arg1 = (GfRange1f *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfRange1d_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfRange1d::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1d_SetEmpty(void * jarg1) {
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange1d__SWIG_0() {
  void * jresult ;
  GfRange1d *result = 0 ;
  
  result = (GfRange1d *)new GfRange1d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange1d__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  GfRange1d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfRange1d *)new GfRange1d(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange1d_GetMin(void * jarg1) {
  double jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double result;
  
  arg1 = (GfRange1d *)jarg1; 
  result = (double)((GfRange1d const *)arg1)->GetMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange1d_GetMax(void * jarg1) {
  double jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double result;
  
  arg1 = (GfRange1d *)jarg1; 
  result = (double)((GfRange1d const *)arg1)->GetMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange1d_GetSize(void * jarg1) {
  double jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double result;
  
  arg1 = (GfRange1d *)jarg1; 
  result = (double)((GfRange1d const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange1d_GetMidpoint(void * jarg1) {
  double jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double result;
  
  arg1 = (GfRange1d *)jarg1; 
  result = (double)((GfRange1d const *)arg1)->GetMidpoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1d_SetMin(void * jarg1, double jarg2) {
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetMin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1d_SetMax(void * jarg1, double jarg2) {
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetMax(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1; 
  result = (bool)((GfRange1d const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1d_ExtendBy__SWIG_0(void * jarg1, double jarg2) {
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->ExtendBy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange1d_ExtendBy__SWIG_1(void * jarg1, void * jarg2) {
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  GfRange1d *arg2 = 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return ;
  } 
  (arg1)->ExtendBy((GfRange1d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_Contains__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((GfRange1d const *)arg1)->Contains(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  GfRange1d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange1d const *)arg1)->Contains((GfRange1d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_IsInside__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((GfRange1d const *)arg1)->IsInside(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_IsInside__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  GfRange1d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange1d const *)arg1)->IsInside((GfRange1d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_IsOutside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  GfRange1d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange1d const *)arg1)->IsOutside((GfRange1d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_GetUnion(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1d *arg1 = 0 ;
  GfRange1d *arg2 = 0 ;
  GfRange1d result;
  
  arg1 = (GfRange1d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = GfRange1d::GetUnion((GfRange1d const &)*arg1,(GfRange1d const &)*arg2);
  jresult = new GfRange1d((const GfRange1d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_UnionWith__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  GfRange1d *arg2 = 0 ;
  GfRange1d *result = 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = (GfRange1d *) &(arg1)->UnionWith((GfRange1d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_UnionWith__SWIG_1(void * jarg1, double jarg2) {
  void * jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  GfRange1d *result = 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfRange1d *) &(arg1)->UnionWith(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_Union__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1d *arg1 = 0 ;
  GfRange1d *arg2 = 0 ;
  GfRange1d result;
  
  arg1 = (GfRange1d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = GfRange1d::Union((GfRange1d const &)*arg1,(GfRange1d const &)*arg2);
  jresult = new GfRange1d((const GfRange1d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_Union__SWIG_2(void * jarg1, double jarg2) {
  void * jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  GfRange1d *result = 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfRange1d *) &(arg1)->Union(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_GetIntersection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1d *arg1 = 0 ;
  GfRange1d *arg2 = 0 ;
  GfRange1d result;
  
  arg1 = (GfRange1d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = GfRange1d::GetIntersection((GfRange1d const &)*arg1,(GfRange1d const &)*arg2);
  jresult = new GfRange1d((const GfRange1d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_Intersection__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1d *arg1 = 0 ;
  GfRange1d *arg2 = 0 ;
  GfRange1d result;
  
  arg1 = (GfRange1d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = GfRange1d::Intersection((GfRange1d const &)*arg1,(GfRange1d const &)*arg2);
  jresult = new GfRange1d((const GfRange1d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange1d_IntersectWith(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  GfRange1d *arg2 = 0 ;
  GfRange1d *result = 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = (GfRange1d *) &(arg1)->IntersectWith((GfRange1d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_4(void * jarg1) {
  unsigned long jresult ;
  GfRange1d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfRange1d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfRange1d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange1d_GetDistanceSquared(void * jarg1, double jarg2) {
  double jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfRange1d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((GfRange1d const *)arg1)->GetDistanceSquared(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange1d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange1d *arg1 = 0 ;
  GfRange1d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange1d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfRange1d_Equals((GfRange1d const &)*arg1,(GfRange1d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfRange1d_GetHashCode(void * jarg1) {
  int jresult ;
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  int result;
  
  arg1 = (GfRange1d *)jarg1; 
  result = (int)GfRange1d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfRange1d(void * jarg1) {
  GfRange1d *arg1 = (GfRange1d *) 0 ;
  
  arg1 = (GfRange1d *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfRange2d_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfRange2d::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange2d_SetEmpty(void * jarg1) {
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange2d__SWIG_0() {
  void * jresult ;
  GfRange2d *result = 0 ;
  
  result = (GfRange2d *)new GfRange2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange2d__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  GfRange2d *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfRange2d *)new GfRange2d((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetMin(void * jarg1) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  result = (GfVec2d *) &((GfRange2d const *)arg1)->GetMin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetMax(void * jarg1) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  result = (GfVec2d *) &((GfRange2d const *)arg1)->GetMax();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetSize(void * jarg1) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d result;
  
  arg1 = (GfRange2d *)jarg1; 
  result = ((GfRange2d const *)arg1)->GetSize();
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetMidpoint(void * jarg1) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d result;
  
  arg1 = (GfRange2d *)jarg1; 
  result = ((GfRange2d const *)arg1)->GetMidpoint();
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange2d_SetMin(void * jarg1, void * jarg2) {
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return ;
  } 
  (arg1)->SetMin((GfVec2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange2d_SetMax(void * jarg1, void * jarg2) {
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return ;
  } 
  (arg1)->SetMax((GfVec2d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1; 
  result = (bool)((GfRange2d const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange2d_ExtendBy__SWIG_0(void * jarg1, void * jarg2) {
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return ;
  } 
  (arg1)->ExtendBy((GfVec2d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange2d_ExtendBy__SWIG_1(void * jarg1, void * jarg2) {
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfRange2d *arg2 = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return ;
  } 
  (arg1)->ExtendBy((GfRange2d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_Contains__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange2d const *)arg1)->Contains((GfVec2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfRange2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange2d const *)arg1)->Contains((GfRange2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_IsInside__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange2d const *)arg1)->IsInside((GfVec2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_IsInside__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfRange2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange2d const *)arg1)->IsInside((GfRange2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_IsOutside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfRange2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange2d const *)arg1)->IsOutside((GfRange2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetUnion(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange2d result;
  
  arg1 = (GfRange2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = GfRange2d::GetUnion((GfRange2d const &)*arg1,(GfRange2d const &)*arg2);
  jresult = new GfRange2d((const GfRange2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_UnionWith__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange2d *result = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = (GfRange2d *) &(arg1)->UnionWith((GfRange2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_UnionWith__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfRange2d *result = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfRange2d *) &(arg1)->UnionWith((GfVec2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_Union__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange2d result;
  
  arg1 = (GfRange2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = GfRange2d::Union((GfRange2d const &)*arg1,(GfRange2d const &)*arg2);
  jresult = new GfRange2d((const GfRange2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_Union__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfRange2d *result = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfRange2d *) &(arg1)->Union((GfVec2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetIntersection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange2d result;
  
  arg1 = (GfRange2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = GfRange2d::GetIntersection((GfRange2d const &)*arg1,(GfRange2d const &)*arg2);
  jresult = new GfRange2d((const GfRange2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_Intersection__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange2d result;
  
  arg1 = (GfRange2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = GfRange2d::Intersection((GfRange2d const &)*arg1,(GfRange2d const &)*arg2);
  jresult = new GfRange2d((const GfRange2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_IntersectWith(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange2d *result = 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = (GfRange2d *) &(arg1)->IntersectWith((GfRange2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_5(void * jarg1) {
  unsigned long jresult ;
  GfRange2d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfRange2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfRange2d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange2d_GetDistanceSquared(void * jarg1, void * jarg2) {
  double jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  double result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (double)((GfRange2d const *)arg1)->GetDistanceSquared((GfVec2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetCorner(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  size_t arg2 ;
  GfVec2d result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((GfRange2d const *)arg1)->GetCorner(arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_GetQuadrant(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  size_t arg2 ;
  GfRange2d result;
  
  arg1 = (GfRange2d *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((GfRange2d const *)arg1)->GetQuadrant(arg2);
  jresult = new GfRange2d((const GfRange2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange2d_UnitSquare_get() {
  void * jresult ;
  GfRange2d *result = 0 ;
  
  result = (GfRange2d *)&GfRange2d::UnitSquare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange2d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange2d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfRange2d_Equals((GfRange2d const &)*arg1,(GfRange2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfRange2d_GetHashCode(void * jarg1) {
  int jresult ;
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  int result;
  
  arg1 = (GfRange2d *)jarg1; 
  result = (int)GfRange2d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfRange2d(void * jarg1) {
  GfRange2d *arg1 = (GfRange2d *) 0 ;
  
  arg1 = (GfRange2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfRange3d_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfRange3d::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange3d_SetEmpty(void * jarg1) {
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange3d__SWIG_0() {
  void * jresult ;
  GfRange3d *result = 0 ;
  
  result = (GfRange3d *)new GfRange3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRange3d__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfRange3d *)new GfRange3d((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetMin(void * jarg1) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  result = (GfVec3d *) &((GfRange3d const *)arg1)->GetMin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetMax(void * jarg1) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  result = (GfVec3d *) &((GfRange3d const *)arg1)->GetMax();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetSize(void * jarg1) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d result;
  
  arg1 = (GfRange3d *)jarg1; 
  result = ((GfRange3d const *)arg1)->GetSize();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetMidpoint(void * jarg1) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d result;
  
  arg1 = (GfRange3d *)jarg1; 
  result = ((GfRange3d const *)arg1)->GetMidpoint();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange3d_SetMin(void * jarg1, void * jarg2) {
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetMin((GfVec3d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange3d_SetMax(void * jarg1, void * jarg2) {
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetMax((GfVec3d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1; 
  result = (bool)((GfRange3d const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange3d_ExtendBy__SWIG_0(void * jarg1, void * jarg2) {
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->ExtendBy((GfVec3d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRange3d_ExtendBy__SWIG_1(void * jarg1, void * jarg2) {
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return ;
  } 
  (arg1)->ExtendBy((GfRange3d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_Contains__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange3d const *)arg1)->Contains((GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange3d const *)arg1)->Contains((GfRange3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_IsInside__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange3d const *)arg1)->IsInside((GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_IsInside__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange3d const *)arg1)->IsInside((GfRange3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_IsOutside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRange3d const *)arg1)->IsOutside((GfRange3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetUnion(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = 0 ;
  GfRange3d *arg2 = 0 ;
  GfRange3d result;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = GfRange3d::GetUnion((GfRange3d const &)*arg1,(GfRange3d const &)*arg2);
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_UnionWith__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (GfRange3d *) &(arg1)->UnionWith((GfRange3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_UnionWith__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfRange3d *) &(arg1)->UnionWith((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_Union__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = 0 ;
  GfRange3d *arg2 = 0 ;
  GfRange3d result;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = GfRange3d::Union((GfRange3d const &)*arg1,(GfRange3d const &)*arg2);
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_Union__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfRange3d *) &(arg1)->Union((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetIntersection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = 0 ;
  GfRange3d *arg2 = 0 ;
  GfRange3d result;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = GfRange3d::GetIntersection((GfRange3d const &)*arg1,(GfRange3d const &)*arg2);
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_Intersection__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = 0 ;
  GfRange3d *arg2 = 0 ;
  GfRange3d result;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = GfRange3d::Intersection((GfRange3d const &)*arg1,(GfRange3d const &)*arg2);
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_IntersectWith(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfRange3d *arg2 = 0 ;
  GfRange3d *result = 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (GfRange3d *) &(arg1)->IntersectWith((GfRange3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_6(void * jarg1) {
  unsigned long jresult ;
  GfRange3d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfRange3d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRange3d_GetDistanceSquared(void * jarg1, void * jarg2) {
  double jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  double result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (double)((GfRange3d const *)arg1)->GetDistanceSquared((GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetCorner(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  size_t arg2 ;
  GfVec3d result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((GfRange3d const *)arg1)->GetCorner(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_GetOctant(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  size_t arg2 ;
  GfRange3d result;
  
  arg1 = (GfRange3d *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((GfRange3d const *)arg1)->GetOctant(arg2);
  jresult = new GfRange3d((const GfRange3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRange3d_UnitCube_get() {
  void * jresult ;
  GfRange3d *result = 0 ;
  
  result = (GfRange3d *)&GfRange3d::UnitCube;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRange3d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRange3d *arg1 = 0 ;
  GfRange3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRange3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfRange3d_Equals((GfRange3d const &)*arg1,(GfRange3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfRange3d_GetHashCode(void * jarg1) {
  int jresult ;
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  int result;
  
  arg1 = (GfRange3d *)jarg1; 
  result = (int)GfRange3d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfRange3d(void * jarg1) {
  GfRange3d *arg1 = (GfRange3d *) 0 ;
  
  arg1 = (GfRange3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix2f_numRows_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix2f::numRows;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix2f_numColumns_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix2f::numColumns;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_0() {
  void * jresult ;
  GfMatrix2f *result = 0 ;
  
  result = (GfMatrix2f *)new GfMatrix2f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (GfMatrix2f *)new GfMatrix2f(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfMatrix2f *)new GfMatrix2f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfMatrix2f *)new GfMatrix2f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_4(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2f *)new GfMatrix2f((GfVec2f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_5(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2f *)new GfMatrix2f((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_6(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2f *)new GfMatrix2f((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2f__SWIG_7(void * jarg1) {
  void * jresult ;
  GfMatrix2d *arg1 = 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2f *)new GfMatrix2f((GfMatrix2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2f_SetRow(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  int arg2 ;
  GfVec2f *arg3 = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(GfVec2f const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2f_SetColumn(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  int arg2 ;
  GfVec2f *arg3 = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(GfVec2f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetRow(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  int arg2 ;
  GfVec2f result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix2f const *)arg1)->GetRow(arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetColumn(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  int arg2 ;
  GfVec2f result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix2f const *)arg1)->GetColumn(arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (GfMatrix2f *) &(arg1)->Set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_SetIdentity(void * jarg1) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = (GfMatrix2f *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_SetZero(void * jarg1) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = (GfMatrix2f *) &(arg1)->SetZero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_SetDiagonal__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  float arg2 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfMatrix2f *) &(arg1)->SetDiagonal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_SetDiagonal__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  GfVec2f *arg2 = 0 ;
  GfMatrix2f *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2f *) &(arg1)->SetDiagonal((GfVec2f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  float (*arg2)[2] ;
  float *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (float (*)[2])jarg2; 
  result = (float *)((GfMatrix2f const *)arg1)->Get((float (*)[2])arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_7(void * jarg1) {
  unsigned long jresult ;
  GfMatrix2f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfMatrix2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfMatrix2f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetTranspose(void * jarg1) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  GfMatrix2f result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = ((GfMatrix2f const *)arg1)->GetTranspose();
  jresult = new GfMatrix2f((const GfMatrix2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetInverse__SWIG_0(void * jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  GfMatrix2f result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = ((GfMatrix2f const *)arg1)->GetInverse(arg2,arg3);
  jresult = new GfMatrix2f((const GfMatrix2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetInverse__SWIG_1(void * jarg1, double * jarg2) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  double *arg2 = (double *) 0 ;
  GfMatrix2f result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = (double *)jarg2; 
  result = ((GfMatrix2f const *)arg1)->GetInverse(arg2);
  jresult = new GfMatrix2f((const GfMatrix2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetInverse__SWIG_2(void * jarg1) {
  void * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  GfMatrix2f result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = ((GfMatrix2f const *)arg1)->GetInverse();
  jresult = new GfMatrix2f((const GfMatrix2f &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetDeterminant(void * jarg1) {
  double jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  double result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = (double)((GfMatrix2f const *)arg1)->GetDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix2f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfMatrix2f *arg1 = 0 ;
  GfMatrix2f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfMatrix2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfMatrix2f_Equals((GfMatrix2f const &)*arg1,(GfMatrix2f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfMatrix2f_GetHashCode(void * jarg1) {
  int jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  int result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = (int)GfMatrix2f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_GfMatrix2f_ToString(void * jarg1) {
  char * jresult ;
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  std::string result;
  
  arg1 = (GfMatrix2f *)jarg1; 
  result = GfMatrix2f_ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2f_CopyToArray(void * jarg1, float* jarg2) {
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = jarg2;
  GfMatrix2f_CopyToArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2f_CopyFromArray(void * jarg1, float* jarg2) {
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  arg2 = jarg2;
  GfMatrix2f_CopyFromArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfMatrix2f(void * jarg1) {
  GfMatrix2f *arg1 = (GfMatrix2f *) 0 ;
  
  arg1 = (GfMatrix2f *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfMatrix2f *arg1 = 0 ;
  GfMatrix2f *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfMatrix2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2f const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfMatrix2f const &)*arg1,(GfMatrix2f const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix3f_numRows_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix3f::numRows;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix3f_numColumns_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix3f::numColumns;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_0() {
  void * jresult ;
  GfMatrix3f *result = 0 ;
  
  result = (GfMatrix3f *)new GfMatrix3f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (GfMatrix3f *)new GfMatrix3f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfMatrix3f *)new GfMatrix3f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfMatrix3f *)new GfMatrix3f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_4(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *)new GfMatrix3f((GfVec3f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_5(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *)new GfMatrix3f((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_6(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *)new GfMatrix3f((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_7(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfRotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *)new GfMatrix3f((GfRotation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_8(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfQuatf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *)new GfMatrix3f((GfQuatf const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3f__SWIG_9(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *)new GfMatrix3f((GfMatrix3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetRow(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  int arg2 ;
  GfVec3f *arg3 = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(GfVec3f const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetColumn(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  int arg2 ;
  GfVec3f *arg3 = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(GfVec3f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetRow(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  int arg2 ;
  GfVec3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix3f const *)arg1)->GetRow(arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetColumn(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  int arg2 ;
  GfVec3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix3f const *)arg1)->GetColumn(arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  result = (GfMatrix3f *) &(arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetIdentity(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (GfMatrix3f *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetZero(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (GfMatrix3f *) &(arg1)->SetZero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetDiagonal__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  float arg2 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfMatrix3f *) &(arg1)->SetDiagonal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetDiagonal__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *) &(arg1)->SetDiagonal((GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  float (*arg2)[3] ;
  float *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (float (*)[3])jarg2; 
  result = (float *)((GfMatrix3f const *)arg1)->Get((float (*)[3])arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_8(void * jarg1) {
  unsigned long jresult ;
  GfMatrix3f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfMatrix3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfMatrix3f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetTranspose(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = ((GfMatrix3f const *)arg1)->GetTranspose();
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetInverse__SWIG_0(void * jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = ((GfMatrix3f const *)arg1)->GetInverse(arg2,arg3);
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetInverse__SWIG_1(void * jarg1, double * jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  double *arg2 = (double *) 0 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (double *)jarg2; 
  result = ((GfMatrix3f const *)arg1)->GetInverse(arg2);
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetInverse__SWIG_2(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = ((GfMatrix3f const *)arg1)->GetInverse();
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetDeterminant(void * jarg1) {
  double jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  double result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (double)((GfMatrix3f const *)arg1)->GetDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3f_Orthonormalize__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Orthonormalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3f_Orthonormalize__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (bool)(arg1)->Orthonormalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetOrthonormalized__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  bool arg2 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((GfMatrix3f const *)arg1)->GetOrthonormalized(arg2);
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetOrthonormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = ((GfMatrix3f const *)arg1)->GetOrthonormalized();
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetHandedness(void * jarg1) {
  double jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  double result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (double)((GfMatrix3f const *)arg1)->GetHandedness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3f_IsRightHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (bool)((GfMatrix3f const *)arg1)->IsRightHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3f_IsLeftHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (bool)((GfMatrix3f const *)arg1)->IsLeftHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetScale__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  float arg2 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfMatrix3f *) &(arg1)->SetScale(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetRotate__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfQuatf *arg2 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *) &(arg1)->SetRotate((GfQuatf const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetRotate__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfRotation *arg2 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *) &(arg1)->SetRotate((GfRotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_SetScale__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfMatrix3f *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3f *) &(arg1)->SetScale((GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_ExtractRotation(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfRotation result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = ((GfMatrix3f const *)arg1)->ExtractRotation();
  jresult = new GfRotation((const GfRotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_DecomposeRotation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f *arg3 = 0 ;
  GfVec3f *arg4 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3f *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix3f const *)arg1)->DecomposeRotation((GfVec3f const &)*arg2,(GfVec3f const &)*arg3,(GfVec3f const &)*arg4);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3f_ExtractRotationQuaternion(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  GfQuaternion result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = ((GfMatrix3f const *)arg1)->ExtractRotationQuaternion();
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfMatrix3f *arg1 = 0 ;
  GfMatrix3f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfMatrix3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfMatrix3f_Equals((GfMatrix3f const &)*arg1,(GfMatrix3f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfMatrix3f_GetHashCode(void * jarg1) {
  int jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  int result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = (int)GfMatrix3f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_GfMatrix3f_ToString(void * jarg1) {
  char * jresult ;
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  std::string result;
  
  arg1 = (GfMatrix3f *)jarg1; 
  result = GfMatrix3f_ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3f_CopyToArray(void * jarg1, float* jarg2) {
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = jarg2;
  GfMatrix3f_CopyToArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3f_CopyFromArray(void * jarg1, float* jarg2) {
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  arg2 = jarg2;
  GfMatrix3f_CopyFromArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfMatrix3f(void * jarg1) {
  GfMatrix3f *arg1 = (GfMatrix3f *) 0 ;
  
  arg1 = (GfMatrix3f *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfMatrix3f *arg1 = 0 ;
  GfMatrix3f *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfMatrix3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfMatrix3f const &)*arg1,(GfMatrix3f const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix4f_numRows_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix4f::numRows;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix4f_numColumns_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix4f::numColumns;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_0() {
  void * jresult ;
  GfMatrix4f *result = 0 ;
  
  result = (GfMatrix4f *)new GfMatrix4f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (GfMatrix4f *)new GfMatrix4f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfMatrix4f *)new GfMatrix4f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_3(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((GfVec4f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_4(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_5(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< double > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< float > *arg4 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((std::vector< float > const &)*arg1,(std::vector< float > const &)*arg2,(std::vector< float > const &)*arg3,(std::vector< float > const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRotation *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfRotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((GfRotation const &)*arg1,(GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4f__SWIG_9(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *)new GfMatrix4f((GfMatrix4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRow(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int arg2 ;
  GfVec4f *arg3 = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(GfVec4f const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetColumn(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int arg2 ;
  GfVec4f *arg3 = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(GfVec4f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetRow(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int arg2 ;
  GfVec4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix4f const *)arg1)->GetRow(arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetColumn(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int arg2 ;
  GfVec4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix4f const *)arg1)->GetColumn(arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16, float jarg17) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  arg17 = (float)jarg17; 
  result = (GfMatrix4f *) &(arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetIdentity(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (GfMatrix4f *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetZero(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (GfMatrix4f *) &(arg1)->SetZero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetDiagonal__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  float arg2 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfMatrix4f *) &(arg1)->SetDiagonal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetDiagonal__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec4f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetDiagonal((GfVec4f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  float (*arg2)[4] ;
  float *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (float (*)[4])jarg2; 
  result = (float *)((GfMatrix4f const *)arg1)->Get((float (*)[4])arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_9(void * jarg1) {
  unsigned long jresult ;
  GfMatrix4f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfMatrix4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfMatrix4f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetTranspose(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = ((GfMatrix4f const *)arg1)->GetTranspose();
  jresult = new GfMatrix4f((const GfMatrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetInverse__SWIG_0(void * jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  GfMatrix4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = ((GfMatrix4f const *)arg1)->GetInverse(arg2,arg3);
  jresult = new GfMatrix4f((const GfMatrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetInverse__SWIG_1(void * jarg1, double * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  double *arg2 = (double *) 0 ;
  GfMatrix4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (double *)jarg2; 
  result = ((GfMatrix4f const *)arg1)->GetInverse(arg2);
  jresult = new GfMatrix4f((const GfMatrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetInverse__SWIG_2(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = ((GfMatrix4f const *)arg1)->GetInverse();
  jresult = new GfMatrix4f((const GfMatrix4f &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetDeterminant(void * jarg1) {
  double jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  double result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (double)((GfMatrix4f const *)arg1)->GetDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRow3(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int arg2 ;
  GfVec3f *arg3 = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow3(arg2,(GfVec3f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetRow3(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int arg2 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix4f const *)arg1)->GetRow3(arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetDeterminant3(void * jarg1) {
  double jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  double result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (double)((GfMatrix4f const *)arg1)->GetDeterminant3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_HasOrthogonalRows3(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (bool)((GfMatrix4f const *)arg1)->HasOrthogonalRows3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_Orthonormalize__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Orthonormalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_Orthonormalize__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (bool)(arg1)->Orthonormalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetOrthonormalized__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  bool arg2 ;
  GfMatrix4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((GfMatrix4f const *)arg1)->GetOrthonormalized(arg2);
  jresult = new GfMatrix4f((const GfMatrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetOrthonormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = ((GfMatrix4f const *)arg1)->GetOrthonormalized();
  jresult = new GfMatrix4f((const GfMatrix4f &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetHandedness(void * jarg1) {
  double jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  double result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (double)((GfMatrix4f const *)arg1)->GetHandedness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_IsRightHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (bool)((GfMatrix4f const *)arg1)->IsRightHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_IsLeftHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (bool)((GfMatrix4f const *)arg1)->IsLeftHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetScale__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  float arg2 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfMatrix4f *) &(arg1)->SetScale(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRotate__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfQuatf *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetRotate((GfQuatf const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRotateOnly__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfQuatf *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetRotateOnly((GfQuatf const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRotate__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfRotation *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetRotate((GfRotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRotateOnly__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfRotation *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetRotateOnly((GfRotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRotate__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix3f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfMatrix3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetRotate((GfMatrix3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetRotateOnly__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix3f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfMatrix3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetRotateOnly((GfMatrix3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetScale__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetScale((GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetTranslate(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetTranslate((GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetTranslateOnly(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetTranslateOnly((GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfRotation *arg2 = 0 ;
  GfVec3f *arg3 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetTransform((GfRotation const &)*arg2,(GfVec3f const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix3f *arg2 = 0 ;
  GfVec3f *arg3 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfMatrix3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetTransform((GfMatrix3f const &)*arg2,(GfVec3f const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetLookAt__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f *arg3 = 0 ;
  GfVec3f *arg4 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3f *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetLookAt((GfVec3f const &)*arg2,(GfVec3f const &)*arg3,(GfVec3f const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_SetLookAt__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfRotation *arg3 = 0 ;
  GfMatrix4f *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfRotation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4f *) &(arg1)->SetLookAt((GfVec3f const &)*arg2,(GfRotation const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_Factor__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f *arg2 = (GfMatrix4f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  GfMatrix4f *arg4 = (GfMatrix4f *) 0 ;
  GfVec3f *arg5 = (GfVec3f *) 0 ;
  GfMatrix4f *arg6 = (GfMatrix4f *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfMatrix4f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = (GfMatrix4f *)jarg4; 
  arg5 = (GfVec3f *)jarg5; 
  arg6 = (GfMatrix4f *)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)((GfMatrix4f const *)arg1)->Factor(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_Factor__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix4f *arg2 = (GfMatrix4f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  GfMatrix4f *arg4 = (GfMatrix4f *) 0 ;
  GfVec3f *arg5 = (GfVec3f *) 0 ;
  GfMatrix4f *arg6 = (GfMatrix4f *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfMatrix4f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = (GfMatrix4f *)jarg4; 
  arg5 = (GfVec3f *)jarg5; 
  arg6 = (GfMatrix4f *)jarg6; 
  result = (bool)((GfMatrix4f const *)arg1)->Factor(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_ExtractTranslation(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = ((GfMatrix4f const *)arg1)->ExtractTranslation();
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_ExtractRotation(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfRotation result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = ((GfMatrix4f const *)arg1)->ExtractRotation();
  jresult = new GfRotation((const GfRotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_DecomposeRotation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f *arg3 = 0 ;
  GfVec3f *arg4 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3f *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->DecomposeRotation((GfVec3f const &)*arg2,(GfVec3f const &)*arg3,(GfVec3f const &)*arg4);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_ExtractRotationMatrix(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfMatrix3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = ((GfMatrix4f const *)arg1)->ExtractRotationMatrix();
  jresult = new GfMatrix3f((const GfMatrix3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_Transform__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->Transform((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_Transform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->Transform((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_TransformDir__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->TransformDir((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_TransformDir__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->TransformDir((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_TransformAffine__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->TransformAffine((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4f_TransformAffine__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4f const *)arg1)->TransformAffine((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = 0 ;
  GfMatrix4f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfMatrix4f_Equals((GfMatrix4f const &)*arg1,(GfMatrix4f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfMatrix4f_GetHashCode(void * jarg1) {
  int jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  int result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = (int)GfMatrix4f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_GfMatrix4f_ToString(void * jarg1) {
  char * jresult ;
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  std::string result;
  
  arg1 = (GfMatrix4f *)jarg1; 
  result = GfMatrix4f_ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4f_CopyToArray(void * jarg1, float* jarg2) {
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = jarg2;
  GfMatrix4f_CopyToArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4f_CopyFromArray(void * jarg1, float* jarg2) {
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  arg2 = jarg2;
  GfMatrix4f_CopyFromArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfMatrix4f(void * jarg1) {
  GfMatrix4f *arg1 = (GfMatrix4f *) 0 ;
  
  arg1 = (GfMatrix4f *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_2(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfMatrix4f *arg1 = 0 ;
  GfMatrix4f *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfMatrix4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4f const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfMatrix4f const &)*arg1,(GfMatrix4f const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix2d_numRows_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix2d::numRows;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix2d_numColumns_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix2d::numColumns;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_0() {
  void * jresult ;
  GfMatrix2d *result = 0 ;
  
  result = (GfMatrix2d *)new GfMatrix2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (GfMatrix2d *)new GfMatrix2d(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfMatrix2d *)new GfMatrix2d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfMatrix2d *)new GfMatrix2d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_4(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2d *)new GfMatrix2d((GfVec2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_5(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2d *)new GfMatrix2d((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_6(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2d *)new GfMatrix2d((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix2d__SWIG_7(void * jarg1) {
  void * jresult ;
  GfMatrix2f *arg1 = 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfMatrix2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2d *)new GfMatrix2d((GfMatrix2f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2d_SetRow(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  int arg2 ;
  GfVec2d *arg3 = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(GfVec2d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2d_SetColumn(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  int arg2 ;
  GfVec2d *arg3 = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(GfVec2d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetRow(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  int arg2 ;
  GfVec2d result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix2d const *)arg1)->GetRow(arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetColumn(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  int arg2 ;
  GfVec2d result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix2d const *)arg1)->GetColumn(arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_Set(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (GfMatrix2d *) &(arg1)->Set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_SetIdentity(void * jarg1) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = (GfMatrix2d *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_SetZero(void * jarg1) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = (GfMatrix2d *) &(arg1)->SetZero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_SetDiagonal__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double arg2 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfMatrix2d *) &(arg1)->SetDiagonal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_SetDiagonal__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix2d *) &(arg1)->SetDiagonal((GfVec2d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double (*arg2)[2] ;
  double *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (double (*)[2])jarg2; 
  result = (double *)((GfMatrix2d const *)arg1)->Get((double (*)[2])arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_10(void * jarg1) {
  unsigned long jresult ;
  GfMatrix2d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfMatrix2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfMatrix2d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetTranspose(void * jarg1) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  GfMatrix2d result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = ((GfMatrix2d const *)arg1)->GetTranspose();
  jresult = new GfMatrix2d((const GfMatrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetInverse__SWIG_0(void * jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  GfMatrix2d result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = ((GfMatrix2d const *)arg1)->GetInverse(arg2,arg3);
  jresult = new GfMatrix2d((const GfMatrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetInverse__SWIG_1(void * jarg1, double * jarg2) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double *arg2 = (double *) 0 ;
  GfMatrix2d result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = (double *)jarg2; 
  result = ((GfMatrix2d const *)arg1)->GetInverse(arg2);
  jresult = new GfMatrix2d((const GfMatrix2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetInverse__SWIG_2(void * jarg1) {
  void * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  GfMatrix2d result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = ((GfMatrix2d const *)arg1)->GetInverse();
  jresult = new GfMatrix2d((const GfMatrix2d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetDeterminant(void * jarg1) {
  double jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = (double)((GfMatrix2d const *)arg1)->GetDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix2d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfMatrix2d *arg1 = 0 ;
  GfMatrix2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfMatrix2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfMatrix2d_Equals((GfMatrix2d const &)*arg1,(GfMatrix2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfMatrix2d_GetHashCode(void * jarg1) {
  int jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  int result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = (int)GfMatrix2d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_GfMatrix2d_ToString(void * jarg1) {
  char * jresult ;
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  std::string result;
  
  arg1 = (GfMatrix2d *)jarg1; 
  result = GfMatrix2d_ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2d_CopyToArray(void * jarg1, double* jarg2) {
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = jarg2;
  GfMatrix2d_CopyToArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix2d_CopyFromArray(void * jarg1, double* jarg2) {
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  arg2 = jarg2;
  GfMatrix2d_CopyFromArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfMatrix2d(void * jarg1) {
  GfMatrix2d *arg1 = (GfMatrix2d *) 0 ;
  
  arg1 = (GfMatrix2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_3(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfMatrix2d *arg1 = 0 ;
  GfMatrix2d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfMatrix2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfMatrix2d const &)*arg1,(GfMatrix2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix3d_numRows_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix3d::numRows;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix3d_numColumns_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix3d::numColumns;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_0() {
  void * jresult ;
  GfMatrix3d *result = 0 ;
  
  result = (GfMatrix3d *)new GfMatrix3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  result = (GfMatrix3d *)new GfMatrix3d(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfMatrix3d *)new GfMatrix3d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_3(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfMatrix3d *)new GfMatrix3d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_4(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *)new GfMatrix3d((GfVec3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_5(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *)new GfMatrix3d((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_6(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *)new GfMatrix3d((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_7(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfRotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *)new GfMatrix3d((GfRotation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_8(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *)new GfMatrix3d((GfQuatd const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix3d__SWIG_9(void * jarg1) {
  void * jresult ;
  GfMatrix3f *arg1 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *)new GfMatrix3d((GfMatrix3f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetRow(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  int arg2 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetColumn(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  int arg2 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetRow(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  int arg2 ;
  GfVec3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix3d const *)arg1)->GetRow(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetColumn(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  int arg2 ;
  GfVec3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix3d const *)arg1)->GetColumn(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_Set(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  result = (GfMatrix3d *) &(arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetIdentity(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (GfMatrix3d *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetZero(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (GfMatrix3d *) &(arg1)->SetZero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetDiagonal__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double arg2 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfMatrix3d *) &(arg1)->SetDiagonal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetDiagonal__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *) &(arg1)->SetDiagonal((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double (*arg2)[3] ;
  double *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (double (*)[3])jarg2; 
  result = (double *)((GfMatrix3d const *)arg1)->Get((double (*)[3])arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_11(void * jarg1) {
  unsigned long jresult ;
  GfMatrix3d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfMatrix3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfMatrix3d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetTranspose(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = ((GfMatrix3d const *)arg1)->GetTranspose();
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetInverse__SWIG_0(void * jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = ((GfMatrix3d const *)arg1)->GetInverse(arg2,arg3);
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetInverse__SWIG_1(void * jarg1, double * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double *arg2 = (double *) 0 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (double *)jarg2; 
  result = ((GfMatrix3d const *)arg1)->GetInverse(arg2);
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetInverse__SWIG_2(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = ((GfMatrix3d const *)arg1)->GetInverse();
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetDeterminant(void * jarg1) {
  double jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (double)((GfMatrix3d const *)arg1)->GetDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3d_Orthonormalize__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Orthonormalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3d_Orthonormalize__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (bool)(arg1)->Orthonormalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetOrthonormalized__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  bool arg2 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((GfMatrix3d const *)arg1)->GetOrthonormalized(arg2);
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetOrthonormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = ((GfMatrix3d const *)arg1)->GetOrthonormalized();
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetHandedness(void * jarg1) {
  double jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (double)((GfMatrix3d const *)arg1)->GetHandedness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3d_IsRightHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (bool)((GfMatrix3d const *)arg1)->IsRightHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3d_IsLeftHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (bool)((GfMatrix3d const *)arg1)->IsLeftHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetScale__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double arg2 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfMatrix3d *) &(arg1)->SetScale(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetRotate__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfQuatd *arg2 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *) &(arg1)->SetRotate((GfQuatd const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetRotate__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfRotation *arg2 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *) &(arg1)->SetRotate((GfRotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_SetScale__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix3d *) &(arg1)->SetScale((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_ExtractRotation(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfRotation result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = ((GfMatrix3d const *)arg1)->ExtractRotation();
  jresult = new GfRotation((const GfRotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_DecomposeRotation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix3d const *)arg1)->DecomposeRotation((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix3d_ExtractRotationQuaternion(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  GfQuaternion result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = ((GfMatrix3d const *)arg1)->ExtractRotationQuaternion();
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix3d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfMatrix3d *arg1 = 0 ;
  GfMatrix3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfMatrix3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfMatrix3d_Equals((GfMatrix3d const &)*arg1,(GfMatrix3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfMatrix3d_GetHashCode(void * jarg1) {
  int jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  int result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = (int)GfMatrix3d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_GfMatrix3d_ToString(void * jarg1) {
  char * jresult ;
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  std::string result;
  
  arg1 = (GfMatrix3d *)jarg1; 
  result = GfMatrix3d_ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3d_CopyToArray(void * jarg1, double* jarg2) {
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = jarg2;
  GfMatrix3d_CopyToArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix3d_CopyFromArray(void * jarg1, double* jarg2) {
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  arg2 = jarg2;
  GfMatrix3d_CopyFromArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfMatrix3d(void * jarg1) {
  GfMatrix3d *arg1 = (GfMatrix3d *) 0 ;
  
  arg1 = (GfMatrix3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_4(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfMatrix3d *arg1 = 0 ;
  GfMatrix3d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfMatrix3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfMatrix3d const &)*arg1,(GfMatrix3d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix4d_numRows_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix4d::numRows;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfMatrix4d_numColumns_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfMatrix4d::numColumns;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_0() {
  void * jresult ;
  GfMatrix4d *result = 0 ;
  
  result = (GfMatrix4d *)new GfMatrix4d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14, double jarg15, double jarg16) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  result = (GfMatrix4d *)new GfMatrix4d(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfMatrix4d *)new GfMatrix4d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_3(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((GfVec4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_4(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< double > > *arg1 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (std::vector< std::vector< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< double > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((std::vector< std::vector< double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_5(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< double > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3,(std::vector< double > const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< float > *arg4 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((std::vector< float > const &)*arg1,(std::vector< float > const &)*arg2,(std::vector< float > const &)*arg3,(std::vector< float > const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRotation *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfRotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((GfRotation const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((GfMatrix3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfMatrix4d__SWIG_10(void * jarg1) {
  void * jresult ;
  GfMatrix4f *arg1 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4f const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *)new GfMatrix4d((GfMatrix4f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRow(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int arg2 ;
  GfVec4d *arg3 = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(GfVec4d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetColumn(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int arg2 ;
  GfVec4d *arg3 = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(GfVec4d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetRow(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int arg2 ;
  GfVec4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix4d const *)arg1)->GetRow(arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetColumn(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int arg2 ;
  GfVec4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix4d const *)arg1)->GetColumn(arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_Set(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14, double jarg15, double jarg16, double jarg17) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  arg16 = (double)jarg16; 
  arg17 = (double)jarg17; 
  result = (GfMatrix4d *) &(arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetIdentity(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (GfMatrix4d *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetZero(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (GfMatrix4d *) &(arg1)->SetZero();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetDiagonal__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double arg2 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfMatrix4d *) &(arg1)->SetDiagonal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetDiagonal__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec4d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetDiagonal((GfVec4d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double (*arg2)[4] ;
  double *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (double (*)[4])jarg2; 
  result = (double *)((GfMatrix4d const *)arg1)->Get((double (*)[4])arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_12(void * jarg1) {
  unsigned long jresult ;
  GfMatrix4d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfMatrix4d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetTranspose(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->GetTranspose();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetInverse__SWIG_0(void * jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = ((GfMatrix4d const *)arg1)->GetInverse(arg2,arg3);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetInverse__SWIG_1(void * jarg1, double * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double *arg2 = (double *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (double *)jarg2; 
  result = ((GfMatrix4d const *)arg1)->GetInverse(arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetInverse__SWIG_2(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->GetInverse();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetDeterminant(void * jarg1) {
  double jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (double)((GfMatrix4d const *)arg1)->GetDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRow3(void * jarg1, int jarg2, void * jarg3) {
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int arg2 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow3(arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetRow3(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int arg2 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((GfMatrix4d const *)arg1)->GetRow3(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetDeterminant3(void * jarg1) {
  double jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (double)((GfMatrix4d const *)arg1)->GetDeterminant3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_HasOrthogonalRows3(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (bool)((GfMatrix4d const *)arg1)->HasOrthogonalRows3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_Orthonormalize__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Orthonormalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_Orthonormalize__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (bool)(arg1)->Orthonormalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetOrthonormalized__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  bool arg2 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((GfMatrix4d const *)arg1)->GetOrthonormalized(arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetOrthonormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->GetOrthonormalized();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetHandedness(void * jarg1) {
  double jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (double)((GfMatrix4d const *)arg1)->GetHandedness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_IsRightHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (bool)((GfMatrix4d const *)arg1)->IsRightHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_IsLeftHanded(void * jarg1) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (bool)((GfMatrix4d const *)arg1)->IsLeftHanded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetScale__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double arg2 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfMatrix4d *) &(arg1)->SetScale(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_RemoveScaleShear(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->RemoveScaleShear();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRotate__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfQuatd *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetRotate((GfQuatd const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRotateOnly__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfQuatd *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetRotateOnly((GfQuatd const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRotate__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfRotation *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetRotate((GfRotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRotateOnly__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfRotation *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetRotateOnly((GfRotation const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRotate__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfMatrix3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetRotate((GfMatrix3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetRotateOnly__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfMatrix3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetRotateOnly((GfMatrix3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetScale__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetScale((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetTranslate(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetTranslate((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetTranslateOnly(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetTranslateOnly((GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfRotation *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetTransform((GfRotation const &)*arg2,(GfVec3d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfMatrix3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetTransform((GfMatrix3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetLookAt__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetLookAt((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_SetLookAt__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfRotation *arg3 = 0 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfRotation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (GfMatrix4d *) &(arg1)->SetLookAt((GfVec3d const &)*arg2,(GfRotation const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_Factor__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, double jarg7) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  GfVec3d *arg5 = (GfVec3d *) 0 ;
  GfMatrix4d *arg6 = (GfMatrix4d *) 0 ;
  double arg7 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  arg5 = (GfVec3d *)jarg5; 
  arg6 = (GfMatrix4d *)jarg6; 
  arg7 = (double)jarg7; 
  result = (bool)((GfMatrix4d const *)arg1)->Factor(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_Factor__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  GfVec3d *arg5 = (GfVec3d *) 0 ;
  GfMatrix4d *arg6 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  arg5 = (GfVec3d *)jarg5; 
  arg6 = (GfMatrix4d *)jarg6; 
  result = (bool)((GfMatrix4d const *)arg1)->Factor(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_ExtractTranslation(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->ExtractTranslation();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_ExtractRotation(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfRotation result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->ExtractRotation();
  jresult = new GfRotation((const GfRotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_DecomposeRotation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->DecomposeRotation((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_ExtractRotationMatrix(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfMatrix3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = ((GfMatrix4d const *)arg1)->ExtractRotationMatrix();
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_Transform__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->Transform((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_Transform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->Transform((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_TransformDir__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->TransformDir((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_TransformDir__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->TransformDir((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_TransformAffine__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->TransformAffine((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfMatrix4d_TransformAffine__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfMatrix4d const *)arg1)->TransformAffine((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfMatrix4d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfMatrix4d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfMatrix4d_Equals((GfMatrix4d const &)*arg1,(GfMatrix4d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfMatrix4d_GetHashCode(void * jarg1) {
  int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  int result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = (int)GfMatrix4d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_GfMatrix4d_ToString(void * jarg1) {
  char * jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  std::string result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  result = GfMatrix4d_ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4d_CopyToArray(void * jarg1, double* jarg2) {
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = jarg2;
  GfMatrix4d_CopyToArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfMatrix4d_CopyFromArray(void * jarg1, double* jarg2) {
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = jarg2;
  GfMatrix4d_CopyFromArray(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfMatrix4d(void * jarg1) {
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  
  arg1 = (GfMatrix4d *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_5(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfMatrix4d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfMatrix4d const &)*arg1,(GfMatrix4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec2i_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec2i::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2i__SWIG_0() {
  void * jresult ;
  GfVec2i *result = 0 ;
  
  result = (GfVec2i *)new GfVec2i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2i__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2i *result = 0 ;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (GfVec2i *)new GfVec2i((GfVec2i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2i__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfVec2i *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfVec2i *)new GfVec2i(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2i__SWIG_3(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  GfVec2i *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec2i *)new GfVec2i(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2i_XAxis() {
  void * jresult ;
  GfVec2i result;
  
  result = GfVec2i::XAxis();
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2i_YAxis() {
  void * jresult ;
  GfVec2i result;
  
  result = GfVec2i::YAxis();
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2i_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec2i result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec2i::Axis(arg1);
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2i_Set(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  int arg2 ;
  int arg3 ;
  GfVec2i *result = 0 ;
  
  arg1 = (GfVec2i *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (GfVec2i *) &(arg1)->Set(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_13(void * jarg1) {
  unsigned long jresult ;
  GfVec2i *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec2i const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2i_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  GfVec2i *arg2 = 0 ;
  GfVec2i result;
  
  arg1 = (GfVec2i *)jarg1; 
  arg2 = (GfVec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2i const *)arg1)->GetProjection((GfVec2i const &)*arg2);
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2i_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  GfVec2i *arg2 = 0 ;
  GfVec2i result;
  
  arg1 = (GfVec2i *)jarg1; 
  arg2 = (GfVec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2i const *)arg1)->GetComplement((GfVec2i const &)*arg2);
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec2i_GetLengthSq(void * jarg1) {
  int jresult ;
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  int result;
  
  arg1 = (GfVec2i *)jarg1; 
  result = (int)((GfVec2i const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec2i_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2i *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec2i_Equals((GfVec2i const &)*arg1,(GfVec2i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec2i_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  int result;
  
  arg1 = (GfVec2i *)jarg1; 
  result = (int)GfVec2i_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec2i_GetValue(void * jarg1, int jarg2) {
  int jresult ;
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GfVec2i *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GfVec2i_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec2i_SetValue(void * jarg1, int jarg2, int jarg3) {
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GfVec2i *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  GfVec2i_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec2i(void * jarg1) {
  GfVec2i *arg1 = (GfVec2i *) 0 ;
  
  arg1 = (GfVec2i *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2i *arg2 = 0 ;
  GfVec2i result;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec2i const &)*arg1,(GfVec2i const &)*arg2);
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2i *arg2 = 0 ;
  GfVec2i result;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec2i const &)*arg1,(GfVec2i const &)*arg2);
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfDot__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2i *arg2 = 0 ;
  int result;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (int)GfDot((GfVec2i const &)*arg1,(GfVec2i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec2h_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec2h::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_0() {
  void * jresult ;
  GfVec2h *result = 0 ;
  
  result = (GfVec2h *)new GfVec2h();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *result = 0 ;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = (GfVec2h *)new GfVec2h((GfVec2h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_2(void * jarg1) {
  void * jresult ;
  GfHalf arg1 ;
  GfHalf *argp1 ;
  GfVec2h *result = 0 ;
  
  argp1 = (GfHalf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (GfVec2h *)new GfVec2h(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  GfHalf arg1 ;
  GfHalf arg2 ;
  GfHalf *argp1 ;
  GfHalf *argp2 ;
  GfVec2h *result = 0 ;
  
  argp1 = (GfHalf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (GfVec2h *)new GfVec2h(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2h *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfVec2h *)new GfVec2h((GfVec2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2h *result = 0 ;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (GfVec2h *)new GfVec2h((GfVec2f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2h__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2h *result = 0 ;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (GfVec2h *)new GfVec2h((GfVec2i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_XAxis() {
  void * jresult ;
  GfVec2h result;
  
  result = GfVec2h::XAxis();
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_YAxis() {
  void * jresult ;
  GfVec2h result;
  
  result = GfVec2h::YAxis();
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec2h result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec2h::Axis(arg1);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_Set__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf arg2 ;
  GfHalf arg3 ;
  GfHalf *argp2 ;
  GfHalf *argp3 ;
  GfVec2h *result = 0 ;
  
  arg1 = (GfVec2h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (GfHalf *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (GfVec2h *) &(arg1)->Set(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf *arg2 = (GfHalf *) 0 ;
  GfVec2h *result = 0 ;
  
  arg1 = (GfVec2h *)jarg1; 
  arg2 = (GfHalf *)jarg2; 
  result = (GfVec2h *) &(arg1)->Set((GfHalf const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_14(void * jarg1) {
  unsigned long jresult ;
  GfVec2h *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec2h const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfVec2h *arg2 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1; 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2h const *)arg1)->GetProjection((GfVec2h const &)*arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfVec2h *arg2 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1; 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2h const *)arg1)->GetComplement((GfVec2h const &)*arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_GetLengthSq(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1; 
  result = ((GfVec2h const *)arg1)->GetLengthSq();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_GetLength(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1; 
  result = ((GfVec2h const *)arg1)->GetLength();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->Normalize(arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1; 
  result = (arg1)->Normalize();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_GetNormalized__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((GfVec2h const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2h_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1; 
  result = ((GfVec2h const *)arg1)->GetNormalized();
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec2h_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec2h_Equals((GfVec2h const &)*arg1,(GfVec2h const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec2h_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  int result;
  
  arg1 = (GfVec2h *)jarg1; 
  result = (int)GfVec2h_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec2h_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GfVec2h *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GfVec2h_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec2h_SetValue(void * jarg1, int jarg2, float jarg3) {
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GfVec2h *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GfVec2h_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec2h(void * jarg1) {
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  
  arg1 = (GfVec2h *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec2h const &)*arg1,(GfVec2h const &)*arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec2h const &)*arg1,(GfVec2h const &)*arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfDot__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfDot((GfVec2h const &)*arg1,(GfVec2h const &)*arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_0(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfGetLength((GfVec2h const &)*arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GfNormalize(arg1,arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = (GfVec2h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec2h *)jarg1; 
  result = GfNormalize(arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GfGetNormalized((GfVec2h const &)*arg1,arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec2h const &)*arg1);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec2h const &)*arg1,(GfVec2h const &)*arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  GfVec2h result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec2h const &)*arg1,(GfVec2h const &)*arg2);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_6(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2h *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec2h const &)*arg1,(GfVec2h const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec2f_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec2f::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_0() {
  void * jresult ;
  GfVec2f *result = 0 ;
  
  result = (GfVec2f *)new GfVec2f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *result = 0 ;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (GfVec2f *)new GfVec2f((GfVec2f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfVec2f *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfVec2f *)new GfVec2f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_3(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  GfVec2f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (GfVec2f *)new GfVec2f(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2f *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfVec2f *)new GfVec2f((GfVec2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2f *result = 0 ;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = (GfVec2f *)new GfVec2f((GfVec2h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2f__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2f *result = 0 ;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (GfVec2f *)new GfVec2f((GfVec2i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_XAxis() {
  void * jresult ;
  GfVec2f result;
  
  result = GfVec2f::XAxis();
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_YAxis() {
  void * jresult ;
  GfVec2f result;
  
  result = GfVec2f::YAxis();
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec2f result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec2f::Axis(arg1);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_Set(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float arg2 ;
  float arg3 ;
  GfVec2f *result = 0 ;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (GfVec2f *) &(arg1)->Set(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_15(void * jarg1) {
  unsigned long jresult ;
  GfVec2f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec2f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  GfVec2f *arg2 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2f const *)arg1)->GetProjection((GfVec2f const &)*arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  GfVec2f *arg2 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2f const *)arg1)->GetComplement((GfVec2f const &)*arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec2f_GetLengthSq(void * jarg1) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  result = (float)((GfVec2f const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec2f_GetLength(void * jarg1) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  result = (float)((GfVec2f const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec2f_Normalize__SWIG_0(void * jarg1, float jarg2) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec2f_Normalize__SWIG_1(void * jarg1) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_GetNormalized__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float arg2 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((GfVec2f const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2f_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1; 
  result = ((GfVec2f const *)arg1)->GetNormalized();
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec2f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec2f_Equals((GfVec2f const &)*arg1,(GfVec2f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec2f_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  int result;
  
  arg1 = (GfVec2f *)jarg1; 
  result = (int)GfVec2f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec2f_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GfVec2f_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec2f_SetValue(void * jarg1, int jarg2, float jarg3) {
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GfVec2f_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec2f(void * jarg1) {
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  
  arg1 = (GfVec2f *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec2f const &)*arg1,(GfVec2f const &)*arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec2f const &)*arg1,(GfVec2f const &)*arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfDot__SWIG_2(void * jarg1, void * jarg2) {
  float jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (float)GfDot((GfVec2f const &)*arg1,(GfVec2f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_1(void * jarg1) {
  float jresult ;
  GfVec2f *arg1 = 0 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (float)GfGetLength((GfVec2f const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_2(void * jarg1, float jarg2) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)GfNormalize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_3(void * jarg1) {
  float jresult ;
  GfVec2f *arg1 = (GfVec2f *) 0 ;
  float result;
  
  arg1 = (GfVec2f *)jarg1; 
  result = (float)GfNormalize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  float arg2 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = GfGetNormalized((GfVec2f const &)*arg1,arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_3(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec2f const &)*arg1);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec2f const &)*arg1,(GfVec2f const &)*arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  GfVec2f result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec2f const &)*arg1,(GfVec2f const &)*arg2);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_7(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2f *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec2f const &)*arg1,(GfVec2f const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec2d_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec2d::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_0() {
  void * jresult ;
  GfVec2d *result = 0 ;
  
  result = (GfVec2d *)new GfVec2d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (GfVec2d *)new GfVec2d((GfVec2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfVec2d *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfVec2d *)new GfVec2d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_3(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  GfVec2d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (GfVec2d *)new GfVec2d(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (GfVec2d *)new GfVec2d((GfVec2f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = (GfVec2d *)new GfVec2d((GfVec2h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec2d__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (GfVec2d *)new GfVec2d((GfVec2i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_XAxis() {
  void * jresult ;
  GfVec2d result;
  
  result = GfVec2d::XAxis();
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_YAxis() {
  void * jresult ;
  GfVec2d result;
  
  result = GfVec2d::YAxis();
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec2d result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec2d::Axis(arg1);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_Set(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double arg2 ;
  double arg3 ;
  GfVec2d *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (GfVec2d *) &(arg1)->Set(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_16(void * jarg1) {
  unsigned long jresult ;
  GfVec2d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec2d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2d const *)arg1)->GetProjection((GfVec2d const &)*arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = ((GfVec2d const *)arg1)->GetComplement((GfVec2d const &)*arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec2d_GetLengthSq(void * jarg1) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  result = (double)((GfVec2d const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec2d_GetLength(void * jarg1) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  result = (double)((GfVec2d const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec2d_Normalize__SWIG_0(void * jarg1, double jarg2) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec2d_Normalize__SWIG_1(void * jarg1) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  result = (double)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_GetNormalized__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double arg2 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfVec2d const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec2d_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1; 
  result = ((GfVec2d const *)arg1)->GetNormalized();
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec2d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec2d_Equals((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec2d_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  int result;
  
  arg1 = (GfVec2d *)jarg1; 
  result = (int)GfVec2d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec2d_GetValue(void * jarg1, int jarg2) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)GfVec2d_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec2d_SetValue(void * jarg1, int jarg2, double jarg3) {
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  GfVec2d_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec2d(void * jarg1) {
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  
  arg1 = (GfVec2d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfDot__SWIG_3(void * jarg1, void * jarg2) {
  double jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (double)GfDot((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_2(void * jarg1) {
  double jresult ;
  GfVec2d *arg1 = 0 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (double)GfGetLength((GfVec2d const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_4(void * jarg1, double jarg2) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)GfNormalize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_5(void * jarg1) {
  double jresult ;
  GfVec2d *arg1 = (GfVec2d *) 0 ;
  double result;
  
  arg1 = (GfVec2d *)jarg1; 
  result = (double)GfNormalize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_4(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  double arg2 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = GfGetNormalized((GfVec2d const &)*arg1,arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec2d const &)*arg1);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec2d const &)*arg1,(GfVec2d const &)*arg2);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_8(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec2d *arg1 = 0 ;
  GfVec2d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec2d const &)*arg1,(GfVec2d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec3i_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec3i::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3i__SWIG_0() {
  void * jresult ;
  GfVec3i *result = 0 ;
  
  result = (GfVec3i *)new GfVec3i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3i__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3i *result = 0 ;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (GfVec3i *)new GfVec3i((GfVec3i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3i__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfVec3i *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfVec3i *)new GfVec3i(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3i__SWIG_3(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  GfVec3i *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (GfVec3i *)new GfVec3i(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_XAxis() {
  void * jresult ;
  GfVec3i result;
  
  result = GfVec3i::XAxis();
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_YAxis() {
  void * jresult ;
  GfVec3i result;
  
  result = GfVec3i::YAxis();
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_ZAxis() {
  void * jresult ;
  GfVec3i result;
  
  result = GfVec3i::ZAxis();
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec3i result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec3i::Axis(arg1);
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_Set(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  GfVec3i *result = 0 ;
  
  arg1 = (GfVec3i *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (GfVec3i *) &(arg1)->Set(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_17(void * jarg1) {
  unsigned long jresult ;
  GfVec3i *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec3i const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  GfVec3i *arg2 = 0 ;
  GfVec3i result;
  
  arg1 = (GfVec3i *)jarg1; 
  arg2 = (GfVec3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3i const *)arg1)->GetProjection((GfVec3i const &)*arg2);
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3i_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  GfVec3i *arg2 = 0 ;
  GfVec3i result;
  
  arg1 = (GfVec3i *)jarg1; 
  arg2 = (GfVec3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3i const *)arg1)->GetComplement((GfVec3i const &)*arg2);
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec3i_GetLengthSq(void * jarg1) {
  int jresult ;
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  int result;
  
  arg1 = (GfVec3i *)jarg1; 
  result = (int)((GfVec3i const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3i_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3i *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec3i_Equals((GfVec3i const &)*arg1,(GfVec3i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec3i_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  int result;
  
  arg1 = (GfVec3i *)jarg1; 
  result = (int)GfVec3i_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec3i_GetValue(void * jarg1, int jarg2) {
  int jresult ;
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GfVec3i *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GfVec3i_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3i_SetValue(void * jarg1, int jarg2, int jarg3) {
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GfVec3i *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  GfVec3i_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec3i(void * jarg1) {
  GfVec3i *arg1 = (GfVec3i *) 0 ;
  
  arg1 = (GfVec3i *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3i *arg2 = 0 ;
  GfVec3i result;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec3i const &)*arg1,(GfVec3i const &)*arg2);
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3i *arg2 = 0 ;
  GfVec3i result;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec3i const &)*arg1,(GfVec3i const &)*arg2);
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfDot__SWIG_4(void * jarg1, void * jarg2) {
  int jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3i *arg2 = 0 ;
  int result;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (int)GfDot((GfVec3i const &)*arg1,(GfVec3i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec3h_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec3h::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_0() {
  void * jresult ;
  GfVec3h *result = 0 ;
  
  result = (GfVec3h *)new GfVec3h();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *result = 0 ;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = (GfVec3h *)new GfVec3h((GfVec3h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_2(void * jarg1) {
  void * jresult ;
  GfHalf arg1 ;
  GfHalf *argp1 ;
  GfVec3h *result = 0 ;
  
  argp1 = (GfHalf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (GfVec3h *)new GfVec3h(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfHalf arg1 ;
  GfHalf arg2 ;
  GfHalf arg3 ;
  GfHalf *argp1 ;
  GfHalf *argp2 ;
  GfHalf *argp3 ;
  GfVec3h *result = 0 ;
  
  argp1 = (GfHalf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (GfHalf *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (GfVec3h *)new GfVec3h(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3h *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfVec3h *)new GfVec3h((GfVec3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3h *result = 0 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfVec3h *)new GfVec3h((GfVec3f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3h__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3h *result = 0 ;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (GfVec3h *)new GfVec3h((GfVec3i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_XAxis() {
  void * jresult ;
  GfVec3h result;
  
  result = GfVec3h::XAxis();
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_YAxis() {
  void * jresult ;
  GfVec3h result;
  
  result = GfVec3h::YAxis();
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_ZAxis() {
  void * jresult ;
  GfVec3h result;
  
  result = GfVec3h::ZAxis();
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec3h result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec3h::Axis(arg1);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_Set__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf arg2 ;
  GfHalf arg3 ;
  GfHalf arg4 ;
  GfHalf *argp2 ;
  GfHalf *argp3 ;
  GfHalf *argp4 ;
  GfVec3h *result = 0 ;
  
  arg1 = (GfVec3h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (GfHalf *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (GfHalf *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (GfVec3h *) &(arg1)->Set(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf *arg2 = (GfHalf *) 0 ;
  GfVec3h *result = 0 ;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfHalf *)jarg2; 
  result = (GfVec3h *) &(arg1)->Set((GfHalf const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_18(void * jarg1) {
  unsigned long jresult ;
  GfVec3h *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec3h const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3h const *)arg1)->GetProjection((GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3h const *)arg1)->GetComplement((GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_GetLengthSq(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1; 
  result = ((GfVec3h const *)arg1)->GetLengthSq();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_GetLength(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1; 
  result = ((GfVec3h const *)arg1)->GetLength();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->Normalize(arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1; 
  result = (arg1)->Normalize();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_GetNormalized__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((GfVec3h const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3h_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1; 
  result = ((GfVec3h const *)arg1)->GetNormalized();
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3h_OrthogonalizeBasis__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  bool arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  result = (bool)GfVec3h::OrthogonalizeBasis(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3h_OrthogonalizeBasis__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)GfVec3h::OrthogonalizeBasis(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3h_BuildOrthonormalFrame__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  GfHalf arg4 ;
  GfHalf *argp4 ;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  argp4 = (GfHalf *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return ;
  }
  arg4 = *argp4; 
  ((GfVec3h const *)arg1)->BuildOrthonormalFrame(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3h_BuildOrthonormalFrame__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  ((GfVec3h const *)arg1)->BuildOrthonormalFrame(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3h_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec3h_Equals((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec3h_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  int result;
  
  arg1 = (GfVec3h *)jarg1; 
  result = (int)GfVec3h_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec3h_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GfVec3h_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3h_SetValue(void * jarg1, int jarg2, float jarg3) {
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GfVec3h_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec3h(void * jarg1) {
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  
  arg1 = (GfVec3h *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfDot__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfDot((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_3(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfGetLength((GfVec3h const &)*arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GfNormalize(arg1,arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec3h *)jarg1; 
  result = GfNormalize(arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GfGetNormalized((GfVec3h const &)*arg1,arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec3h const &)*arg1);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_9(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec3h const &)*arg1,(GfVec3h const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfOrthogonalizeBasis__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  bool arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  result = (bool)GfOrthogonalizeBasis(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfOrthogonalizeBasis__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GfVec3h *arg1 = (GfVec3h *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GfVec3h *)jarg1; 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)GfOrthogonalizeBasis(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBuildOrthonormalFrame__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  GfHalf arg4 ;
  GfHalf *argp4 ;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  argp4 = (GfHalf *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return ;
  }
  arg4 = *argp4; 
  GfBuildOrthonormalFrame((GfVec3h const &)*arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBuildOrthonormalFrame__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3h *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  GfBuildOrthonormalFrame((GfVec3h const &)*arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCross__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h result;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfCross((GfVec3h const &)*arg1,(GfVec3h const &)*arg2);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_0(double jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double arg1 ;
  GfVec3h *arg2 = 0 ;
  GfVec3h *arg3 = 0 ;
  GfVec3h result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfVec3h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3h *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = GfSlerp(arg1,(GfVec3h const &)*arg2,(GfVec3h const &)*arg3);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec3f_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec3f::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_0() {
  void * jresult ;
  GfVec3f *result = 0 ;
  
  result = (GfVec3f *)new GfVec3f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *result = 0 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfVec3f *)new GfVec3f((GfVec3f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfVec3f *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfVec3f *)new GfVec3f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  GfVec3f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (GfVec3f *)new GfVec3f(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3f *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfVec3f *)new GfVec3f((GfVec3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3f *result = 0 ;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = (GfVec3f *)new GfVec3f((GfVec3h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3f__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3f *result = 0 ;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (GfVec3f *)new GfVec3f((GfVec3i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_XAxis() {
  void * jresult ;
  GfVec3f result;
  
  result = GfVec3f::XAxis();
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_YAxis() {
  void * jresult ;
  GfVec3f result;
  
  result = GfVec3f::YAxis();
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_ZAxis() {
  void * jresult ;
  GfVec3f result;
  
  result = GfVec3f::ZAxis();
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec3f result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec3f::Axis(arg1);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_Set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  GfVec3f *result = 0 ;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (GfVec3f *) &(arg1)->Set(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_19(void * jarg1) {
  unsigned long jresult ;
  GfVec3f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec3f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3f const *)arg1)->GetProjection((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3f const *)arg1)->GetComplement((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec3f_GetLengthSq(void * jarg1) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  result = (float)((GfVec3f const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec3f_GetLength(void * jarg1) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  result = (float)((GfVec3f const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec3f_Normalize__SWIG_0(void * jarg1, float jarg2) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec3f_Normalize__SWIG_1(void * jarg1) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_GetNormalized__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float arg2 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((GfVec3f const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3f_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1; 
  result = ((GfVec3f const *)arg1)->GetNormalized();
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3f_OrthogonalizeBasis__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  bool arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  result = (bool)GfVec3f::OrthogonalizeBasis(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3f_OrthogonalizeBasis__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)GfVec3f::OrthogonalizeBasis(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3f_BuildOrthonormalFrame__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  float arg4 ;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = (float)jarg4; 
  ((GfVec3f const *)arg1)->BuildOrthonormalFrame(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3f_BuildOrthonormalFrame__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  ((GfVec3f const *)arg1)->BuildOrthonormalFrame(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec3f_Equals((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec3f_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  int result;
  
  arg1 = (GfVec3f *)jarg1; 
  result = (int)GfVec3f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec3f_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GfVec3f_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3f_SetValue(void * jarg1, int jarg2, float jarg3) {
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GfVec3f_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec3f(void * jarg1) {
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  
  arg1 = (GfVec3f *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfDot__SWIG_6(void * jarg1, void * jarg2) {
  float jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (float)GfDot((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_4(void * jarg1) {
  float jresult ;
  GfVec3f *arg1 = 0 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (float)GfGetLength((GfVec3f const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_8(void * jarg1, float jarg2) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)GfNormalize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_9(void * jarg1) {
  float jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  float result;
  
  arg1 = (GfVec3f *)jarg1; 
  result = (float)GfNormalize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_8(void * jarg1, float jarg2) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  float arg2 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = GfGetNormalized((GfVec3f const &)*arg1,arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_9(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec3f const &)*arg1);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_10(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec3f const &)*arg1,(GfVec3f const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfOrthogonalizeBasis__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  bool arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  result = (bool)GfOrthogonalizeBasis(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfOrthogonalizeBasis__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)GfOrthogonalizeBasis(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBuildOrthonormalFrame__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  float arg4 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  arg4 = (float)jarg4; 
  GfBuildOrthonormalFrame((GfVec3f const &)*arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBuildOrthonormalFrame__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfVec3f *arg3 = (GfVec3f *) 0 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfVec3f *)jarg3; 
  GfBuildOrthonormalFrame((GfVec3f const &)*arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCross__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfCross((GfVec3f const &)*arg1,(GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_1(double jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double arg1 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f *arg3 = 0 ;
  GfVec3f result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = GfSlerp(arg1,(GfVec3f const &)*arg2,(GfVec3f const &)*arg3);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec3d_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec3d::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_0() {
  void * jresult ;
  GfVec3d *result = 0 ;
  
  result = (GfVec3d *)new GfVec3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfVec3d *)new GfVec3d((GfVec3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfVec3d *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfVec3d *)new GfVec3d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_3(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  GfVec3d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (GfVec3d *)new GfVec3d(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfVec3d *)new GfVec3d((GfVec3f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = (GfVec3d *)new GfVec3d((GfVec3h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3d__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (GfVec3d *)new GfVec3d((GfVec3i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_XAxis() {
  void * jresult ;
  GfVec3d result;
  
  result = GfVec3d::XAxis();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_YAxis() {
  void * jresult ;
  GfVec3d result;
  
  result = GfVec3d::YAxis();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_ZAxis() {
  void * jresult ;
  GfVec3d result;
  
  result = GfVec3d::ZAxis();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec3d result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec3d::Axis(arg1);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_Set(void * jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (GfVec3d *) &(arg1)->Set(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_20(void * jarg1) {
  unsigned long jresult ;
  GfVec3d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec3d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3d const *)arg1)->GetProjection((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfVec3d const *)arg1)->GetComplement((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec3d_GetLengthSq(void * jarg1) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  result = (double)((GfVec3d const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec3d_GetLength(void * jarg1) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  result = (double)((GfVec3d const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec3d_Normalize__SWIG_0(void * jarg1, double jarg2) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec3d_Normalize__SWIG_1(void * jarg1) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  result = (double)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_GetNormalized__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double arg2 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfVec3d const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3d_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1; 
  result = ((GfVec3d const *)arg1)->GetNormalized();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3d_OrthogonalizeBasis__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  bool arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  result = (bool)GfVec3d::OrthogonalizeBasis(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3d_OrthogonalizeBasis__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)GfVec3d::OrthogonalizeBasis(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3d_BuildOrthonormalFrame__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  double arg4 ;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (double)jarg4; 
  ((GfVec3d const *)arg1)->BuildOrthonormalFrame(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3d_BuildOrthonormalFrame__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  ((GfVec3d const *)arg1)->BuildOrthonormalFrame(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec3d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec3d_Equals((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec3d_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  int result;
  
  arg1 = (GfVec3d *)jarg1; 
  result = (int)GfVec3d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec3d_GetValue(void * jarg1, int jarg2) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)GfVec3d_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3d_SetValue(void * jarg1, int jarg2, double jarg3) {
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  GfVec3d_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec3d(void * jarg1) {
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  
  arg1 = (GfVec3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfDot__SWIG_7(void * jarg1, void * jarg2) {
  double jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (double)GfDot((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_5(void * jarg1) {
  double jresult ;
  GfVec3d *arg1 = 0 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (double)GfGetLength((GfVec3d const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_10(void * jarg1, double jarg2) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)GfNormalize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_11(void * jarg1) {
  double jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  double result;
  
  arg1 = (GfVec3d *)jarg1; 
  result = (double)GfNormalize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_10(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  double arg2 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = GfGetNormalized((GfVec3d const &)*arg1,arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_11(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec3d const &)*arg1);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_11(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec3d const &)*arg1,(GfVec3d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfOrthogonalizeBasis__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  bool arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  result = (bool)GfOrthogonalizeBasis(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfOrthogonalizeBasis__SWIG_5(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  GfVec3d *arg1 = (GfVec3d *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (GfVec3d *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)GfOrthogonalizeBasis(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBuildOrthonormalFrame__SWIG_4(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  double arg4 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (double)jarg4; 
  GfBuildOrthonormalFrame((GfVec3d const &)*arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfBuildOrthonormalFrame__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  GfBuildOrthonormalFrame((GfVec3d const &)*arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCross__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfCross((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_2(double jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double arg1 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfSlerp(arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec4i_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec4i::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4i__SWIG_0() {
  void * jresult ;
  GfVec4i *result = 0 ;
  
  result = (GfVec4i *)new GfVec4i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4i__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4i *result = 0 ;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (GfVec4i *)new GfVec4i((GfVec4i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4i__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfVec4i *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfVec4i *)new GfVec4i(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4i__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  GfVec4i *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (GfVec4i *)new GfVec4i(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_XAxis() {
  void * jresult ;
  GfVec4i result;
  
  result = GfVec4i::XAxis();
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_YAxis() {
  void * jresult ;
  GfVec4i result;
  
  result = GfVec4i::YAxis();
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_ZAxis() {
  void * jresult ;
  GfVec4i result;
  
  result = GfVec4i::ZAxis();
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_WAxis() {
  void * jresult ;
  GfVec4i result;
  
  result = GfVec4i::WAxis();
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec4i result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec4i::Axis(arg1);
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_Set(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  GfVec4i *result = 0 ;
  
  arg1 = (GfVec4i *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (GfVec4i *) &(arg1)->Set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_21(void * jarg1) {
  unsigned long jresult ;
  GfVec4i *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec4i const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  GfVec4i *arg2 = 0 ;
  GfVec4i result;
  
  arg1 = (GfVec4i *)jarg1; 
  arg2 = (GfVec4i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4i const *)arg1)->GetProjection((GfVec4i const &)*arg2);
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4i_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  GfVec4i *arg2 = 0 ;
  GfVec4i result;
  
  arg1 = (GfVec4i *)jarg1; 
  arg2 = (GfVec4i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4i const *)arg1)->GetComplement((GfVec4i const &)*arg2);
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec4i_GetLengthSq(void * jarg1) {
  int jresult ;
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  int result;
  
  arg1 = (GfVec4i *)jarg1; 
  result = (int)((GfVec4i const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec4i_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4i *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec4i_Equals((GfVec4i const &)*arg1,(GfVec4i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec4i_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  int result;
  
  arg1 = (GfVec4i *)jarg1; 
  result = (int)GfVec4i_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec4i_GetValue(void * jarg1, int jarg2) {
  int jresult ;
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GfVec4i *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GfVec4i_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4i_SetValue(void * jarg1, int jarg2, int jarg3) {
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GfVec4i *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  GfVec4i_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec4i(void * jarg1) {
  GfVec4i *arg1 = (GfVec4i *) 0 ;
  
  arg1 = (GfVec4i *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4i *arg2 = 0 ;
  GfVec4i result;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec4i const &)*arg1,(GfVec4i const &)*arg2);
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4i *arg2 = 0 ;
  GfVec4i result;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec4i const &)*arg1,(GfVec4i const &)*arg2);
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfDot__SWIG_8(void * jarg1, void * jarg2) {
  int jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4i *arg2 = 0 ;
  int result;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (int)GfDot((GfVec4i const &)*arg1,(GfVec4i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec4h_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec4h::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_0() {
  void * jresult ;
  GfVec4h *result = 0 ;
  
  result = (GfVec4h *)new GfVec4h();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *result = 0 ;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = (GfVec4h *)new GfVec4h((GfVec4h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_2(void * jarg1) {
  void * jresult ;
  GfHalf arg1 ;
  GfHalf *argp1 ;
  GfVec4h *result = 0 ;
  
  argp1 = (GfHalf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (GfVec4h *)new GfVec4h(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfHalf arg1 ;
  GfHalf arg2 ;
  GfHalf arg3 ;
  GfHalf arg4 ;
  GfHalf *argp1 ;
  GfHalf *argp2 ;
  GfHalf *argp3 ;
  GfHalf *argp4 ;
  GfVec4h *result = 0 ;
  
  argp1 = (GfHalf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (GfHalf *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (GfHalf *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (GfVec4h *)new GfVec4h(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4h *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (GfVec4h *)new GfVec4h((GfVec4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4h *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (GfVec4h *)new GfVec4h((GfVec4f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4h__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4h *result = 0 ;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (GfVec4h *)new GfVec4h((GfVec4i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_XAxis() {
  void * jresult ;
  GfVec4h result;
  
  result = GfVec4h::XAxis();
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_YAxis() {
  void * jresult ;
  GfVec4h result;
  
  result = GfVec4h::YAxis();
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_ZAxis() {
  void * jresult ;
  GfVec4h result;
  
  result = GfVec4h::ZAxis();
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_WAxis() {
  void * jresult ;
  GfVec4h result;
  
  result = GfVec4h::WAxis();
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec4h result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec4h::Axis(arg1);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_Set__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf arg2 ;
  GfHalf arg3 ;
  GfHalf arg4 ;
  GfHalf arg5 ;
  GfHalf *argp2 ;
  GfHalf *argp3 ;
  GfHalf *argp4 ;
  GfHalf *argp5 ;
  GfVec4h *result = 0 ;
  
  arg1 = (GfVec4h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (GfHalf *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (GfHalf *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg4 = *argp4; 
  argp5 = (GfHalf *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (GfVec4h *) &(arg1)->Set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_Set__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf *arg2 = (GfHalf *) 0 ;
  GfVec4h *result = 0 ;
  
  arg1 = (GfVec4h *)jarg1; 
  arg2 = (GfHalf *)jarg2; 
  result = (GfVec4h *) &(arg1)->Set((GfHalf const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_22(void * jarg1) {
  unsigned long jresult ;
  GfVec4h *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec4h const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfVec4h *arg2 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1; 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4h const *)arg1)->GetProjection((GfVec4h const &)*arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfVec4h *arg2 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1; 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4h const *)arg1)->GetComplement((GfVec4h const &)*arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_GetLengthSq(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1; 
  result = ((GfVec4h const *)arg1)->GetLengthSq();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_GetLength(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1; 
  result = ((GfVec4h const *)arg1)->GetLength();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_Normalize__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->Normalize(arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_Normalize__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1; 
  result = (arg1)->Normalize();
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_GetNormalized__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((GfVec4h const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4h_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1; 
  result = ((GfVec4h const *)arg1)->GetNormalized();
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec4h_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec4h_Equals((GfVec4h const &)*arg1,(GfVec4h const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec4h_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  int result;
  
  arg1 = (GfVec4h *)jarg1; 
  result = (int)GfVec4h_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec4h_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GfVec4h *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GfVec4h_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4h_SetValue(void * jarg1, int jarg2, float jarg3) {
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GfVec4h *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GfVec4h_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec4h(void * jarg1) {
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  
  arg1 = (GfVec4h *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec4h const &)*arg1,(GfVec4h const &)*arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec4h const &)*arg1,(GfVec4h const &)*arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfDot__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfDot((GfVec4h const &)*arg1,(GfVec4h const &)*arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfGetLength((GfVec4h const &)*arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_12(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1; 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GfNormalize(arg1,arg2);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_13(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = (GfVec4h *) 0 ;
  GfHalf result;
  
  arg1 = (GfVec4h *)jarg1; 
  result = GfNormalize(arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_12(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfHalf arg2 ;
  GfHalf *argp2 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  argp2 = (GfHalf *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GfHalf", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GfGetNormalized((GfVec4h const &)*arg1,arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_13(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec4h const &)*arg1);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec4h const &)*arg1,(GfVec4h const &)*arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  GfVec4h result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec4h const &)*arg1,(GfVec4h const &)*arg2);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_12(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4h *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4h *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec4h const &)*arg1,(GfVec4h const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_Clear(void * jarg1) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_Add(void * jarg1, void * jarg2) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  GfVec4f *arg2 = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((GfVec4f const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec4fVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  std::vector< GfVec4f >::size_type result;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  result = ((std::vector< GfVec4f > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec4fVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  std::vector< GfVec4f >::size_type result;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  result = ((std::vector< GfVec4f > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  std::vector< GfVec4f >::size_type arg2 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (std::vector< GfVec4f >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4fVector__SWIG_0() {
  void * jresult ;
  std::vector< GfVec4f > *result = 0 ;
  
  result = (std::vector< GfVec4f > *)new std::vector< GfVec4f >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4fVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< GfVec4f > *arg1 = 0 ;
  std::vector< GfVec4f > *result = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< GfVec4f > *)new std::vector< GfVec4f >((std::vector< GfVec4f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4fVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< GfVec4f > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< GfVec4f > *)new_std_vector_Sl_GfVec4f_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4fVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  GfVec4f result;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_GfVec4f_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4fVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  GfVec4f *result = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (GfVec4f *) &std_vector_Sl_GfVec4f_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  GfVec4f *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec4f_Sg__setitem(arg1,arg2,(GfVec4f const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  std::vector< GfVec4f > *arg2 = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (std::vector< GfVec4f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_GfVec4f_Sg__AddRange(arg1,(std::vector< GfVec4f > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4fVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< GfVec4f > *result = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< GfVec4f > *)std_vector_Sl_GfVec4f_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  GfVec4f *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec4f_Sg__Insert(arg1,arg2,(GfVec4f const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  std::vector< GfVec4f > *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< GfVec4f > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec4f_Sg__InsertRange(arg1,arg2,(std::vector< GfVec4f > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_GfVec4f_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_GfVec4f_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4fVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  int arg2 ;
  std::vector< GfVec4f > *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< GfVec4f > *)std_vector_Sl_GfVec4f_Sg__Repeat((GfVec4f const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  std_vector_Sl_GfVec4f_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_GfVec4f_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4fVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  int arg2 ;
  std::vector< GfVec4f > *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< GfVec4f > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec4f_Sg__SetRange(arg1,arg2,(std::vector< GfVec4f > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec4fVector(void * jarg1) {
  std::vector< GfVec4f > *arg1 = (std::vector< GfVec4f > *) 0 ;
  
  arg1 = (std::vector< GfVec4f > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec4f_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec4f::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_0() {
  void * jresult ;
  GfVec4f *result = 0 ;
  
  result = (GfVec4f *)new GfVec4f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (GfVec4f *)new GfVec4f((GfVec4f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfVec4f *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfVec4f *)new GfVec4f(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  GfVec4f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (GfVec4f *)new GfVec4f(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4f *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (GfVec4f *)new GfVec4f((GfVec4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4f *result = 0 ;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = (GfVec4f *)new GfVec4f((GfVec4h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4f__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4f *result = 0 ;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (GfVec4f *)new GfVec4f((GfVec4i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_XAxis() {
  void * jresult ;
  GfVec4f result;
  
  result = GfVec4f::XAxis();
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_YAxis() {
  void * jresult ;
  GfVec4f result;
  
  result = GfVec4f::YAxis();
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_ZAxis() {
  void * jresult ;
  GfVec4f result;
  
  result = GfVec4f::ZAxis();
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_WAxis() {
  void * jresult ;
  GfVec4f result;
  
  result = GfVec4f::WAxis();
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec4f result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec4f::Axis(arg1);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  GfVec4f *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (GfVec4f *) &(arg1)->Set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_23(void * jarg1) {
  unsigned long jresult ;
  GfVec4f *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec4f const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  GfVec4f *arg2 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4f const *)arg1)->GetProjection((GfVec4f const &)*arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  GfVec4f *arg2 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4f const *)arg1)->GetComplement((GfVec4f const &)*arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec4f_GetLengthSq(void * jarg1) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  result = (float)((GfVec4f const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec4f_GetLength(void * jarg1) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  result = (float)((GfVec4f const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec4f_Normalize__SWIG_0(void * jarg1, float jarg2) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec4f_Normalize__SWIG_1(void * jarg1) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_GetNormalized__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float arg2 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((GfVec4f const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4f_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1; 
  result = ((GfVec4f const *)arg1)->GetNormalized();
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec4f_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec4f_Equals((GfVec4f const &)*arg1,(GfVec4f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec4f_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  int result;
  
  arg1 = (GfVec4f *)jarg1; 
  result = (int)GfVec4f_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfVec4f_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GfVec4f_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4f_SetValue(void * jarg1, int jarg2, float jarg3) {
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GfVec4f_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec4f(void * jarg1) {
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  
  arg1 = (GfVec4f *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_10(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec4f const &)*arg1,(GfVec4f const &)*arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_10(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec4f const &)*arg1,(GfVec4f const &)*arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfDot__SWIG_10(void * jarg1, void * jarg2) {
  float jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (float)GfDot((GfVec4f const &)*arg1,(GfVec4f const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_7(void * jarg1) {
  float jresult ;
  GfVec4f *arg1 = 0 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (float)GfGetLength((GfVec4f const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_14(void * jarg1, float jarg2) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)GfNormalize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_15(void * jarg1) {
  float jresult ;
  GfVec4f *arg1 = (GfVec4f *) 0 ;
  float result;
  
  arg1 = (GfVec4f *)jarg1; 
  result = (float)GfNormalize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_14(void * jarg1, float jarg2) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  float arg2 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = GfGetNormalized((GfVec4f const &)*arg1,arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_15(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec4f const &)*arg1);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec4f const &)*arg1,(GfVec4f const &)*arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  GfVec4f result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec4f const &)*arg1,(GfVec4f const &)*arg2);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_13(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4f *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec4f const &)*arg1,(GfVec4f const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec4d_dimension_get() {
  unsigned long jresult ;
  size_t result;
  
  result = GfVec4d::dimension;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_0() {
  void * jresult ;
  GfVec4d *result = 0 ;
  
  result = (GfVec4d *)new GfVec4d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (GfVec4d *)new GfVec4d((GfVec4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_2(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfVec4d *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfVec4d *)new GfVec4d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_3(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  GfVec4d *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (GfVec4d *)new GfVec4d(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_5(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  GfVec4d *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (GfVec4d *)new GfVec4d((GfVec4f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_6(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  GfVec4d *result = 0 ;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = (GfVec4d *)new GfVec4d((GfVec4h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec4d__SWIG_7(void * jarg1) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  GfVec4d *result = 0 ;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (GfVec4d *)new GfVec4d((GfVec4i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_XAxis() {
  void * jresult ;
  GfVec4d result;
  
  result = GfVec4d::XAxis();
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_YAxis() {
  void * jresult ;
  GfVec4d result;
  
  result = GfVec4d::YAxis();
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_ZAxis() {
  void * jresult ;
  GfVec4d result;
  
  result = GfVec4d::ZAxis();
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_WAxis() {
  void * jresult ;
  GfVec4d result;
  
  result = GfVec4d::WAxis();
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_Axis(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  GfVec4d result;
  
  arg1 = (size_t)jarg1; 
  result = GfVec4d::Axis(arg1);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_Set(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  void * jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  GfVec4d *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (GfVec4d *) &(arg1)->Set(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_24(void * jarg1) {
  unsigned long jresult ;
  GfVec4d *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfVec4d const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_GetProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  GfVec4d *arg2 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4d const *)arg1)->GetProjection((GfVec4d const &)*arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_GetComplement(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  GfVec4d *arg2 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = ((GfVec4d const *)arg1)->GetComplement((GfVec4d const &)*arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec4d_GetLengthSq(void * jarg1) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  result = (double)((GfVec4d const *)arg1)->GetLengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec4d_GetLength(void * jarg1) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  result = (double)((GfVec4d const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec4d_Normalize__SWIG_0(void * jarg1, double jarg2) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec4d_Normalize__SWIG_1(void * jarg1) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  result = (double)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_GetNormalized__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double arg2 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfVec4d const *)arg1)->GetNormalized(arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec4d_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1; 
  result = ((GfVec4d const *)arg1)->GetNormalized();
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfVec4d_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfVec4d_Equals((GfVec4d const &)*arg1,(GfVec4d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfVec4d_GetHashCode(void * jarg1) {
  int jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  int result;
  
  arg1 = (GfVec4d *)jarg1; 
  result = (int)GfVec4d_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfVec4d_GetValue(void * jarg1, int jarg2) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)GfVec4d_GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec4d_SetValue(void * jarg1, int jarg2, double jarg3) {
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  GfVec4d_SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec4d(void * jarg1) {
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  
  arg1 = (GfVec4d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompMult__SWIG_11(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = GfCompMult((GfVec4d const &)*arg1,(GfVec4d const &)*arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCompDiv__SWIG_11(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = GfCompDiv((GfVec4d const &)*arg1,(GfVec4d const &)*arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfDot__SWIG_11(void * jarg1, void * jarg2) {
  double jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (double)GfDot((GfVec4d const &)*arg1,(GfVec4d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfGetLength__SWIG_8(void * jarg1) {
  double jresult ;
  GfVec4d *arg1 = 0 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (double)GfGetLength((GfVec4d const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_16(void * jarg1, double jarg2) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)GfNormalize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfNormalize__SWIG_17(void * jarg1) {
  double jresult ;
  GfVec4d *arg1 = (GfVec4d *) 0 ;
  double result;
  
  arg1 = (GfVec4d *)jarg1; 
  result = (double)GfNormalize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_16(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  double arg2 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = GfGetNormalized((GfVec4d const &)*arg1,arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetNormalized__SWIG_17(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = GfGetNormalized((GfVec4d const &)*arg1);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetProjection__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = GfGetProjection((GfVec4d const &)*arg1,(GfVec4d const &)*arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfGetComplement__SWIG_8(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  GfVec4d result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = GfGetComplement((GfVec4d const &)*arg1,(GfVec4d const &)*arg2);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfIsClose__SWIG_14(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfVec4d *arg1 = 0 ;
  GfVec4d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)GfIsClose((GfVec4d const &)*arg1,(GfVec4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRotation__SWIG_0() {
  void * jresult ;
  GfRotation *result = 0 ;
  
  result = (GfRotation *)new GfRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRotation__SWIG_1(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  double arg2 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = (GfRotation *)new GfRotation((GfVec3d const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRotation__SWIG_2(void * jarg1) {
  void * jresult ;
  GfQuaternion *arg1 = 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  result = (GfRotation *)new GfRotation((GfQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRotation__SWIG_3(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfRotation *)new GfRotation((GfQuatd const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRotation__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfRotation *)new GfRotation((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_SetAxisAngle(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (GfRotation *) &(arg1)->SetAxisAngle((GfVec3d const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_SetQuat(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfQuatd *arg2 = 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfRotation *) &(arg1)->SetQuat((GfQuatd const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_SetQuaternion(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfQuaternion *arg2 = 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  result = (GfRotation *) &(arg1)->SetQuaternion((GfQuaternion const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_SetRotateInto(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfRotation *) &(arg1)->SetRotateInto((GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_SetIdentity(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  result = (GfRotation *) &(arg1)->SetIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_GetAxis(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  result = (GfVec3d *) &((GfRotation const *)arg1)->GetAxis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfRotation_GetAngle(void * jarg1) {
  double jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  double result;
  
  arg1 = (GfRotation *)jarg1; 
  result = (double)((GfRotation const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_GetQuaternion(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfQuaternion result;
  
  arg1 = (GfRotation *)jarg1; 
  result = ((GfRotation const *)arg1)->GetQuaternion();
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_GetQuat(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfQuatd result;
  
  arg1 = (GfRotation *)jarg1; 
  result = ((GfRotation const *)arg1)->GetQuat();
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_GetInverse(void * jarg1) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfRotation result;
  
  arg1 = (GfRotation *)jarg1; 
  result = ((GfRotation const *)arg1)->GetInverse();
  jresult = new GfRotation((const GfRotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_Decompose(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  GfVec3d result;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfRotation const *)arg1)->Decompose((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRotation_DecomposeRotation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double * jarg6, double * jarg7, double * jarg8, double * jarg9, unsigned int jarg10, double * jarg11) {
  GfMatrix4d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  bool arg10 ;
  double *arg11 = (double *) 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (double *)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (double *)jarg11; 
  GfRotation::DecomposeRotation((GfMatrix4d const &)*arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,(double const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRotation_DecomposeRotation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double * jarg6, double * jarg7, double * jarg8, double * jarg9, unsigned int jarg10) {
  GfMatrix4d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  bool arg10 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (double *)jarg9; 
  arg10 = jarg10 ? true : false; 
  GfRotation::DecomposeRotation((GfMatrix4d const &)*arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRotation_DecomposeRotation__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double * jarg6, double * jarg7, double * jarg8, double * jarg9) {
  GfMatrix4d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (double *)jarg9; 
  GfRotation::DecomposeRotation((GfMatrix4d const &)*arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRotation_DecomposeRotation__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5, double * jarg6, double * jarg7, double * jarg8) {
  GfMatrix4d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  arg8 = (double *)jarg8; 
  GfRotation::DecomposeRotation((GfMatrix4d const &)*arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_RotateOntoProjected(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfRotation result;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = GfRotation::RotateOntoProjected((GfVec3d const &)*arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = new GfRotation((const GfRotation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_TransformDir__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfVec3f *arg2 = 0 ;
  GfVec3f result;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = ((GfRotation const *)arg1)->TransformDir((GfVec3f const &)*arg2);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRotation_TransformDir__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfRotation *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfRotation const *)arg1)->TransformDir((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_25(void * jarg1) {
  unsigned long jresult ;
  GfRotation *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfRotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfRotation const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRotation_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRotation *arg1 = 0 ;
  GfRotation *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRotation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  result = (bool)GfRotation_Equals((GfRotation const &)*arg1,(GfRotation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfRotation_GetHashCode(void * jarg1) {
  int jresult ;
  GfRotation *arg1 = (GfRotation *) 0 ;
  int result;
  
  arg1 = (GfRotation *)jarg1; 
  result = (int)GfRotation_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfRotation(void * jarg1) {
  GfRotation *arg1 = (GfRotation *) 0 ;
  
  arg1 = (GfRotation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuaternion__SWIG_0() {
  void * jresult ;
  GfQuaternion *result = 0 ;
  
  result = (GfQuaternion *)new GfQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuaternion__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  GfQuaternion *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (GfQuaternion *)new GfQuaternion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuaternion__SWIG_2(double jarg1, void * jarg2) {
  void * jresult ;
  double arg1 ;
  GfVec3d *arg2 = 0 ;
  GfQuaternion *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfQuaternion *)new GfQuaternion(arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuaternion_SetReal(void * jarg1, double jarg2) {
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  double arg2 ;
  
  arg1 = (GfQuaternion *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetReal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuaternion_SetImaginary(void * jarg1, void * jarg2) {
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfQuaternion *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetImaginary((GfVec3d const &)*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuaternion_GetReal(void * jarg1) {
  double jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  double result;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = (double)((GfQuaternion const *)arg1)->GetReal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuaternion_GetImaginary(void * jarg1) {
  void * jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = (GfVec3d *) &((GfQuaternion const *)arg1)->GetImaginary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuaternion_GetIdentity() {
  void * jresult ;
  GfQuaternion result;
  
  result = GfQuaternion::GetIdentity();
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuaternion_GetLength(void * jarg1) {
  double jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  double result;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = (double)((GfQuaternion const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuaternion_GetNormalized__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  double arg2 ;
  GfQuaternion result;
  
  arg1 = (GfQuaternion *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfQuaternion const *)arg1)->GetNormalized(arg2);
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuaternion_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  GfQuaternion result;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = ((GfQuaternion const *)arg1)->GetNormalized();
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuaternion_Normalize__SWIG_0(void * jarg1, double jarg2) {
  double jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfQuaternion *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuaternion_Normalize__SWIG_1(void * jarg1) {
  double jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  double result;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = (double)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuaternion_GetInverse(void * jarg1) {
  void * jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  GfQuaternion result;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = ((GfQuaternion const *)arg1)->GetInverse();
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_26(void * jarg1) {
  unsigned long jresult ;
  GfQuaternion *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfQuaternion const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_3(double jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double arg1 ;
  GfQuaternion *arg2 = 0 ;
  GfQuaternion *arg3 = 0 ;
  GfQuaternion result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (GfQuaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  result = GfSlerp(arg1,(GfQuaternion const &)*arg2,(GfQuaternion const &)*arg3);
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_4(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  GfQuaternion *arg1 = 0 ;
  GfQuaternion *arg2 = 0 ;
  double arg3 ;
  GfQuaternion result;
  
  arg1 = (GfQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = GfSlerp((GfQuaternion const &)*arg1,(GfQuaternion const &)*arg2,arg3);
  jresult = new GfQuaternion((const GfQuaternion &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfQuaternion_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfQuaternion *arg1 = 0 ;
  GfQuaternion *arg2 = 0 ;
  bool result;
  
  arg1 = (GfQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuaternion const & type is null", 0);
    return 0;
  } 
  result = (bool)GfQuaternion_Equals((GfQuaternion const &)*arg1,(GfQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfQuaternion_GetHashCode(void * jarg1) {
  int jresult ;
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  int result;
  
  arg1 = (GfQuaternion *)jarg1; 
  result = (int)GfQuaternion_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfQuaternion(void * jarg1) {
  GfQuaternion *arg1 = (GfQuaternion *) 0 ;
  
  arg1 = (GfQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfQuath_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfQuath *arg1 = 0 ;
  GfQuath *arg2 = 0 ;
  bool result;
  
  arg1 = (GfQuath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuath const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuath const & type is null", 0);
    return 0;
  } 
  result = (bool)GfQuath_Equals((GfQuath const &)*arg1,(GfQuath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfQuath_GetHashCode(void * jarg1) {
  int jresult ;
  GfQuath *arg1 = (GfQuath *) 0 ;
  int result;
  
  arg1 = (GfQuath *)jarg1; 
  result = (int)GfQuath_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuath() {
  void * jresult ;
  GfQuath *result = 0 ;
  
  result = (GfQuath *)new GfQuath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfQuath(void * jarg1) {
  GfQuath *arg1 = (GfQuath *) 0 ;
  
  arg1 = (GfQuath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatf__SWIG_0() {
  void * jresult ;
  GfQuatf *result = 0 ;
  
  result = (GfQuatf *)new GfQuatf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatf__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  GfQuatf *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (GfQuatf *)new GfQuatf(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatf__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  GfQuatf *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (GfQuatf *)new GfQuatf(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatf__SWIG_3(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  GfVec3f *arg2 = 0 ;
  GfQuatf *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (GfQuatf *)new GfQuatf(arg1,(GfVec3f const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatf__SWIG_4(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = 0 ;
  GfQuatf *result = 0 ;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (GfQuatf *)new GfQuatf((GfQuatd const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatf__SWIG_5(void * jarg1) {
  void * jresult ;
  GfQuath *arg1 = 0 ;
  GfQuatf *result = 0 ;
  
  arg1 = (GfQuath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuath const & type is null", 0);
    return 0;
  } 
  result = (GfQuatf *)new GfQuatf((GfQuath const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatf_GetIdentity() {
  void * jresult ;
  GfQuatf result;
  
  result = GfQuatf::GetIdentity();
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfQuatf_GetReal(void * jarg1) {
  float jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = (float)((GfQuatf const *)arg1)->GetReal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuatf_SetReal(void * jarg1, float jarg2) {
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float arg2 ;
  
  arg1 = (GfQuatf *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetReal(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatf_GetImaginary(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  GfVec3f *result = 0 ;
  
  arg1 = (GfQuatf *)jarg1; 
  result = (GfVec3f *) &((GfQuatf const *)arg1)->GetImaginary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuatf_SetImaginary__SWIG_0(void * jarg1, void * jarg2) {
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  GfVec3f *arg2 = 0 ;
  
  arg1 = (GfQuatf *)jarg1; 
  arg2 = (GfVec3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  (arg1)->SetImaginary((GfVec3f const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuatf_SetImaginary__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (GfQuatf *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetImaginary(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfQuatf_GetLength(void * jarg1) {
  float jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = (float)((GfQuatf const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatf_GetNormalized__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float arg2 ;
  GfQuatf result;
  
  arg1 = (GfQuatf *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((GfQuatf const *)arg1)->GetNormalized(arg2);
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatf_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  GfQuatf result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = ((GfQuatf const *)arg1)->GetNormalized();
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfQuatf_Normalize__SWIG_0(void * jarg1, float jarg2) {
  float jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (GfQuatf *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfQuatf_Normalize__SWIG_1(void * jarg1) {
  float jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  float result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = (float)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatf_GetConjugate(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  GfQuatf result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = ((GfQuatf const *)arg1)->GetConjugate();
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatf_GetInverse(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  GfQuatf result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = ((GfQuatf const *)arg1)->GetInverse();
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_27(void * jarg1) {
  unsigned long jresult ;
  GfQuatf *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfQuatf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfQuatf const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfQuatf_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfQuatf *arg1 = 0 ;
  GfQuatf *arg2 = 0 ;
  bool result;
  
  arg1 = (GfQuatf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (bool)GfQuatf_Equals((GfQuatf const &)*arg1,(GfQuatf const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfQuatf_GetHashCode(void * jarg1) {
  int jresult ;
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  int result;
  
  arg1 = (GfQuatf *)jarg1; 
  result = (int)GfQuatf_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfQuatf(void * jarg1) {
  GfQuatf *arg1 = (GfQuatf *) 0 ;
  
  arg1 = (GfQuatf *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_5(double jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double arg1 ;
  GfQuatf *arg2 = 0 ;
  GfQuatf *arg3 = 0 ;
  GfQuatf result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  arg3 = (GfQuatf *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = GfSlerp(arg1,(GfQuatf const &)*arg2,(GfQuatf const &)*arg3);
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_6(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  GfQuatf *arg1 = 0 ;
  GfQuatf *arg2 = 0 ;
  double arg3 ;
  GfQuatf result;
  
  arg1 = (GfQuatf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = GfSlerp((GfQuatf const &)*arg1,(GfQuatf const &)*arg2,arg3);
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatd__SWIG_0() {
  void * jresult ;
  GfQuatd *result = 0 ;
  
  result = (GfQuatd *)new GfQuatd();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatd__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  GfQuatd *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (GfQuatd *)new GfQuatd(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatd__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  GfQuatd *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (GfQuatd *)new GfQuatd(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatd__SWIG_3(double jarg1, void * jarg2) {
  void * jresult ;
  double arg1 ;
  GfVec3d *arg2 = 0 ;
  GfQuatd *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfQuatd *)new GfQuatd(arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatd__SWIG_4(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = 0 ;
  GfQuatd *result = 0 ;
  
  arg1 = (GfQuatf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (GfQuatd *)new GfQuatd((GfQuatf const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfQuatd__SWIG_5(void * jarg1) {
  void * jresult ;
  GfQuath *arg1 = 0 ;
  GfQuatd *result = 0 ;
  
  arg1 = (GfQuath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuath const & type is null", 0);
    return 0;
  } 
  result = (GfQuatd *)new GfQuatd((GfQuath const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatd_GetIdentity() {
  void * jresult ;
  GfQuatd result;
  
  result = GfQuatd::GetIdentity();
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuatd_GetReal(void * jarg1) {
  double jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = (double)((GfQuatd const *)arg1)->GetReal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuatd_SetReal(void * jarg1, double jarg2) {
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double arg2 ;
  
  arg1 = (GfQuatd *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetReal(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatd_GetImaginary(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfQuatd *)jarg1; 
  result = (GfVec3d *) &((GfQuatd const *)arg1)->GetImaginary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuatd_SetImaginary__SWIG_0(void * jarg1, void * jarg2) {
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfQuatd *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetImaginary((GfVec3d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfQuatd_SetImaginary__SWIG_1(void * jarg1, double jarg2, double jarg3, double jarg4) {
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (GfQuatd *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetImaginary(arg2,arg3,arg4);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuatd_GetLength(void * jarg1) {
  double jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = (double)((GfQuatd const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatd_GetNormalized__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double arg2 ;
  GfQuatd result;
  
  arg1 = (GfQuatd *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfQuatd const *)arg1)->GetNormalized(arg2);
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatd_GetNormalized__SWIG_1(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  GfQuatd result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = ((GfQuatd const *)arg1)->GetNormalized();
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuatd_Normalize__SWIG_0(void * jarg1, double jarg2) {
  double jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (GfQuatd *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->Normalize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfQuatd_Normalize__SWIG_1(void * jarg1) {
  double jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  double result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = (double)(arg1)->Normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatd_GetConjugate(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  GfQuatd result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = ((GfQuatd const *)arg1)->GetConjugate();
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfQuatd_GetInverse(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  GfQuatd result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = ((GfQuatd const *)arg1)->GetInverse();
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_28(void * jarg1) {
  unsigned long jresult ;
  GfQuatd *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfQuatd const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfQuatd_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfQuatd *arg1 = 0 ;
  GfQuatd *arg2 = 0 ;
  bool result;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (bool)GfQuatd_Equals((GfQuatd const &)*arg1,(GfQuatd const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfQuatd_GetHashCode(void * jarg1) {
  int jresult ;
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  int result;
  
  arg1 = (GfQuatd *)jarg1; 
  result = (int)GfQuatd_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfQuatd(void * jarg1) {
  GfQuatd *arg1 = (GfQuatd *) 0 ;
  
  arg1 = (GfQuatd *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_7(double jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  double arg1 ;
  GfQuatd *arg2 = 0 ;
  GfQuatd *arg3 = 0 ;
  GfQuatd result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  arg3 = (GfQuatd *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = GfSlerp(arg1,(GfQuatd const &)*arg2,(GfQuatd const &)*arg3);
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfSlerp__SWIG_8(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  GfQuatd *arg1 = 0 ;
  GfQuatd *arg2 = 0 ;
  double arg3 ;
  GfQuatd result;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuatd *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = GfSlerp((GfQuatd const &)*arg1,(GfQuatd const &)*arg2,arg3);
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRay__SWIG_0() {
  void * jresult ;
  GfRay *result = 0 ;
  
  result = (GfRay *)new GfRay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfRay__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfRay *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfRay *)new GfRay((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRay_SetPointAndDirection(void * jarg1, void * jarg2, void * jarg3) {
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetPointAndDirection((GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfRay_SetEnds(void * jarg1, void * jarg2, void * jarg3) {
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetEnds((GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRay_GetStartPoint(void * jarg1) {
  void * jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfRay *)jarg1; 
  result = (GfVec3d *) &((GfRay const *)arg1)->GetStartPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRay_GetDirection(void * jarg1) {
  void * jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfRay *)jarg1; 
  result = (GfVec3d *) &((GfRay const *)arg1)->GetDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRay_GetPoint(void * jarg1, double jarg2) {
  void * jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  double arg2 ;
  GfVec3d result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfRay const *)arg1)->GetPoint(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRay_Transform(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  GfRay *result = 0 ;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (GfRay *) &(arg1)->Transform((GfMatrix4d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRay_FindClosestPoint__SWIG_0(void * jarg1, void * jarg2, double * jarg3) {
  void * jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  GfVec3d result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  result = ((GfRay const *)arg1)->FindClosestPoint((GfVec3d const &)*arg2,arg3);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfRay_FindClosestPoint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfRay const *)arg1)->FindClosestPoint((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double * jarg5, void * jarg6, unsigned int * jarg7, double jarg8) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  GfVec3d *arg6 = (GfVec3d *) 0 ;
  bool *arg7 = (bool *) 0 ;
  double arg8 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg5 = (double *)jarg5; 
  arg6 = (GfVec3d *)jarg6; 
  *jarg7 = 0; 
  arg7 = (bool *)jarg7; 
  arg8 = (double)jarg8; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double * jarg5, void * jarg6, unsigned int * jarg7) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  GfVec3d *arg6 = (GfVec3d *) 0 ;
  bool *arg7 = (bool *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg5 = (double *)jarg5; 
  arg6 = (GfVec3d *)jarg6; 
  *jarg7 = 0; 
  arg7 = (bool *)jarg7; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double * jarg5, void * jarg6) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  GfVec3d *arg6 = (GfVec3d *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg5 = (double *)jarg5; 
  arg6 = (GfVec3d *)jarg6; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double * jarg5) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg5 = (double *)jarg5; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_5(void * jarg1, void * jarg2, double * jarg3, unsigned int * jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfPlane *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfPlane const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  *jarg4 = 0; 
  arg4 = (bool *)jarg4; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfPlane const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_6(void * jarg1, void * jarg2, double * jarg3) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfPlane *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfPlane const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfPlane const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_7(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfPlane *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfPlane const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRay const *)arg1)->Intersect((GfPlane const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_8(void * jarg1, void * jarg2, double * jarg3, double * jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfRange3d *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfRange3d const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_9(void * jarg1, void * jarg2, double * jarg3) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfRange3d *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfRange3d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_10(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfRange3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfRay const *)arg1)->Intersect((GfRange3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_11(void * jarg1, void * jarg2, double jarg3, double * jarg4, double * jarg5) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_12(void * jarg1, void * jarg2, double jarg3, double * jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_13(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_14(void * jarg1, void * jarg2, void * jarg3, double jarg4, double * jarg5, double * jarg6) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_15(void * jarg1, void * jarg2, void * jarg3, double jarg4, double * jarg5) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_16(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_17(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double * jarg6, double * jarg7) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_18(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5, double * jarg6) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Intersect__SWIG_19(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5) {
  unsigned int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (GfRay *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)((GfRay const *)arg1)->Intersect((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLine *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLine const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLineSeg *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLineSeg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLineSeg const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfRay_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfRay *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRay *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  result = (bool)GfRay_Equals((GfRay const &)*arg1,(GfRay const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfRay_GetHashCode(void * jarg1) {
  int jresult ;
  GfRay *arg1 = (GfRay *) 0 ;
  int result;
  
  arg1 = (GfRay *)jarg1; 
  result = (int)GfRay_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfRay(void * jarg1) {
  GfRay *arg1 = (GfRay *) 0 ;
  
  arg1 = (GfRay *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double * jarg5) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLine *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLine const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLine *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLine const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLine *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLine const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLine *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLine const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double * jarg5) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLineSeg *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLineSeg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLineSeg const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLineSeg *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLineSeg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLineSeg const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLineSeg *arg2 = 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLineSeg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3; 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLineSeg const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFindClosestPoints__SWIG_9(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfRay *arg1 = 0 ;
  GfLineSeg *arg2 = 0 ;
  bool result;
  
  arg1 = (GfRay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRay const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLineSeg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  result = (bool)GfFindClosestPoints((GfRay const &)*arg1,(GfLineSeg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfLine__SWIG_0() {
  void * jresult ;
  GfLine *result = 0 ;
  
  result = (GfLine *)new GfLine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfLine__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfLine *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfLine *)new GfLine((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfLine_Set(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  GfLine *arg1 = (GfLine *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  double result;
  
  arg1 = (GfLine *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (double)(arg1)->Set((GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLine_GetPoint(void * jarg1, double jarg2) {
  void * jresult ;
  GfLine *arg1 = (GfLine *) 0 ;
  double arg2 ;
  GfVec3d result;
  
  arg1 = (GfLine *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfLine const *)arg1)->GetPoint(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLine_GetDirection(void * jarg1) {
  void * jresult ;
  GfLine *arg1 = (GfLine *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfLine *)jarg1; 
  result = (GfVec3d *) &((GfLine const *)arg1)->GetDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLine_FindClosestPoint__SWIG_0(void * jarg1, void * jarg2, double * jarg3) {
  void * jresult ;
  GfLine *arg1 = (GfLine *) 0 ;
  GfVec3d *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  GfVec3d result;
  
  arg1 = (GfLine *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  result = ((GfLine const *)arg1)->FindClosestPoint((GfVec3d const &)*arg2,arg3);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLine_FindClosestPoint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfLine *arg1 = (GfLine *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfLine *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfLine const *)arg1)->FindClosestPoint((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfLine_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfLine *arg1 = 0 ;
  GfLine *arg2 = 0 ;
  bool result;
  
  arg1 = (GfLine *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLine *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLine const & type is null", 0);
    return 0;
  } 
  result = (bool)GfLine_Equals((GfLine const &)*arg1,(GfLine const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfLine_GetHashCode(void * jarg1) {
  int jresult ;
  GfLine *arg1 = (GfLine *) 0 ;
  int result;
  
  arg1 = (GfLine *)jarg1; 
  result = (int)GfLine_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfLine(void * jarg1) {
  GfLine *arg1 = (GfLine *) 0 ;
  
  arg1 = (GfLine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfLineSeg__SWIG_0() {
  void * jresult ;
  GfLineSeg *result = 0 ;
  
  result = (GfLineSeg *)new GfLineSeg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfLineSeg__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfLineSeg *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfLineSeg *)new GfLineSeg((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLineSeg_GetPoint(void * jarg1, double jarg2) {
  void * jresult ;
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  double arg2 ;
  GfVec3d result;
  
  arg1 = (GfLineSeg *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfLineSeg const *)arg1)->GetPoint(arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLineSeg_GetDirection(void * jarg1) {
  void * jresult ;
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfLineSeg *)jarg1; 
  result = (GfVec3d *) &((GfLineSeg const *)arg1)->GetDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfLineSeg_GetLength(void * jarg1) {
  double jresult ;
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  double result;
  
  arg1 = (GfLineSeg *)jarg1; 
  result = (double)((GfLineSeg const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLineSeg_FindClosestPoint__SWIG_0(void * jarg1, void * jarg2, double * jarg3) {
  void * jresult ;
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  GfVec3d *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  GfVec3d result;
  
  arg1 = (GfLineSeg *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (double *)jarg3; 
  result = ((GfLineSeg const *)arg1)->FindClosestPoint((GfVec3d const &)*arg2,arg3);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfLineSeg_FindClosestPoint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfLineSeg *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfLineSeg const *)arg1)->FindClosestPoint((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfLineSeg_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfLineSeg *arg1 = 0 ;
  GfLineSeg *arg2 = 0 ;
  bool result;
  
  arg1 = (GfLineSeg *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  arg2 = (GfLineSeg *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfLineSeg const & type is null", 0);
    return 0;
  } 
  result = (bool)GfLineSeg_Equals((GfLineSeg const &)*arg1,(GfLineSeg const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfLineSeg_GetHashCode(void * jarg1) {
  int jresult ;
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  int result;
  
  arg1 = (GfLineSeg *)jarg1; 
  result = (int)GfLineSeg_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfLineSeg(void * jarg1) {
  GfLineSeg *arg1 = (GfLineSeg *) 0 ;
  
  arg1 = (GfLineSeg *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfPlane__SWIG_0() {
  void * jresult ;
  GfPlane *result = 0 ;
  
  result = (GfPlane *)new GfPlane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfPlane__SWIG_1(void * jarg1, double jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  double arg2 ;
  GfPlane *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = (GfPlane *)new GfPlane((GfVec3d const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfPlane__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfPlane *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfPlane *)new GfPlane((GfVec3d const &)*arg1,(GfVec3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfPlane__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfPlane *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (GfPlane *)new GfPlane((GfVec3d const &)*arg1,(GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfPlane__SWIG_4(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  GfPlane *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (GfPlane *)new GfPlane((GfVec4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfPlane_Set__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->Set((GfVec3d const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfPlane_Set__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->Set((GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfPlane_Set__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->Set((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfPlane_Set__SWIG_3(void * jarg1, void * jarg2) {
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec4d *arg2 = 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return ;
  } 
  (arg1)->Set((GfVec4d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfPlane_GetNormal(void * jarg1) {
  void * jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  result = (GfVec3d *) &((GfPlane const *)arg1)->GetNormal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfPlane_GetDistanceFromOrigin(void * jarg1) {
  double jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  double result;
  
  arg1 = (GfPlane *)jarg1; 
  result = (double)((GfPlane const *)arg1)->GetDistanceFromOrigin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfPlane_GetEquation(void * jarg1) {
  void * jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec4d result;
  
  arg1 = (GfPlane *)jarg1; 
  result = ((GfPlane const *)arg1)->GetEquation();
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfPlane_GetDistance(void * jarg1, void * jarg2) {
  double jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  double result;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (double)((GfPlane const *)arg1)->GetDistance((GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfPlane_Project(void * jarg1, void * jarg2) {
  void * jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d result;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfPlane const *)arg1)->Project((GfVec3d const &)*arg2);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfPlane_Transform(void * jarg1, void * jarg2) {
  void * jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  GfPlane *result = 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (GfPlane *) &(arg1)->Transform((GfMatrix4d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfPlane_Reorient(void * jarg1, void * jarg2) {
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->Reorient((GfVec3d const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfPlane_IntersectsPositiveHalfSpace__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfRange3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfRange3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfPlane const *)arg1)->IntersectsPositiveHalfSpace((GfRange3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfPlane_IntersectsPositiveHalfSpace__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  GfVec3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfPlane *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfPlane const *)arg1)->IntersectsPositiveHalfSpace((GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfPlane_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfPlane *arg1 = 0 ;
  GfPlane *arg2 = 0 ;
  bool result;
  
  arg1 = (GfPlane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfPlane const & type is null", 0);
    return 0;
  } 
  arg2 = (GfPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfPlane const & type is null", 0);
    return 0;
  } 
  result = (bool)GfPlane_Equals((GfPlane const &)*arg1,(GfPlane const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfPlane_GetHashCode(void * jarg1) {
  int jresult ;
  GfPlane *arg1 = (GfPlane *) 0 ;
  int result;
  
  arg1 = (GfPlane *)jarg1; 
  result = (int)GfPlane_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfPlane(void * jarg1) {
  GfPlane *arg1 = (GfPlane *) 0 ;
  
  arg1 = (GfPlane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_Clear(void * jarg1) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_Add(void * jarg1, void * jarg2) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((GfVec3d const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec3dVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  std::vector< GfVec3d >::size_type result;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  result = ((std::vector< GfVec3d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_GfVec3dVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  std::vector< GfVec3d >::size_type result;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  result = ((std::vector< GfVec3d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  std::vector< GfVec3d >::size_type arg2 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (std::vector< GfVec3d >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3dVector__SWIG_0() {
  void * jresult ;
  std::vector< GfVec3d > *result = 0 ;
  
  result = (std::vector< GfVec3d > *)new std::vector< GfVec3d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3dVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< GfVec3d > *arg1 = 0 ;
  std::vector< GfVec3d > *result = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec3d > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< GfVec3d > *)new std::vector< GfVec3d >((std::vector< GfVec3d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfVec3dVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< GfVec3d > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< GfVec3d > *)new_std_vector_Sl_GfVec3d_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3dVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  GfVec3d result;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_GfVec3d_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3dVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  GfVec3d *result = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (GfVec3d *) &std_vector_Sl_GfVec3d_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec3d_Sg__setitem(arg1,arg2,(GfVec3d const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  std::vector< GfVec3d > *arg2 = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (std::vector< GfVec3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec3d > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_GfVec3d_Sg__AddRange(arg1,(std::vector< GfVec3d > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3dVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< GfVec3d > *result = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< GfVec3d > *)std_vector_Sl_GfVec3d_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec3d_Sg__Insert(arg1,arg2,(GfVec3d const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  std::vector< GfVec3d > *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< GfVec3d > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec3d > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec3d_Sg__InsertRange(arg1,arg2,(std::vector< GfVec3d > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_GfVec3d_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_GfVec3d_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfVec3dVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  int arg2 ;
  std::vector< GfVec3d > *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< GfVec3d > *)std_vector_Sl_GfVec3d_Sg__Repeat((GfVec3d const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  std_vector_Sl_GfVec3d_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_GfVec3d_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfVec3dVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  int arg2 ;
  std::vector< GfVec3d > *arg3 = 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< GfVec3d > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec3d > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_GfVec3d_Sg__SetRange(arg1,arg2,(std::vector< GfVec3d > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfVec3dVector(void * jarg1) {
  std::vector< GfVec3d > *arg1 = (std::vector< GfVec3d > *) 0 ;
  
  arg1 = (std::vector< GfVec3d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfFrustum__SWIG_0() {
  void * jresult ;
  GfFrustum *result = 0 ;
  
  result = (GfFrustum *)new GfFrustum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfFrustum__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, double jarg6) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfRotation *arg2 = 0 ;
  GfRange2d *arg3 = 0 ;
  GfRange1d *arg4 = 0 ;
  GfFrustum::ProjectionType arg5 ;
  double arg6 ;
  GfFrustum *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg3 = (GfRange2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfRange1d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg5 = (GfFrustum::ProjectionType)jarg5; 
  arg6 = (double)jarg6; 
  result = (GfFrustum *)new GfFrustum((GfVec3d const &)*arg1,(GfRotation const &)*arg2,(GfRange2d const &)*arg3,(GfRange1d const &)*arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfFrustum__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  GfRotation *arg2 = 0 ;
  GfRange2d *arg3 = 0 ;
  GfRange1d *arg4 = 0 ;
  GfFrustum::ProjectionType arg5 ;
  GfFrustum *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return 0;
  } 
  arg3 = (GfRange2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfRange1d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg5 = (GfFrustum::ProjectionType)jarg5; 
  result = (GfFrustum *)new GfFrustum((GfVec3d const &)*arg1,(GfRotation const &)*arg2,(GfRange2d const &)*arg3,(GfRange1d const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfFrustum__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4, double jarg5) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange1d *arg3 = 0 ;
  GfFrustum::ProjectionType arg4 ;
  double arg5 ;
  GfFrustum *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfRange1d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfFrustum::ProjectionType)jarg4; 
  arg5 = (double)jarg5; 
  result = (GfFrustum *)new GfFrustum((GfMatrix4d const &)*arg1,(GfRange2d const &)*arg2,(GfRange1d const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfFrustum__SWIG_4(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfRange2d *arg2 = 0 ;
  GfRange1d *arg3 = 0 ;
  GfFrustum::ProjectionType arg4 ;
  GfFrustum *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfRange1d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfFrustum::ProjectionType)jarg4; 
  result = (GfFrustum *)new GfFrustum((GfMatrix4d const &)*arg1,(GfRange2d const &)*arg2,(GfRange1d const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_29(void * jarg1) {
  unsigned long jresult ;
  GfFrustum *arg1 = 0 ;
  size_t result;
  
  arg1 = (GfFrustum *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfFrustum const & type is null", 0);
    return 0;
  } 
  result = hash_value((GfFrustum const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfFrustum(void * jarg1) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetPosition(void * jarg1, void * jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((GfVec3d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_GetPosition(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *result = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (GfVec3d *) &((GfFrustum const *)arg1)->GetPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetRotation(void * jarg1, void * jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfRotation *arg2 = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfRotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRotation const & type is null", 0);
    return ;
  } 
  (arg1)->SetRotation((GfRotation const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_GetRotation(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfRotation *result = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (GfRotation *) &((GfFrustum const *)arg1)->GetRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetPositionAndRotationFromMatrix(void * jarg1, void * jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  (arg1)->SetPositionAndRotationFromMatrix((GfMatrix4d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetWindow(void * jarg1, void * jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfRange2d *arg2 = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfRange2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange2d const & type is null", 0);
    return ;
  } 
  (arg1)->SetWindow((GfRange2d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_GetWindow(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfRange2d *result = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (GfRange2d *) &((GfFrustum const *)arg1)->GetWindow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfFrustum_GetReferencePlaneDepth() {
  double jresult ;
  double result;
  
  result = (double)GfFrustum::GetReferencePlaneDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetNearFar(void * jarg1, void * jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfRange1d *arg2 = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfRange1d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1d const & type is null", 0);
    return ;
  } 
  (arg1)->SetNearFar((GfRange1d const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_GetNearFar(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfRange1d *result = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (GfRange1d *) &((GfFrustum const *)arg1)->GetNearFar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetViewDistance(void * jarg1, double jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double arg2 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetViewDistance(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfFrustum_GetViewDistance(void * jarg1) {
  double jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (double)((GfFrustum const *)arg1)->GetViewDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetProjectionType(void * jarg1, int jarg2) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfFrustum::ProjectionType arg2 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfFrustum::ProjectionType)jarg2; 
  (arg1)->SetProjectionType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfFrustum_GetProjectionType(void * jarg1) {
  int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfFrustum::ProjectionType result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (GfFrustum::ProjectionType)((GfFrustum const *)arg1)->GetProjectionType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetPerspective__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->SetPerspective(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetPerspective__SWIG_1(void * jarg1, double jarg2, unsigned int jarg3, double jarg4, double jarg5, double jarg6) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double arg2 ;
  bool arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->SetPerspective(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_GetPerspective__SWIG_0(void * jarg1, double * jarg2, double * jarg3, double * jarg4, double * jarg5) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)((GfFrustum const *)arg1)->GetPerspective(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_GetPerspective__SWIG_1(void * jarg1, unsigned int jarg2, double * jarg3, double * jarg4, double * jarg5, double * jarg6) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  result = (bool)((GfFrustum const *)arg1)->GetPerspective(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfFrustum_GetFOV__SWIG_0(void * jarg1, unsigned int jarg2) {
  double jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  bool arg2 ;
  double result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->GetFOV(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfFrustum_GetFOV__SWIG_1(void * jarg1) {
  double jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (double)(arg1)->GetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_SetOrthographic(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->SetOrthographic(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_GetOrthographic(void * jarg1, double * jarg2, double * jarg3, double * jarg4, double * jarg5, double * jarg6, double * jarg7) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  result = (bool)((GfFrustum const *)arg1)->GetOrthographic(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_FitToSphere__SWIG_0(void * jarg1, void * jarg2, double jarg3, double jarg4) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->FitToSphere((GfVec3d const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_FitToSphere__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->FitToSphere((GfVec3d const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_Transform(void * jarg1, void * jarg2) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  GfFrustum *result = 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (GfFrustum *) &(arg1)->Transform((GfMatrix4d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeViewDirection(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeViewDirection();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeUpVector(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeUpVector();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeViewFrame(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  GfVec3d *arg3 = (GfVec3d *) 0 ;
  GfVec3d *arg4 = (GfVec3d *) 0 ;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2; 
  arg3 = (GfVec3d *)jarg3; 
  arg4 = (GfVec3d *)jarg4; 
  ((GfFrustum const *)arg1)->ComputeViewFrame(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeLookAtPoint(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeLookAtPoint();
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeViewMatrix(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeViewMatrix();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeViewInverse(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeViewInverse();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeProjectionMatrix(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeProjectionMatrix();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeAspectRatio(void * jarg1) {
  double jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (double)((GfFrustum const *)arg1)->ComputeAspectRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeCorners(void * jarg1) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  std::vector< GfVec3d > result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = ((GfFrustum const *)arg1)->ComputeCorners();
  jresult = new std::vector< GfVec3d >((const std::vector< GfVec3d > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeCornersAtDistance(void * jarg1, double jarg2) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  double arg2 ;
  std::vector< GfVec3d > result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((GfFrustum const *)arg1)->ComputeCornersAtDistance(arg2);
  jresult = new std::vector< GfVec3d >((const std::vector< GfVec3d > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeNarrowedFrustum__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfVec2d *arg3 = 0 ;
  GfFrustum result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = ((GfFrustum const *)arg1)->ComputeNarrowedFrustum((GfVec2d const &)*arg2,(GfVec2d const &)*arg3);
  jresult = new GfFrustum((const GfFrustum &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeNarrowedFrustum__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec2d *arg3 = 0 ;
  GfFrustum result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = ((GfFrustum const *)arg1)->ComputeNarrowedFrustum((GfVec3d const &)*arg2,(GfVec2d const &)*arg3);
  jresult = new GfFrustum((const GfFrustum &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeRay__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfRay result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = ((GfFrustum const *)arg1)->ComputeRay((GfVec2d const &)*arg2);
  jresult = new GfRay((const GfRay &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputeRay__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfRay result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfFrustum const *)arg1)->ComputeRay((GfVec3d const &)*arg2);
  jresult = new GfRay((const GfRay &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputePickRay__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec2d *arg2 = 0 ;
  GfRay result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec2d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = ((GfFrustum const *)arg1)->ComputePickRay((GfVec2d const &)*arg2);
  jresult = new GfRay((const GfRay &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfFrustum_ComputePickRay__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfRay result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = ((GfFrustum const *)arg1)->ComputePickRay((GfVec3d const &)*arg2);
  jresult = new GfRay((const GfRay &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_Intersects__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfBBox3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfBBox3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfFrustum const *)arg1)->Intersects((GfBBox3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_Intersects__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfFrustum const *)arg1)->Intersects((GfVec3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_Intersects__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfFrustum const *)arg1)->Intersects((GfVec3d const &)*arg2,(GfVec3d const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_Intersects__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  GfVec3d *arg2 = 0 ;
  GfVec3d *arg3 = 0 ;
  GfVec3d *arg4 = 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1; 
  arg2 = (GfVec3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  arg4 = (GfVec3d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (bool)((GfFrustum const *)arg1)->Intersects((GfVec3d const &)*arg2,(GfVec3d const &)*arg3,(GfVec3d const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_IntersectsViewVolume(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfBBox3d *arg1 = 0 ;
  GfMatrix4d *arg2 = 0 ;
  bool result;
  
  arg1 = (GfBBox3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfBBox3d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (bool)GfFrustum::IntersectsViewVolume((GfBBox3d const &)*arg1,(GfMatrix4d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfFrustum_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfFrustum *arg1 = 0 ;
  GfFrustum *arg2 = 0 ;
  bool result;
  
  arg1 = (GfFrustum *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfFrustum const & type is null", 0);
    return 0;
  } 
  arg2 = (GfFrustum *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfFrustum const & type is null", 0);
    return 0;
  } 
  result = (bool)GfFrustum_Equals((GfFrustum const &)*arg1,(GfFrustum const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfFrustum_GetHashCode(void * jarg1) {
  int jresult ;
  GfFrustum *arg1 = (GfFrustum *) 0 ;
  int result;
  
  arg1 = (GfFrustum *)jarg1; 
  result = (int)GfFrustum_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfCamera_APERTURE_UNIT_get() {
  double jresult ;
  double result;
  
  result = (double)(double)GfCamera::APERTURE_UNIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfCamera_FOCAL_LENGTH_UNIT_get() {
  double jresult ;
  double result;
  
  result = (double)(double)GfCamera::FOCAL_LENGTH_UNIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfCamera_DEFAULT_HORIZONTAL_APERTURE_get() {
  double jresult ;
  double result;
  
  result = (double)(double)GfCamera::DEFAULT_HORIZONTAL_APERTURE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_GfCamera_DEFAULT_VERTICAL_APERTURE_get() {
  double jresult ;
  double result;
  
  result = (double)(double)GfCamera::DEFAULT_VERTICAL_APERTURE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, void * jarg8, void * jarg9, float jarg10, float jarg11) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  GfRange1f *arg8 = 0 ;
  std::vector< GfVec4f > *arg9 = 0 ;
  float arg10 ;
  float arg11 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (GfRange1f *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg9 = (std::vector< GfVec4f > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return 0;
  } 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,(GfRange1f const &)*arg8,(std::vector< GfVec4f > const &)*arg9,arg10,arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, void * jarg8, void * jarg9, float jarg10) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  GfRange1f *arg8 = 0 ;
  std::vector< GfVec4f > *arg9 = 0 ;
  float arg10 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (GfRange1f *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg9 = (std::vector< GfVec4f > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return 0;
  } 
  arg10 = (float)jarg10; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,(GfRange1f const &)*arg8,(std::vector< GfVec4f > const &)*arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_2(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  GfRange1f *arg8 = 0 ;
  std::vector< GfVec4f > *arg9 = 0 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (GfRange1f *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  arg9 = (std::vector< GfVec4f > *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return 0;
  } 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,(GfRange1f const &)*arg8,(std::vector< GfVec4f > const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_3(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, void * jarg8) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  GfRange1f *arg8 = 0 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (GfRange1f *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return 0;
  } 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,(GfRange1f const &)*arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_4(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_5(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_6(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_7(void * jarg1, int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  float arg4 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_8(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  float arg3 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  arg3 = (float)jarg3; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_9(void * jarg1, int jarg2) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera::Projection arg2 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera::Projection)jarg2; 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_10(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfCamera *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (GfCamera *)new GfCamera((GfMatrix4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_GfCamera__SWIG_11() {
  void * jresult ;
  GfCamera *result = 0 ;
  
  result = (GfCamera *)new GfCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetTransform(void * jarg1, void * jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  (arg1)->SetTransform((GfMatrix4d const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetProjection(void * jarg1, int jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfCamera::Projection *arg2 = 0 ;
  GfCamera::Projection temp2 ;
  
  arg1 = (GfCamera *)jarg1; 
  temp2 = (GfCamera::Projection)jarg2; 
  arg2 = &temp2; 
  (arg1)->SetProjection((GfCamera::Projection const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetFocalLength(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFocalLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetHorizontalAperture(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHorizontalAperture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetVerticalAperture(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVerticalAperture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetHorizontalApertureOffset(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHorizontalApertureOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetVerticalApertureOffset(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVerticalApertureOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetPerspectiveFromAspectRatioAndFieldOfView__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4, float jarg5) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  GfCamera::FOVDirection arg4 ;
  float arg5 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (GfCamera::FOVDirection)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetPerspectiveFromAspectRatioAndFieldOfView(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetPerspectiveFromAspectRatioAndFieldOfView__SWIG_1(void * jarg1, float jarg2, float jarg3, int jarg4) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  GfCamera::FOVDirection arg4 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (GfCamera::FOVDirection)jarg4; 
  (arg1)->SetPerspectiveFromAspectRatioAndFieldOfView(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetOrthographicFromAspectRatioAndSize(void * jarg1, float jarg2, float jarg3, int jarg4) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  GfCamera::FOVDirection arg4 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (GfCamera::FOVDirection)jarg4; 
  (arg1)->SetOrthographicFromAspectRatioAndSize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetClippingRange(void * jarg1, void * jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfRange1f *arg2 = 0 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (GfRange1f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfRange1f const & type is null", 0);
    return ;
  } 
  (arg1)->SetClippingRange((GfRange1f const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetClippingPlanes(void * jarg1, void * jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  std::vector< GfVec4f > *arg2 = 0 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (std::vector< GfVec4f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< GfVec4f > const & type is null", 0);
    return ;
  } 
  (arg1)->SetClippingPlanes((std::vector< GfVec4f > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetFStop(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFStop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GfCamera_SetFocusDistance(void * jarg1, float jarg2) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  float arg2 ;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFocusDistance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCamera_GetTransform(void * jarg1) {
  void * jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfMatrix4d result;
  
  arg1 = (GfCamera *)jarg1; 
  result = ((GfCamera const *)arg1)->GetTransform();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfCamera_GetProjection(void * jarg1) {
  int jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfCamera::Projection result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (GfCamera::Projection)((GfCamera const *)arg1)->GetProjection();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetHorizontalAperture(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetHorizontalAperture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetVerticalAperture(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetVerticalAperture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetHorizontalApertureOffset(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetHorizontalApertureOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetVerticalApertureOffset(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetVerticalApertureOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetAspectRatio(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetAspectRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetFocalLength(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetFocalLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetFieldOfView(void * jarg1, int jarg2) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfCamera::FOVDirection arg2 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  arg2 = (GfCamera::FOVDirection)jarg2; 
  result = (float)((GfCamera const *)arg1)->GetFieldOfView(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCamera_GetClippingRange(void * jarg1) {
  void * jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfRange1f result;
  
  arg1 = (GfCamera *)jarg1; 
  result = ((GfCamera const *)arg1)->GetClippingRange();
  jresult = new GfRange1f((const GfRange1f &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCamera_GetClippingPlanes(void * jarg1) {
  void * jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  std::vector< GfVec4f > *result = 0 ;
  
  arg1 = (GfCamera *)jarg1; 
  result = (std::vector< GfVec4f > *) &((GfCamera const *)arg1)->GetClippingPlanes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GfCamera_GetFrustum(void * jarg1) {
  void * jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  GfFrustum result;
  
  arg1 = (GfCamera *)jarg1; 
  result = ((GfCamera const *)arg1)->GetFrustum();
  jresult = new GfFrustum((const GfFrustum &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetFStop(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetFStop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_GfCamera_GetFocusDistance(void * jarg1) {
  float jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  float result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (float)((GfCamera const *)arg1)->GetFocusDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_GfCamera_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  GfCamera *arg1 = 0 ;
  GfCamera *arg2 = 0 ;
  bool result;
  
  arg1 = (GfCamera *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfCamera const & type is null", 0);
    return 0;
  } 
  arg2 = (GfCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfCamera const & type is null", 0);
    return 0;
  } 
  result = (bool)GfCamera_Equals((GfCamera const &)*arg1,(GfCamera const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_GfCamera_GetHashCode(void * jarg1) {
  int jresult ;
  GfCamera *arg1 = (GfCamera *) 0 ;
  int result;
  
  arg1 = (GfCamera *)jarg1; 
  result = (int)GfCamera_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_GfCamera(void * jarg1) {
  GfCamera *arg1 = (GfCamera *) 0 ;
  
  arg1 = (GfCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Vt_ArrayForeignDataSource__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  void (*arg1)(Vt_ArrayForeignDataSource *) = (void (*)(Vt_ArrayForeignDataSource *)) 0 ;
  size_t arg2 ;
  Vt_ArrayForeignDataSource *result = 0 ;
  
  arg1 = (void (*)(Vt_ArrayForeignDataSource *))jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Vt_ArrayForeignDataSource *)new Vt_ArrayForeignDataSource(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Vt_ArrayForeignDataSource__SWIG_1(void * jarg1) {
  void * jresult ;
  void (*arg1)(Vt_ArrayForeignDataSource *) = (void (*)(Vt_ArrayForeignDataSource *)) 0 ;
  Vt_ArrayForeignDataSource *result = 0 ;
  
  arg1 = (void (*)(Vt_ArrayForeignDataSource *))jarg1; 
  result = (Vt_ArrayForeignDataSource *)new Vt_ArrayForeignDataSource(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Vt_ArrayForeignDataSource__SWIG_2() {
  void * jresult ;
  Vt_ArrayForeignDataSource *result = 0 ;
  
  result = (Vt_ArrayForeignDataSource *)new Vt_ArrayForeignDataSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_Vt_ArrayForeignDataSource(void * jarg1) {
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Vt_ArrayBase__SWIG_0() {
  void * jresult ;
  Vt_ArrayBase *result = 0 ;
  
  result = (Vt_ArrayBase *)new Vt_ArrayBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Vt_ArrayBase__SWIG_1(void * jarg1) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  Vt_ArrayBase *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  result = (Vt_ArrayBase *)new Vt_ArrayBase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Vt_ArrayBase__SWIG_2(void * jarg1) {
  void * jresult ;
  Vt_ArrayBase *arg1 = 0 ;
  Vt_ArrayBase *result = 0 ;
  
  arg1 = (Vt_ArrayBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vt_ArrayBase const & type is null", 0);
    return 0;
  } 
  result = (Vt_ArrayBase *)new Vt_ArrayBase((Vt_ArrayBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_Vt_ArrayBase(void * jarg1) {
  Vt_ArrayBase *arg1 = (Vt_ArrayBase *) 0 ;
  
  arg1 = (Vt_ArrayBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPathArray__SWIG_0() {
  void * jresult ;
  VtArray< SdfAssetPath > *result = 0 ;
  
  result = (VtArray< SdfAssetPath > *)new VtArray< SdfAssetPath >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPathArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< SdfAssetPath >::ElementType *arg2 = (VtArray< SdfAssetPath >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< SdfAssetPath > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< SdfAssetPath >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< SdfAssetPath > *)new VtArray< SdfAssetPath >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPathArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< SdfAssetPath >::ElementType *arg2 = (VtArray< SdfAssetPath >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< SdfAssetPath > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< SdfAssetPath >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< SdfAssetPath > *)new VtArray< SdfAssetPath >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPathArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< SdfAssetPath > *arg1 = 0 ;
  VtArray< SdfAssetPath > *result = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< SdfAssetPath > *)new VtArray< SdfAssetPath >((VtArray< SdfAssetPath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPathArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< SdfAssetPath >::value_type *arg2 = 0 ;
  VtArray< SdfAssetPath > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< SdfAssetPath >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< SdfAssetPath > *)new VtArray< SdfAssetPath >(arg1,(VtArray< SdfAssetPath >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPathArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< SdfAssetPath > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< SdfAssetPath > *)new VtArray< SdfAssetPath >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfAssetPathArray(void * jarg1) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_push_back(void * jarg1, void * jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  VtArray< SdfAssetPath >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (VtArray< SdfAssetPath >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< SdfAssetPath >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_pop_back(void * jarg1) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  result = ((VtArray< SdfAssetPath > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  result = ((VtArray< SdfAssetPath > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  bool result;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  result = (bool)((VtArray< SdfAssetPath > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_clear(void * jarg1) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  size_t arg2 ;
  VtArray< SdfAssetPath >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< SdfAssetPath >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< SdfAssetPath >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_swap(void * jarg1, void * jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  VtArray< SdfAssetPath > *arg2 = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (VtArray< SdfAssetPath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  VtArray< SdfAssetPath > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (VtArray< SdfAssetPath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< SdfAssetPath > const *)arg1)->IsIdentical((VtArray< SdfAssetPath > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< SdfAssetPath > *arg1 = 0 ;
  VtArray< SdfAssetPath > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< SdfAssetPath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_SdfAssetPath_Sg__Equals((VtArray< SdfAssetPath > const &)*arg1,(VtArray< SdfAssetPath > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  result = VtArray_Sl_SdfAssetPath_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_CopyToArray__SWIG_0(void * jarg1, SdfAssetPath* jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  SdfAssetPath *arg2 = (SdfAssetPath *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_SdfAssetPath_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_CopyFromArray__SWIG_0(void * jarg1, SdfAssetPath* jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  SdfAssetPath *arg2 = (SdfAssetPath *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_SdfAssetPath_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_SdfAssetPath_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_SdfAssetPath_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  int arg2 ;
  SdfAssetPath *result = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (SdfAssetPath *) &VtArray_Sl_SdfAssetPath_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< SdfAssetPath > *arg1 = (VtArray< SdfAssetPath > *) 0 ;
  int arg2 ;
  SdfAssetPath *arg3 = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfAssetPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return ;
  } 
  VtArray_Sl_SdfAssetPath_Sg__SetValue(arg1,arg2,(SdfAssetPath const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtBoolArray__SWIG_0() {
  void * jresult ;
  VtArray< bool > *result = 0 ;
  
  result = (VtArray< bool > *)new VtArray< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtBoolArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< bool >::ElementType *arg2 = (VtArray< bool >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< bool > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< bool >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< bool > *)new VtArray< bool >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtBoolArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< bool >::ElementType *arg2 = (VtArray< bool >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< bool > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< bool >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< bool > *)new VtArray< bool >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtBoolArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< bool > *arg1 = 0 ;
  VtArray< bool > *result = 0 ;
  
  arg1 = (VtArray< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< bool > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< bool > *)new VtArray< bool >((VtArray< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtBoolArray__SWIG_5(unsigned long jarg1, unsigned int jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< bool >::value_type *arg2 = 0 ;
  VtArray< bool >::value_type temp2 ;
  VtArray< bool > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (VtArray< bool > *)new VtArray< bool >(arg1,(VtArray< bool >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtBoolArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< bool > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< bool > *)new VtArray< bool >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtBoolArray(void * jarg1) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_push_back(void * jarg1, unsigned int jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  VtArray< bool >::ElementType *arg2 = 0 ;
  VtArray< bool >::ElementType temp2 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< bool >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_pop_back(void * jarg1) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtBoolArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< bool > *)jarg1; 
  result = ((VtArray< bool > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtBoolArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< bool > *)jarg1; 
  result = ((VtArray< bool > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtBoolArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  bool result;
  
  arg1 = (VtArray< bool > *)jarg1; 
  result = (bool)((VtArray< bool > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_clear(void * jarg1) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_assign(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  size_t arg2 ;
  VtArray< bool >::value_type *arg3 = 0 ;
  VtArray< bool >::value_type temp3 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< bool >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_swap(void * jarg1, void * jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  VtArray< bool > *arg2 = 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (VtArray< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< bool > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtBoolArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  VtArray< bool > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (VtArray< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< bool > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< bool > const *)arg1)->IsIdentical((VtArray< bool > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtBoolArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< bool > *arg1 = 0 ;
  VtArray< bool > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< bool > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< bool > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_bool_Sg__Equals((VtArray< bool > const &)*arg1,(VtArray< bool > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtBoolArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< bool > *)jarg1; 
  result = VtArray_Sl_bool_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_CopyToArray__SWIG_0(void * jarg1, bool* jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_bool_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_CopyFromArray__SWIG_0(void * jarg1, bool* jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_bool_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_bool_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_bool_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtBoolArray_GetValue(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  int arg2 ;
  bool *result = 0 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool *) &VtArray_Sl_bool_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtBoolArray_SetValue(void * jarg1, int jarg2, unsigned int jarg3) {
  VtArray< bool > *arg1 = (VtArray< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (VtArray< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  VtArray_Sl_bool_Sg__SetValue(arg1,arg2,(bool const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDoubleArray__SWIG_0() {
  void * jresult ;
  VtArray< double > *result = 0 ;
  
  result = (VtArray< double > *)new VtArray< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDoubleArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< double >::ElementType *arg2 = (VtArray< double >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< double > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< double >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< double > *)new VtArray< double >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDoubleArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< double >::ElementType *arg2 = (VtArray< double >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< double > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< double >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< double > *)new VtArray< double >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDoubleArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< double > *arg1 = 0 ;
  VtArray< double > *result = 0 ;
  
  arg1 = (VtArray< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< double > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< double > *)new VtArray< double >((VtArray< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDoubleArray__SWIG_5(unsigned long jarg1, double jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< double >::value_type *arg2 = 0 ;
  VtArray< double >::value_type temp2 ;
  VtArray< double > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< double >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< double > *)new VtArray< double >(arg1,(VtArray< double >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDoubleArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< double > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< double > *)new VtArray< double >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtDoubleArray(void * jarg1) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_push_back(void * jarg1, double jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  VtArray< double >::ElementType *arg2 = 0 ;
  VtArray< double >::ElementType temp2 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  temp2 = (VtArray< double >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< double >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_pop_back(void * jarg1) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtDoubleArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< double > *)jarg1; 
  result = ((VtArray< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtDoubleArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< double > *)jarg1; 
  result = ((VtArray< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtDoubleArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  bool result;
  
  arg1 = (VtArray< double > *)jarg1; 
  result = (bool)((VtArray< double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_clear(void * jarg1) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_assign(void * jarg1, unsigned long jarg2, double jarg3) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  size_t arg2 ;
  VtArray< double >::value_type *arg3 = 0 ;
  VtArray< double >::value_type temp3 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< double >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< double >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_swap(void * jarg1, void * jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  VtArray< double > *arg2 = 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (VtArray< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< double > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtDoubleArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  VtArray< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (VtArray< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< double > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< double > const *)arg1)->IsIdentical((VtArray< double > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtDoubleArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< double > *arg1 = 0 ;
  VtArray< double > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< double > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< double > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_double_Sg__Equals((VtArray< double > const &)*arg1,(VtArray< double > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtDoubleArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< double > *)jarg1; 
  result = VtArray_Sl_double_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_CopyToArray__SWIG_0(void * jarg1, double* jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_double_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_CopyFromArray__SWIG_0(void * jarg1, double* jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_double_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_double_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_double_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_VtDoubleArray_GetValue(void * jarg1, int jarg2) {
  double jresult ;
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double *) &VtArray_Sl_double_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDoubleArray_SetValue(void * jarg1, int jarg2, double jarg3) {
  VtArray< double > *arg1 = (VtArray< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (VtArray< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_double_Sg__SetValue(arg1,arg2,(double const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtFloatArray__SWIG_0() {
  void * jresult ;
  VtArray< float > *result = 0 ;
  
  result = (VtArray< float > *)new VtArray< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtFloatArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< float >::ElementType *arg2 = (VtArray< float >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< float > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< float >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< float > *)new VtArray< float >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtFloatArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< float >::ElementType *arg2 = (VtArray< float >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< float > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< float >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< float > *)new VtArray< float >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtFloatArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< float > *arg1 = 0 ;
  VtArray< float > *result = 0 ;
  
  arg1 = (VtArray< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< float > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< float > *)new VtArray< float >((VtArray< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtFloatArray__SWIG_5(unsigned long jarg1, float jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< float >::value_type *arg2 = 0 ;
  VtArray< float >::value_type temp2 ;
  VtArray< float > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< float >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< float > *)new VtArray< float >(arg1,(VtArray< float >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtFloatArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< float > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< float > *)new VtArray< float >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtFloatArray(void * jarg1) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_push_back(void * jarg1, float jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  VtArray< float >::ElementType *arg2 = 0 ;
  VtArray< float >::ElementType temp2 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  temp2 = (VtArray< float >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< float >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_pop_back(void * jarg1) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtFloatArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< float > *)jarg1; 
  result = ((VtArray< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtFloatArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< float > *)jarg1; 
  result = ((VtArray< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtFloatArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  bool result;
  
  arg1 = (VtArray< float > *)jarg1; 
  result = (bool)((VtArray< float > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_clear(void * jarg1) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_assign(void * jarg1, unsigned long jarg2, float jarg3) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  size_t arg2 ;
  VtArray< float >::value_type *arg3 = 0 ;
  VtArray< float >::value_type temp3 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< float >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< float >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_swap(void * jarg1, void * jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  VtArray< float > *arg2 = 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (VtArray< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< float > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtFloatArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  VtArray< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (VtArray< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< float > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< float > const *)arg1)->IsIdentical((VtArray< float > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtFloatArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< float > *arg1 = 0 ;
  VtArray< float > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< float > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_float_Sg__Equals((VtArray< float > const &)*arg1,(VtArray< float > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtFloatArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< float > *)jarg1; 
  result = VtArray_Sl_float_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_CopyToArray__SWIG_0(void * jarg1, float* jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_float_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_CopyFromArray__SWIG_0(void * jarg1, float* jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_float_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_float_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_float_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_VtFloatArray_GetValue(void * jarg1, int jarg2) {
  float jresult ;
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float *) &VtArray_Sl_float_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtFloatArray_SetValue(void * jarg1, int jarg2, float jarg3) {
  VtArray< float > *arg1 = (VtArray< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (VtArray< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_float_Sg__SetValue(arg1,arg2,(float const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtHalfArray__SWIG_0() {
  void * jresult ;
  VtArray< GfHalf > *result = 0 ;
  
  result = (VtArray< GfHalf > *)new VtArray< GfHalf >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtHalfArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfHalf >::ElementType *arg2 = (VtArray< GfHalf >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfHalf > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfHalf >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfHalf > *)new VtArray< GfHalf >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtHalfArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfHalf >::ElementType *arg2 = (VtArray< GfHalf >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfHalf > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfHalf >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfHalf > *)new VtArray< GfHalf >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtHalfArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfHalf > *arg1 = 0 ;
  VtArray< GfHalf > *result = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfHalf > *)new VtArray< GfHalf >((VtArray< GfHalf > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtHalfArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfHalf >::value_type *arg2 = 0 ;
  VtArray< GfHalf > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfHalf >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfHalf > *)new VtArray< GfHalf >(arg1,(VtArray< GfHalf >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtHalfArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfHalf > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfHalf > *)new VtArray< GfHalf >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtHalfArray(void * jarg1) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  VtArray< GfHalf >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (VtArray< GfHalf >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfHalf >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_pop_back(void * jarg1) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtHalfArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  result = ((VtArray< GfHalf > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtHalfArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  result = ((VtArray< GfHalf > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtHalfArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  result = (bool)((VtArray< GfHalf > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_clear(void * jarg1) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  size_t arg2 ;
  VtArray< GfHalf >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfHalf >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfHalf >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  VtArray< GfHalf > *arg2 = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (VtArray< GfHalf > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtHalfArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  VtArray< GfHalf > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (VtArray< GfHalf > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfHalf > const *)arg1)->IsIdentical((VtArray< GfHalf > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtHalfArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfHalf > *arg1 = 0 ;
  VtArray< GfHalf > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfHalf > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfHalf > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfHalf_Sg__Equals((VtArray< GfHalf > const &)*arg1,(VtArray< GfHalf > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtHalfArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  result = VtArray_Sl_GfHalf_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_CopyToArray__SWIG_0(void * jarg1, GfHalf* jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  GfHalf *arg2 = (GfHalf *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfHalf_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_CopyFromArray__SWIG_0(void * jarg1, GfHalf* jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  GfHalf *arg2 = (GfHalf *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfHalf_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfHalf_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfHalf_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtHalfArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  int arg2 ;
  GfHalf *result = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfHalf *) &VtArray_Sl_GfHalf_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtHalfArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfHalf > *arg1 = (VtArray< GfHalf > *) 0 ;
  int arg2 ;
  GfHalf *arg3 = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfHalf *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfHalf const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfHalf_Sg__SetValue(arg1,arg2,(GfHalf const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtInt64Array__SWIG_0() {
  void * jresult ;
  VtArray< int64_t > *result = 0 ;
  
  result = (VtArray< int64_t > *)new VtArray< int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtInt64Array__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< long long >::ElementType *arg2 = (VtArray< long long >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< int64_t > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< long long >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< int64_t > *)new VtArray< int64_t >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtInt64Array__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< long long >::ElementType *arg2 = (VtArray< long long >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< int64_t > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< long long >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< int64_t > *)new VtArray< int64_t >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtInt64Array__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< int64_t > *arg1 = 0 ;
  VtArray< int64_t > *result = 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int64_t > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< int64_t > *)new VtArray< int64_t >((VtArray< int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtInt64Array__SWIG_5(unsigned long jarg1, long long jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< long long >::value_type *arg2 = 0 ;
  VtArray< long long >::value_type temp2 ;
  VtArray< int64_t > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< int64_t > *)new VtArray< int64_t >(arg1,(VtArray< long long >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtInt64Array__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< int64_t > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< int64_t > *)new VtArray< int64_t >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtInt64Array(void * jarg1) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_push_back(void * jarg1, long long jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  VtArray< long long >::ElementType *arg2 = 0 ;
  VtArray< long long >::ElementType temp2 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  temp2 = (VtArray< long long >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< long long >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_pop_back(void * jarg1) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtInt64Array_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  result = ((VtArray< int64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtInt64Array_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  result = ((VtArray< int64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtInt64Array_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  bool result;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  result = (bool)((VtArray< int64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_resize(void * jarg1, unsigned long jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_clear(void * jarg1) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_assign(void * jarg1, unsigned long jarg2, long long jarg3) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  size_t arg2 ;
  VtArray< long long >::value_type *arg3 = 0 ;
  VtArray< long long >::value_type temp3 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< long long >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_swap(void * jarg1, void * jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  VtArray< int64_t > *arg2 = 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (VtArray< int64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int64_t > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtInt64Array_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  VtArray< int64_t > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (VtArray< int64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int64_t > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< int64_t > const *)arg1)->IsIdentical((VtArray< int64_t > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtInt64Array_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< long long > *arg1 = 0 ;
  VtArray< long long > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< long long > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< long long > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_int64_t_Sg__Equals((VtArray< long long > const &)*arg1,(VtArray< long long > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtInt64Array_ToString(void * jarg1) {
  char * jresult ;
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  result = VtArray_Sl_int64_t_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_CopyToArray__SWIG_0(void * jarg1, long long* jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  long long *arg2 = (long long *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_int64_t_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_CopyFromArray__SWIG_0(void * jarg1, long long* jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  long long *arg2 = (long long *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_int64_t_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_int64_t_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_int64_t_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_VtInt64Array_GetValue(void * jarg1, int jarg2) {
  long long jresult ;
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  int arg2 ;
  long long *result = 0 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (long long *) &VtArray_Sl_int64_t_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtInt64Array_SetValue(void * jarg1, int jarg2, long long jarg3) {
  VtArray< int64_t > *arg1 = (VtArray< int64_t > *) 0 ;
  int arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  arg1 = (VtArray< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_int64_t_Sg__SetValue(arg1,arg2,(long long const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtIntArray__SWIG_0() {
  void * jresult ;
  VtArray< int > *result = 0 ;
  
  result = (VtArray< int > *)new VtArray< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtIntArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< int >::ElementType *arg2 = (VtArray< int >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< int > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< int >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< int > *)new VtArray< int >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtIntArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< int >::ElementType *arg2 = (VtArray< int >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< int > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< int >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< int > *)new VtArray< int >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtIntArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< int > *arg1 = 0 ;
  VtArray< int > *result = 0 ;
  
  arg1 = (VtArray< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< int > *)new VtArray< int >((VtArray< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtIntArray__SWIG_5(unsigned long jarg1, int jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< int >::value_type *arg2 = 0 ;
  VtArray< int >::value_type temp2 ;
  VtArray< int > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< int >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< int > *)new VtArray< int >(arg1,(VtArray< int >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtIntArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< int > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< int > *)new VtArray< int >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtIntArray(void * jarg1) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_push_back(void * jarg1, int jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  VtArray< int >::ElementType *arg2 = 0 ;
  VtArray< int >::ElementType temp2 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  temp2 = (VtArray< int >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< int >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_pop_back(void * jarg1) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtIntArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< int > *)jarg1; 
  result = ((VtArray< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtIntArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< int > *)jarg1; 
  result = ((VtArray< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtIntArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  bool result;
  
  arg1 = (VtArray< int > *)jarg1; 
  result = (bool)((VtArray< int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_clear(void * jarg1) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_assign(void * jarg1, unsigned long jarg2, int jarg3) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  size_t arg2 ;
  VtArray< int >::value_type *arg3 = 0 ;
  VtArray< int >::value_type temp3 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< int >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< int >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_swap(void * jarg1, void * jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  VtArray< int > *arg2 = 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (VtArray< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtIntArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  VtArray< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (VtArray< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< int > const *)arg1)->IsIdentical((VtArray< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtIntArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< int > *arg1 = 0 ;
  VtArray< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_int_Sg__Equals((VtArray< int > const &)*arg1,(VtArray< int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtIntArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< int > *)jarg1; 
  result = VtArray_Sl_int_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_CopyToArray__SWIG_0(void * jarg1, int* jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_int_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_CopyFromArray__SWIG_0(void * jarg1, int* jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_int_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_int_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_int_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_VtIntArray_GetValue(void * jarg1, int jarg2) {
  int jresult ;
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int *) &VtArray_Sl_int_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtIntArray_SetValue(void * jarg1, int jarg2, int jarg3) {
  VtArray< int > *arg1 = (VtArray< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (VtArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_int_Sg__SetValue(arg1,arg2,(int const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix2dArray__SWIG_0() {
  void * jresult ;
  VtArray< GfMatrix2d > *result = 0 ;
  
  result = (VtArray< GfMatrix2d > *)new VtArray< GfMatrix2d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix2dArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfMatrix2d >::ElementType *arg2 = (VtArray< GfMatrix2d >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfMatrix2d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfMatrix2d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfMatrix2d > *)new VtArray< GfMatrix2d >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix2dArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfMatrix2d >::ElementType *arg2 = (VtArray< GfMatrix2d >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfMatrix2d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfMatrix2d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfMatrix2d > *)new VtArray< GfMatrix2d >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix2dArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfMatrix2d > *arg1 = 0 ;
  VtArray< GfMatrix2d > *result = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfMatrix2d > *)new VtArray< GfMatrix2d >((VtArray< GfMatrix2d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix2dArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfMatrix2d >::value_type *arg2 = 0 ;
  VtArray< GfMatrix2d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfMatrix2d >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfMatrix2d > *)new VtArray< GfMatrix2d >(arg1,(VtArray< GfMatrix2d >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix2dArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfMatrix2d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfMatrix2d > *)new VtArray< GfMatrix2d >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtMatrix2dArray(void * jarg1) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  VtArray< GfMatrix2d >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (VtArray< GfMatrix2d >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfMatrix2d >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_pop_back(void * jarg1) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  result = ((VtArray< GfMatrix2d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  result = ((VtArray< GfMatrix2d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  result = (bool)((VtArray< GfMatrix2d > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_clear(void * jarg1) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  size_t arg2 ;
  VtArray< GfMatrix2d >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfMatrix2d >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfMatrix2d >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  VtArray< GfMatrix2d > *arg2 = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (VtArray< GfMatrix2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  VtArray< GfMatrix2d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (VtArray< GfMatrix2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfMatrix2d > const *)arg1)->IsIdentical((VtArray< GfMatrix2d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfMatrix2d > *arg1 = 0 ;
  VtArray< GfMatrix2d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfMatrix2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfMatrix2d_Sg__Equals((VtArray< GfMatrix2d > const &)*arg1,(VtArray< GfMatrix2d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  result = VtArray_Sl_GfMatrix2d_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_CopyToArray__SWIG_0(void * jarg1, GfMatrix2d* jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  GfMatrix2d *arg2 = (GfMatrix2d *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfMatrix2d_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_CopyFromArray__SWIG_0(void * jarg1, GfMatrix2d* jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  GfMatrix2d *arg2 = (GfMatrix2d *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfMatrix2d_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfMatrix2d_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfMatrix2d_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  int arg2 ;
  GfMatrix2d *result = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfMatrix2d *) &VtArray_Sl_GfMatrix2d_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfMatrix2d > *arg1 = (VtArray< GfMatrix2d > *) 0 ;
  int arg2 ;
  GfMatrix2d *arg3 = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfMatrix2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfMatrix2d_Sg__SetValue(arg1,arg2,(GfMatrix2d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix3dArray__SWIG_0() {
  void * jresult ;
  VtArray< GfMatrix3d > *result = 0 ;
  
  result = (VtArray< GfMatrix3d > *)new VtArray< GfMatrix3d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix3dArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfMatrix3d >::ElementType *arg2 = (VtArray< GfMatrix3d >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfMatrix3d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfMatrix3d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfMatrix3d > *)new VtArray< GfMatrix3d >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix3dArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfMatrix3d >::ElementType *arg2 = (VtArray< GfMatrix3d >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfMatrix3d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfMatrix3d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfMatrix3d > *)new VtArray< GfMatrix3d >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix3dArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfMatrix3d > *arg1 = 0 ;
  VtArray< GfMatrix3d > *result = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfMatrix3d > *)new VtArray< GfMatrix3d >((VtArray< GfMatrix3d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix3dArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfMatrix3d >::value_type *arg2 = 0 ;
  VtArray< GfMatrix3d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfMatrix3d >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfMatrix3d > *)new VtArray< GfMatrix3d >(arg1,(VtArray< GfMatrix3d >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix3dArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfMatrix3d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfMatrix3d > *)new VtArray< GfMatrix3d >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtMatrix3dArray(void * jarg1) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  VtArray< GfMatrix3d >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (VtArray< GfMatrix3d >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfMatrix3d >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_pop_back(void * jarg1) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  result = ((VtArray< GfMatrix3d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  result = ((VtArray< GfMatrix3d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  result = (bool)((VtArray< GfMatrix3d > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_clear(void * jarg1) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  size_t arg2 ;
  VtArray< GfMatrix3d >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfMatrix3d >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfMatrix3d >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  VtArray< GfMatrix3d > *arg2 = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (VtArray< GfMatrix3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  VtArray< GfMatrix3d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (VtArray< GfMatrix3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfMatrix3d > const *)arg1)->IsIdentical((VtArray< GfMatrix3d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfMatrix3d > *arg1 = 0 ;
  VtArray< GfMatrix3d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfMatrix3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfMatrix3d_Sg__Equals((VtArray< GfMatrix3d > const &)*arg1,(VtArray< GfMatrix3d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  result = VtArray_Sl_GfMatrix3d_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_CopyToArray__SWIG_0(void * jarg1, GfMatrix3d* jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  GfMatrix3d *arg2 = (GfMatrix3d *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfMatrix3d_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_CopyFromArray__SWIG_0(void * jarg1, GfMatrix3d* jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  GfMatrix3d *arg2 = (GfMatrix3d *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfMatrix3d_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfMatrix3d_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfMatrix3d_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  int arg2 ;
  GfMatrix3d *result = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfMatrix3d *) &VtArray_Sl_GfMatrix3d_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfMatrix3d > *arg1 = (VtArray< GfMatrix3d > *) 0 ;
  int arg2 ;
  GfMatrix3d *arg3 = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfMatrix3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfMatrix3d_Sg__SetValue(arg1,arg2,(GfMatrix3d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix4dArray__SWIG_0() {
  void * jresult ;
  VtArray< GfMatrix4d > *result = 0 ;
  
  result = (VtArray< GfMatrix4d > *)new VtArray< GfMatrix4d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix4dArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfMatrix4d >::ElementType *arg2 = (VtArray< GfMatrix4d >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfMatrix4d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfMatrix4d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfMatrix4d > *)new VtArray< GfMatrix4d >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix4dArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfMatrix4d >::ElementType *arg2 = (VtArray< GfMatrix4d >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfMatrix4d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfMatrix4d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfMatrix4d > *)new VtArray< GfMatrix4d >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix4dArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfMatrix4d > *arg1 = 0 ;
  VtArray< GfMatrix4d > *result = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfMatrix4d > *)new VtArray< GfMatrix4d >((VtArray< GfMatrix4d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix4dArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfMatrix4d >::value_type *arg2 = 0 ;
  VtArray< GfMatrix4d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfMatrix4d >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfMatrix4d > *)new VtArray< GfMatrix4d >(arg1,(VtArray< GfMatrix4d >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtMatrix4dArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfMatrix4d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfMatrix4d > *)new VtArray< GfMatrix4d >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtMatrix4dArray(void * jarg1) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  VtArray< GfMatrix4d >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (VtArray< GfMatrix4d >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfMatrix4d >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_pop_back(void * jarg1) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  result = ((VtArray< GfMatrix4d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  result = ((VtArray< GfMatrix4d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  result = (bool)((VtArray< GfMatrix4d > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_clear(void * jarg1) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  size_t arg2 ;
  VtArray< GfMatrix4d >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfMatrix4d >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfMatrix4d >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  VtArray< GfMatrix4d > *arg2 = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (VtArray< GfMatrix4d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  VtArray< GfMatrix4d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (VtArray< GfMatrix4d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfMatrix4d > const *)arg1)->IsIdentical((VtArray< GfMatrix4d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfMatrix4d > *arg1 = 0 ;
  VtArray< GfMatrix4d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfMatrix4d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfMatrix4d_Sg__Equals((VtArray< GfMatrix4d > const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  result = VtArray_Sl_GfMatrix4d_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_CopyToArray__SWIG_0(void * jarg1, GfMatrix4d* jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfMatrix4d_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_CopyFromArray__SWIG_0(void * jarg1, GfMatrix4d* jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfMatrix4d_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfMatrix4d_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfMatrix4d_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  int arg2 ;
  GfMatrix4d *result = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfMatrix4d *) &VtArray_Sl_GfMatrix4d_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  int arg2 ;
  GfMatrix4d *arg3 = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfMatrix4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfMatrix4d_Sg__SetValue(arg1,arg2,(GfMatrix4d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatdArray__SWIG_0() {
  void * jresult ;
  VtArray< GfQuatd > *result = 0 ;
  
  result = (VtArray< GfQuatd > *)new VtArray< GfQuatd >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatdArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfQuatd >::ElementType *arg2 = (VtArray< GfQuatd >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfQuatd > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfQuatd >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfQuatd > *)new VtArray< GfQuatd >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatdArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfQuatd >::ElementType *arg2 = (VtArray< GfQuatd >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfQuatd > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfQuatd >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfQuatd > *)new VtArray< GfQuatd >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatdArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfQuatd > *arg1 = 0 ;
  VtArray< GfQuatd > *result = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfQuatd > *)new VtArray< GfQuatd >((VtArray< GfQuatd > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatdArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfQuatd >::value_type *arg2 = 0 ;
  VtArray< GfQuatd > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfQuatd >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfQuatd > *)new VtArray< GfQuatd >(arg1,(VtArray< GfQuatd >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatdArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfQuatd > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfQuatd > *)new VtArray< GfQuatd >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtQuatdArray(void * jarg1) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  VtArray< GfQuatd >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (VtArray< GfQuatd >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfQuatd >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_pop_back(void * jarg1) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtQuatdArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  result = ((VtArray< GfQuatd > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtQuatdArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  result = ((VtArray< GfQuatd > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuatdArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  result = (bool)((VtArray< GfQuatd > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_clear(void * jarg1) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  size_t arg2 ;
  VtArray< GfQuatd >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfQuatd >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfQuatd >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  VtArray< GfQuatd > *arg2 = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (VtArray< GfQuatd > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuatdArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  VtArray< GfQuatd > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (VtArray< GfQuatd > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfQuatd > const *)arg1)->IsIdentical((VtArray< GfQuatd > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuatdArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfQuatd > *arg1 = 0 ;
  VtArray< GfQuatd > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuatd > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfQuatd > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfQuatd_Sg__Equals((VtArray< GfQuatd > const &)*arg1,(VtArray< GfQuatd > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtQuatdArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  result = VtArray_Sl_GfQuatd_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_CopyToArray__SWIG_0(void * jarg1, GfQuatd* jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  GfQuatd *arg2 = (GfQuatd *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfQuatd_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_CopyFromArray__SWIG_0(void * jarg1, GfQuatd* jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  GfQuatd *arg2 = (GfQuatd *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfQuatd_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfQuatd_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfQuatd_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtQuatdArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  int arg2 ;
  GfQuatd *result = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfQuatd *) &VtArray_Sl_GfQuatd_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatdArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfQuatd > *arg1 = (VtArray< GfQuatd > *) 0 ;
  int arg2 ;
  GfQuatd *arg3 = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfQuatd *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfQuatd_Sg__SetValue(arg1,arg2,(GfQuatd const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatfArray__SWIG_0() {
  void * jresult ;
  VtArray< GfQuatf > *result = 0 ;
  
  result = (VtArray< GfQuatf > *)new VtArray< GfQuatf >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatfArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfQuatf >::ElementType *arg2 = (VtArray< GfQuatf >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfQuatf > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfQuatf >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfQuatf > *)new VtArray< GfQuatf >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatfArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfQuatf >::ElementType *arg2 = (VtArray< GfQuatf >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfQuatf > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfQuatf >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfQuatf > *)new VtArray< GfQuatf >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatfArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfQuatf > *arg1 = 0 ;
  VtArray< GfQuatf > *result = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfQuatf > *)new VtArray< GfQuatf >((VtArray< GfQuatf > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatfArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfQuatf >::value_type *arg2 = 0 ;
  VtArray< GfQuatf > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfQuatf >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfQuatf > *)new VtArray< GfQuatf >(arg1,(VtArray< GfQuatf >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuatfArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfQuatf > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfQuatf > *)new VtArray< GfQuatf >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtQuatfArray(void * jarg1) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  VtArray< GfQuatf >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (VtArray< GfQuatf >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfQuatf >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_pop_back(void * jarg1) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtQuatfArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  result = ((VtArray< GfQuatf > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtQuatfArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  result = ((VtArray< GfQuatf > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuatfArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  result = (bool)((VtArray< GfQuatf > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_clear(void * jarg1) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  size_t arg2 ;
  VtArray< GfQuatf >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfQuatf >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfQuatf >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  VtArray< GfQuatf > *arg2 = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (VtArray< GfQuatf > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuatfArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  VtArray< GfQuatf > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (VtArray< GfQuatf > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfQuatf > const *)arg1)->IsIdentical((VtArray< GfQuatf > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuatfArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfQuatf > *arg1 = 0 ;
  VtArray< GfQuatf > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuatf > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfQuatf > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfQuatf_Sg__Equals((VtArray< GfQuatf > const &)*arg1,(VtArray< GfQuatf > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtQuatfArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  result = VtArray_Sl_GfQuatf_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_CopyToArray__SWIG_0(void * jarg1, GfQuatf* jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  GfQuatf *arg2 = (GfQuatf *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfQuatf_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_CopyFromArray__SWIG_0(void * jarg1, GfQuatf* jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  GfQuatf *arg2 = (GfQuatf *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfQuatf_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfQuatf_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfQuatf_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtQuatfArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  int arg2 ;
  GfQuatf *result = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfQuatf *) &VtArray_Sl_GfQuatf_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuatfArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfQuatf > *arg1 = (VtArray< GfQuatf > *) 0 ;
  int arg2 ;
  GfQuatf *arg3 = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfQuatf *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfQuatf_Sg__SetValue(arg1,arg2,(GfQuatf const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuathArray__SWIG_0() {
  void * jresult ;
  VtArray< GfQuath > *result = 0 ;
  
  result = (VtArray< GfQuath > *)new VtArray< GfQuath >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuathArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfQuath >::ElementType *arg2 = (VtArray< GfQuath >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfQuath > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfQuath >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfQuath > *)new VtArray< GfQuath >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuathArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfQuath >::ElementType *arg2 = (VtArray< GfQuath >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfQuath > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfQuath >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfQuath > *)new VtArray< GfQuath >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuathArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfQuath > *arg1 = 0 ;
  VtArray< GfQuath > *result = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfQuath > *)new VtArray< GfQuath >((VtArray< GfQuath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuathArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfQuath >::value_type *arg2 = 0 ;
  VtArray< GfQuath > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfQuath >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfQuath > *)new VtArray< GfQuath >(arg1,(VtArray< GfQuath >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtQuathArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfQuath > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfQuath > *)new VtArray< GfQuath >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtQuathArray(void * jarg1) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  VtArray< GfQuath >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (VtArray< GfQuath >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfQuath >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_pop_back(void * jarg1) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtQuathArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  result = ((VtArray< GfQuath > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtQuathArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  result = ((VtArray< GfQuath > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuathArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  result = (bool)((VtArray< GfQuath > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_clear(void * jarg1) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  size_t arg2 ;
  VtArray< GfQuath >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfQuath >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfQuath >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  VtArray< GfQuath > *arg2 = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (VtArray< GfQuath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuathArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  VtArray< GfQuath > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (VtArray< GfQuath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfQuath > const *)arg1)->IsIdentical((VtArray< GfQuath > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtQuathArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfQuath > *arg1 = 0 ;
  VtArray< GfQuath > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfQuath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfQuath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfQuath_Sg__Equals((VtArray< GfQuath > const &)*arg1,(VtArray< GfQuath > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtQuathArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  result = VtArray_Sl_GfQuath_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_CopyToArray__SWIG_0(void * jarg1, GfQuath* jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  GfQuath *arg2 = (GfQuath *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfQuath_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_CopyFromArray__SWIG_0(void * jarg1, GfQuath* jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  GfQuath *arg2 = (GfQuath *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfQuath_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfQuath_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfQuath_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtQuathArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  int arg2 ;
  GfQuath *result = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfQuath *) &VtArray_Sl_GfQuath_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtQuathArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfQuath > *arg1 = (VtArray< GfQuath > *) 0 ;
  int arg2 ;
  GfQuath *arg3 = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfQuath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuath const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfQuath_Sg__SetValue(arg1,arg2,(GfQuath const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtStringArray__SWIG_0() {
  void * jresult ;
  VtArray< std::string > *result = 0 ;
  
  result = (VtArray< std::string > *)new VtArray< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtStringArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< std::string >::ElementType *arg2 = (VtArray< std::string >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< std::string > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< std::string >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< std::string > *)new VtArray< std::string >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtStringArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< std::string >::ElementType *arg2 = (VtArray< std::string >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< std::string > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< std::string >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< std::string > *)new VtArray< std::string >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtStringArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< std::string > *arg1 = 0 ;
  VtArray< std::string > *result = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< std::string > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< std::string > *)new VtArray< std::string >((VtArray< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtStringArray__SWIG_5(unsigned long jarg1, char * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< std::string >::value_type *arg2 = 0 ;
  VtArray< std::string > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  VtArray< std::string >::value_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (VtArray< std::string > *)new VtArray< std::string >(arg1,(VtArray< std::string >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtStringArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< std::string > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< std::string > *)new VtArray< std::string >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtStringArray(void * jarg1) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_push_back(void * jarg1, char * jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  VtArray< std::string >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  VtArray< std::string >::ElementType arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((VtArray< std::string >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_pop_back(void * jarg1) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtStringArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  result = ((VtArray< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtStringArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  result = ((VtArray< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtStringArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  bool result;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  result = (bool)((VtArray< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_clear(void * jarg1) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_assign(void * jarg1, unsigned long jarg2, char * jarg3) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  size_t arg2 ;
  VtArray< std::string >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  VtArray< std::string >::value_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->assign(arg2,(VtArray< std::string >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_swap(void * jarg1, void * jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  VtArray< std::string > *arg2 = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (VtArray< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< std::string > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtStringArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  VtArray< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (VtArray< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< std::string > const *)arg1)->IsIdentical((VtArray< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtStringArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< std::string > *arg1 = 0 ;
  VtArray< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< std::string > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_std_string_Sg__Equals((VtArray< std::string > const &)*arg1,(VtArray< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtStringArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  result = VtArray_Sl_std_string_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_CopyToArray__SWIG_0(void * jarg1, std::string* jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_std_string_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_CopyFromArray__SWIG_0(void * jarg1, std::string* jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_std_string_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_std_string_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_std_string_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtStringArray_GetValue(void * jarg1, int jarg2) {
  char * jresult ;
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::string *) &VtArray_Sl_std_string_Sg__GetValue(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtStringArray_SetValue(void * jarg1, int jarg2, char * jarg3) {
  VtArray< std::string > *arg1 = (VtArray< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  VtArray_Sl_std_string_Sg__SetValue(arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtTokenArray__SWIG_0() {
  void * jresult ;
  VtArray< TfToken > *result = 0 ;
  
  result = (VtArray< TfToken > *)new VtArray< TfToken >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtTokenArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< TfToken >::ElementType *arg2 = (VtArray< TfToken >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< TfToken > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< TfToken >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< TfToken > *)new VtArray< TfToken >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtTokenArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< TfToken >::ElementType *arg2 = (VtArray< TfToken >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< TfToken > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< TfToken >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< TfToken > *)new VtArray< TfToken >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtTokenArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< TfToken > *arg1 = 0 ;
  VtArray< TfToken > *result = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< TfToken > *)new VtArray< TfToken >((VtArray< TfToken > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtTokenArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< TfToken >::value_type *arg2 = 0 ;
  VtArray< TfToken > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< TfToken >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< TfToken > *)new VtArray< TfToken >(arg1,(VtArray< TfToken >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtTokenArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< TfToken > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< TfToken > *)new VtArray< TfToken >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtTokenArray(void * jarg1) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_push_back(void * jarg1, void * jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  VtArray< TfToken >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (VtArray< TfToken >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< TfToken >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_pop_back(void * jarg1) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtTokenArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  result = ((VtArray< TfToken > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtTokenArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  result = ((VtArray< TfToken > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtTokenArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  bool result;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  result = (bool)((VtArray< TfToken > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_clear(void * jarg1) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  size_t arg2 ;
  VtArray< TfToken >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< TfToken >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< TfToken >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_swap(void * jarg1, void * jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  VtArray< TfToken > *arg2 = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (VtArray< TfToken > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtTokenArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  VtArray< TfToken > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (VtArray< TfToken > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< TfToken > const *)arg1)->IsIdentical((VtArray< TfToken > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtTokenArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< TfToken > *arg1 = 0 ;
  VtArray< TfToken > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< TfToken > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< TfToken > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_TfToken_Sg__Equals((VtArray< TfToken > const &)*arg1,(VtArray< TfToken > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtTokenArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  result = VtArray_Sl_TfToken_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_CopyToArray__SWIG_0(void * jarg1, TfToken* jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_TfToken_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_CopyFromArray__SWIG_0(void * jarg1, TfToken* jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_TfToken_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_TfToken_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_TfToken_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtTokenArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  int arg2 ;
  TfToken *result = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TfToken *) &VtArray_Sl_TfToken_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtTokenArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< TfToken > *arg1 = (VtArray< TfToken > *) 0 ;
  int arg2 ;
  TfToken *arg3 = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  VtArray_Sl_TfToken_Sg__SetValue(arg1,arg2,(TfToken const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUCharArray__SWIG_0() {
  void * jresult ;
  VtArray< unsigned char > *result = 0 ;
  
  result = (VtArray< unsigned char > *)new VtArray< unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUCharArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< unsigned char >::ElementType *arg2 = (VtArray< unsigned char >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< unsigned char > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< unsigned char >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< unsigned char > *)new VtArray< unsigned char >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUCharArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< unsigned char >::ElementType *arg2 = (VtArray< unsigned char >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< unsigned char > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< unsigned char >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< unsigned char > *)new VtArray< unsigned char >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUCharArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< unsigned char > *arg1 = 0 ;
  VtArray< unsigned char > *result = 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< unsigned char > *)new VtArray< unsigned char >((VtArray< unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUCharArray__SWIG_5(unsigned long jarg1, unsigned char jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< unsigned char >::value_type *arg2 = 0 ;
  VtArray< unsigned char >::value_type temp2 ;
  VtArray< unsigned char > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< unsigned char > *)new VtArray< unsigned char >(arg1,(VtArray< unsigned char >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUCharArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< unsigned char > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< unsigned char > *)new VtArray< unsigned char >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtUCharArray(void * jarg1) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_push_back(void * jarg1, unsigned char jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  VtArray< unsigned char >::ElementType *arg2 = 0 ;
  VtArray< unsigned char >::ElementType temp2 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  temp2 = (VtArray< unsigned char >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< unsigned char >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_pop_back(void * jarg1) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtUCharArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  result = ((VtArray< unsigned char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtUCharArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  result = ((VtArray< unsigned char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUCharArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  result = (bool)((VtArray< unsigned char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_clear(void * jarg1) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_assign(void * jarg1, unsigned long jarg2, unsigned char jarg3) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  size_t arg2 ;
  VtArray< unsigned char >::value_type *arg3 = 0 ;
  VtArray< unsigned char >::value_type temp3 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< unsigned char >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_swap(void * jarg1, void * jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  VtArray< unsigned char > *arg2 = 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (VtArray< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned char > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUCharArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  VtArray< unsigned char > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (VtArray< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< unsigned char > const *)arg1)->IsIdentical((VtArray< unsigned char > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUCharArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< unsigned char > *arg1 = 0 ;
  VtArray< unsigned char > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned char > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_unsigned_SS_char_Sg__Equals((VtArray< unsigned char > const &)*arg1,(VtArray< unsigned char > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtUCharArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  result = VtArray_Sl_unsigned_SS_char_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_CopyToArray__SWIG_0(void * jarg1, unsigned char* jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_unsigned_SS_char_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_CopyFromArray__SWIG_0(void * jarg1, unsigned char* jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_unsigned_SS_char_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_unsigned_SS_char_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_unsigned_SS_char_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pxr_VtUCharArray_GetValue(void * jarg1, int jarg2) {
  unsigned char jresult ;
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char *) &VtArray_Sl_unsigned_SS_char_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUCharArray_SetValue(void * jarg1, int jarg2, unsigned char jarg3) {
  VtArray< unsigned char > *arg1 = (VtArray< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_unsigned_SS_char_Sg__SetValue(arg1,arg2,(unsigned char const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUInt64Array__SWIG_0() {
  void * jresult ;
  VtArray< uint64_t > *result = 0 ;
  
  result = (VtArray< uint64_t > *)new VtArray< uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUInt64Array__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< unsigned long long >::ElementType *arg2 = (VtArray< unsigned long long >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< uint64_t > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< unsigned long long >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< uint64_t > *)new VtArray< uint64_t >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUInt64Array__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< unsigned long long >::ElementType *arg2 = (VtArray< unsigned long long >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< uint64_t > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< unsigned long long >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< uint64_t > *)new VtArray< uint64_t >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUInt64Array__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< uint64_t > *arg1 = 0 ;
  VtArray< uint64_t > *result = 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< uint64_t > *)new VtArray< uint64_t >((VtArray< uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUInt64Array__SWIG_5(unsigned long jarg1, unsigned long long jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< unsigned long long >::value_type *arg2 = 0 ;
  VtArray< unsigned long long >::value_type temp2 ;
  VtArray< uint64_t > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< unsigned long long >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< uint64_t > *)new VtArray< uint64_t >(arg1,(VtArray< unsigned long long >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUInt64Array__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< uint64_t > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< uint64_t > *)new VtArray< uint64_t >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtUInt64Array(void * jarg1) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_push_back(void * jarg1, unsigned long long jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  VtArray< unsigned long long >::ElementType *arg2 = 0 ;
  VtArray< unsigned long long >::ElementType temp2 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  temp2 = (VtArray< unsigned long long >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< unsigned long long >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_pop_back(void * jarg1) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtUInt64Array_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  result = ((VtArray< uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtUInt64Array_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  result = ((VtArray< uint64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUInt64Array_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  bool result;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  result = (bool)((VtArray< uint64_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_resize(void * jarg1, unsigned long jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_clear(void * jarg1) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_assign(void * jarg1, unsigned long jarg2, unsigned long long jarg3) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  size_t arg2 ;
  VtArray< unsigned long long >::value_type *arg3 = 0 ;
  VtArray< unsigned long long >::value_type temp3 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< unsigned long long >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< unsigned long long >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_swap(void * jarg1, void * jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  VtArray< uint64_t > *arg2 = 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (VtArray< uint64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< uint64_t > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUInt64Array_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  VtArray< uint64_t > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (VtArray< uint64_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< uint64_t > const *)arg1)->IsIdentical((VtArray< uint64_t > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUInt64Array_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< unsigned long long > *arg1 = 0 ;
  VtArray< unsigned long long > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned long long > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< unsigned long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned long long > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_uint64_t_Sg__Equals((VtArray< unsigned long long > const &)*arg1,(VtArray< unsigned long long > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtUInt64Array_ToString(void * jarg1) {
  char * jresult ;
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  result = VtArray_Sl_uint64_t_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_CopyToArray__SWIG_0(void * jarg1, unsigned long long* jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_uint64_t_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_CopyFromArray__SWIG_0(void * jarg1, unsigned long long* jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_uint64_t_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_uint64_t_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_uint64_t_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pxr_VtUInt64Array_GetValue(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long *result = 0 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned long long *) &VtArray_Sl_uint64_t_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUInt64Array_SetValue(void * jarg1, int jarg2, unsigned long long jarg3) {
  VtArray< uint64_t > *arg1 = (VtArray< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (VtArray< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_uint64_t_Sg__SetValue(arg1,arg2,(unsigned long long const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUIntArray__SWIG_0() {
  void * jresult ;
  VtArray< unsigned int > *result = 0 ;
  
  result = (VtArray< unsigned int > *)new VtArray< unsigned int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUIntArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< unsigned int >::ElementType *arg2 = (VtArray< unsigned int >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< unsigned int > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< unsigned int >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< unsigned int > *)new VtArray< unsigned int >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUIntArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< unsigned int >::ElementType *arg2 = (VtArray< unsigned int >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< unsigned int > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< unsigned int >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< unsigned int > *)new VtArray< unsigned int >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUIntArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< unsigned int > *arg1 = 0 ;
  VtArray< unsigned int > *result = 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< unsigned int > *)new VtArray< unsigned int >((VtArray< unsigned int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUIntArray__SWIG_5(unsigned long jarg1, unsigned int jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< unsigned int >::value_type *arg2 = 0 ;
  VtArray< unsigned int >::value_type temp2 ;
  VtArray< unsigned int > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (VtArray< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  result = (VtArray< unsigned int > *)new VtArray< unsigned int >(arg1,(VtArray< unsigned int >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtUIntArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< unsigned int > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< unsigned int > *)new VtArray< unsigned int >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtUIntArray(void * jarg1) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_push_back(void * jarg1, unsigned int jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  VtArray< unsigned int >::ElementType *arg2 = 0 ;
  VtArray< unsigned int >::ElementType temp2 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  temp2 = (VtArray< unsigned int >::ElementType)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((VtArray< unsigned int >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_pop_back(void * jarg1) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtUIntArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  result = ((VtArray< unsigned int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtUIntArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  result = ((VtArray< unsigned int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUIntArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  result = (bool)((VtArray< unsigned int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_clear(void * jarg1) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_assign(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  size_t arg2 ;
  VtArray< unsigned int >::value_type *arg3 = 0 ;
  VtArray< unsigned int >::value_type temp3 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (VtArray< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  (arg1)->assign(arg2,(VtArray< unsigned int >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_swap(void * jarg1, void * jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  VtArray< unsigned int > *arg2 = 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (VtArray< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned int > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUIntArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  VtArray< unsigned int > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (VtArray< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< unsigned int > const *)arg1)->IsIdentical((VtArray< unsigned int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUIntArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< unsigned int > *arg1 = 0 ;
  VtArray< unsigned int > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned int > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_unsigned_SS_int_Sg__Equals((VtArray< unsigned int > const &)*arg1,(VtArray< unsigned int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtUIntArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  result = VtArray_Sl_unsigned_SS_int_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_CopyToArray__SWIG_0(void * jarg1, unsigned int* jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_unsigned_SS_int_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_CopyFromArray__SWIG_0(void * jarg1, unsigned int* jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_unsigned_SS_int_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_unsigned_SS_int_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_unsigned_SS_int_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtUIntArray_GetValue(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *result = 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int *) &VtArray_Sl_unsigned_SS_int_Sg__GetValue(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtUIntArray_SetValue(void * jarg1, int jarg2, unsigned int jarg3) {
  VtArray< unsigned int > *arg1 = (VtArray< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  VtArray_Sl_unsigned_SS_int_Sg__SetValue(arg1,arg2,(unsigned int const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2dArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec2d > *result = 0 ;
  
  result = (VtArray< GfVec2d > *)new VtArray< GfVec2d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2dArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2d >::ElementType *arg2 = (VtArray< GfVec2d >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec2d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec2d > *)new VtArray< GfVec2d >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2dArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2d >::ElementType *arg2 = (VtArray< GfVec2d >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec2d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec2d > *)new VtArray< GfVec2d >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2dArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2d > *arg1 = 0 ;
  VtArray< GfVec2d > *result = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2d > *)new VtArray< GfVec2d >((VtArray< GfVec2d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2dArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2d >::value_type *arg2 = 0 ;
  VtArray< GfVec2d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec2d >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2d > *)new VtArray< GfVec2d >(arg1,(VtArray< GfVec2d >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2dArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec2d > *)new VtArray< GfVec2d >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec2dArray(void * jarg1) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  VtArray< GfVec2d >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (VtArray< GfVec2d >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec2d >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_pop_back(void * jarg1) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2dArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  result = ((VtArray< GfVec2d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2dArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  result = ((VtArray< GfVec2d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2dArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  result = (bool)((VtArray< GfVec2d > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_clear(void * jarg1) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec2d >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec2d >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec2d >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  VtArray< GfVec2d > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (VtArray< GfVec2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2dArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  VtArray< GfVec2d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (VtArray< GfVec2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec2d > const *)arg1)->IsIdentical((VtArray< GfVec2d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2dArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2d > *arg1 = 0 ;
  VtArray< GfVec2d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec2d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec2d_Sg__Equals((VtArray< GfVec2d > const &)*arg1,(VtArray< GfVec2d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec2dArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  result = VtArray_Sl_GfVec2d_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_CopyToArray__SWIG_0(void * jarg1, GfVec2d* jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  GfVec2d *arg2 = (GfVec2d *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2d_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_CopyFromArray__SWIG_0(void * jarg1, GfVec2d* jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  GfVec2d *arg2 = (GfVec2d *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2d_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2d_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2d_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec2dArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  int arg2 ;
  GfVec2d *result = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec2d *) &VtArray_Sl_GfVec2d_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2dArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec2d > *arg1 = (VtArray< GfVec2d > *) 0 ;
  int arg2 ;
  GfVec2d *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec2d_Sg__SetValue(arg1,arg2,(GfVec2d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2fArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec2f > *result = 0 ;
  
  result = (VtArray< GfVec2f > *)new VtArray< GfVec2f >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2fArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2f >::ElementType *arg2 = (VtArray< GfVec2f >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec2f > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2f >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec2f > *)new VtArray< GfVec2f >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2fArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2f >::ElementType *arg2 = (VtArray< GfVec2f >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec2f > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2f >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec2f > *)new VtArray< GfVec2f >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2fArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2f > *arg1 = 0 ;
  VtArray< GfVec2f > *result = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2f > *)new VtArray< GfVec2f >((VtArray< GfVec2f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2fArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2f >::value_type *arg2 = 0 ;
  VtArray< GfVec2f > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec2f >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2f > *)new VtArray< GfVec2f >(arg1,(VtArray< GfVec2f >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2fArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2f > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec2f > *)new VtArray< GfVec2f >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec2fArray(void * jarg1) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  VtArray< GfVec2f >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (VtArray< GfVec2f >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec2f >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_pop_back(void * jarg1) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2fArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  result = ((VtArray< GfVec2f > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2fArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  result = ((VtArray< GfVec2f > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2fArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  result = (bool)((VtArray< GfVec2f > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_clear(void * jarg1) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec2f >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec2f >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec2f >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  VtArray< GfVec2f > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (VtArray< GfVec2f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2fArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  VtArray< GfVec2f > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (VtArray< GfVec2f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec2f > const *)arg1)->IsIdentical((VtArray< GfVec2f > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2fArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2f > *arg1 = 0 ;
  VtArray< GfVec2f > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec2f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec2f_Sg__Equals((VtArray< GfVec2f > const &)*arg1,(VtArray< GfVec2f > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec2fArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  result = VtArray_Sl_GfVec2f_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_CopyToArray__SWIG_0(void * jarg1, GfVec2f* jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  GfVec2f *arg2 = (GfVec2f *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2f_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_CopyFromArray__SWIG_0(void * jarg1, GfVec2f* jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  GfVec2f *arg2 = (GfVec2f *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2f_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2f_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2f_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec2fArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  int arg2 ;
  GfVec2f *result = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec2f *) &VtArray_Sl_GfVec2f_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2fArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec2f > *arg1 = (VtArray< GfVec2f > *) 0 ;
  int arg2 ;
  GfVec2f *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec2f_Sg__SetValue(arg1,arg2,(GfVec2f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2hArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec2h > *result = 0 ;
  
  result = (VtArray< GfVec2h > *)new VtArray< GfVec2h >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2hArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2h >::ElementType *arg2 = (VtArray< GfVec2h >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec2h > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2h >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec2h > *)new VtArray< GfVec2h >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2hArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2h >::ElementType *arg2 = (VtArray< GfVec2h >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec2h > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2h >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec2h > *)new VtArray< GfVec2h >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2hArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2h > *arg1 = 0 ;
  VtArray< GfVec2h > *result = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2h > *)new VtArray< GfVec2h >((VtArray< GfVec2h > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2hArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2h >::value_type *arg2 = 0 ;
  VtArray< GfVec2h > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec2h >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2h > *)new VtArray< GfVec2h >(arg1,(VtArray< GfVec2h >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2hArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2h > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec2h > *)new VtArray< GfVec2h >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec2hArray(void * jarg1) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  VtArray< GfVec2h >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (VtArray< GfVec2h >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec2h >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_pop_back(void * jarg1) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2hArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  result = ((VtArray< GfVec2h > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2hArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  result = ((VtArray< GfVec2h > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2hArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  result = (bool)((VtArray< GfVec2h > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_clear(void * jarg1) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec2h >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec2h >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec2h >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  VtArray< GfVec2h > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (VtArray< GfVec2h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2hArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  VtArray< GfVec2h > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (VtArray< GfVec2h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec2h > const *)arg1)->IsIdentical((VtArray< GfVec2h > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2hArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2h > *arg1 = 0 ;
  VtArray< GfVec2h > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec2h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec2h_Sg__Equals((VtArray< GfVec2h > const &)*arg1,(VtArray< GfVec2h > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec2hArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  result = VtArray_Sl_GfVec2h_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_CopyToArray__SWIG_0(void * jarg1, GfVec2h* jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  GfVec2h *arg2 = (GfVec2h *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2h_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_CopyFromArray__SWIG_0(void * jarg1, GfVec2h* jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  GfVec2h *arg2 = (GfVec2h *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2h_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2h_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2h_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec2hArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  int arg2 ;
  GfVec2h *result = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec2h *) &VtArray_Sl_GfVec2h_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2hArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec2h > *arg1 = (VtArray< GfVec2h > *) 0 ;
  int arg2 ;
  GfVec2h *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2h *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec2h_Sg__SetValue(arg1,arg2,(GfVec2h const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2iArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec2i > *result = 0 ;
  
  result = (VtArray< GfVec2i > *)new VtArray< GfVec2i >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2iArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2i >::ElementType *arg2 = (VtArray< GfVec2i >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec2i > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2i >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec2i > *)new VtArray< GfVec2i >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2iArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec2i >::ElementType *arg2 = (VtArray< GfVec2i >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec2i > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec2i >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec2i > *)new VtArray< GfVec2i >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2iArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2i > *arg1 = 0 ;
  VtArray< GfVec2i > *result = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2i > *)new VtArray< GfVec2i >((VtArray< GfVec2i > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2iArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2i >::value_type *arg2 = 0 ;
  VtArray< GfVec2i > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec2i >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec2i > *)new VtArray< GfVec2i >(arg1,(VtArray< GfVec2i >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec2iArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec2i > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec2i > *)new VtArray< GfVec2i >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec2iArray(void * jarg1) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  VtArray< GfVec2i >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (VtArray< GfVec2i >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec2i >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_pop_back(void * jarg1) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2iArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  result = ((VtArray< GfVec2i > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec2iArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  result = ((VtArray< GfVec2i > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2iArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  result = (bool)((VtArray< GfVec2i > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_clear(void * jarg1) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec2i >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec2i >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec2i >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  VtArray< GfVec2i > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (VtArray< GfVec2i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2iArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  VtArray< GfVec2i > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (VtArray< GfVec2i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec2i > const *)arg1)->IsIdentical((VtArray< GfVec2i > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec2iArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec2i > *arg1 = 0 ;
  VtArray< GfVec2i > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec2i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec2i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec2i_Sg__Equals((VtArray< GfVec2i > const &)*arg1,(VtArray< GfVec2i > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec2iArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  result = VtArray_Sl_GfVec2i_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_CopyToArray__SWIG_0(void * jarg1, GfVec2i* jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  GfVec2i *arg2 = (GfVec2i *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2i_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_CopyFromArray__SWIG_0(void * jarg1, GfVec2i* jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  GfVec2i *arg2 = (GfVec2i *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec2i_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2i_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec2i_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec2iArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  int arg2 ;
  GfVec2i *result = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec2i *) &VtArray_Sl_GfVec2i_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec2iArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec2i > *arg1 = (VtArray< GfVec2i > *) 0 ;
  int arg2 ;
  GfVec2i *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec2i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec2i_Sg__SetValue(arg1,arg2,(GfVec2i const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3dArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec3d > *result = 0 ;
  
  result = (VtArray< GfVec3d > *)new VtArray< GfVec3d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3dArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3d >::ElementType *arg2 = (VtArray< GfVec3d >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec3d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec3d > *)new VtArray< GfVec3d >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3dArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3d >::ElementType *arg2 = (VtArray< GfVec3d >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec3d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec3d > *)new VtArray< GfVec3d >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3dArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3d > *arg1 = 0 ;
  VtArray< GfVec3d > *result = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3d > *)new VtArray< GfVec3d >((VtArray< GfVec3d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3dArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3d >::value_type *arg2 = 0 ;
  VtArray< GfVec3d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec3d >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3d > *)new VtArray< GfVec3d >(arg1,(VtArray< GfVec3d >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3dArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec3d > *)new VtArray< GfVec3d >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec3dArray(void * jarg1) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  VtArray< GfVec3d >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (VtArray< GfVec3d >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec3d >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_pop_back(void * jarg1) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3dArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  result = ((VtArray< GfVec3d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3dArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  result = ((VtArray< GfVec3d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3dArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  result = (bool)((VtArray< GfVec3d > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_clear(void * jarg1) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec3d >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec3d >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec3d >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  VtArray< GfVec3d > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (VtArray< GfVec3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3dArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  VtArray< GfVec3d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (VtArray< GfVec3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec3d > const *)arg1)->IsIdentical((VtArray< GfVec3d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3dArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3d > *arg1 = 0 ;
  VtArray< GfVec3d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec3d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec3d_Sg__Equals((VtArray< GfVec3d > const &)*arg1,(VtArray< GfVec3d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec3dArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  result = VtArray_Sl_GfVec3d_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_CopyToArray__SWIG_0(void * jarg1, GfVec3d* jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3d_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_CopyFromArray__SWIG_0(void * jarg1, GfVec3d* jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3d_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3d_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3d_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec3dArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  int arg2 ;
  GfVec3d *result = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec3d *) &VtArray_Sl_GfVec3d_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3dArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec3d > *arg1 = (VtArray< GfVec3d > *) 0 ;
  int arg2 ;
  GfVec3d *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec3d_Sg__SetValue(arg1,arg2,(GfVec3d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3fArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec3f > *result = 0 ;
  
  result = (VtArray< GfVec3f > *)new VtArray< GfVec3f >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3fArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3f >::ElementType *arg2 = (VtArray< GfVec3f >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec3f > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3f >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec3f > *)new VtArray< GfVec3f >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3fArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3f >::ElementType *arg2 = (VtArray< GfVec3f >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec3f > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3f >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec3f > *)new VtArray< GfVec3f >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3fArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3f > *arg1 = 0 ;
  VtArray< GfVec3f > *result = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3f > *)new VtArray< GfVec3f >((VtArray< GfVec3f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3fArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3f >::value_type *arg2 = 0 ;
  VtArray< GfVec3f > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec3f >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3f > *)new VtArray< GfVec3f >(arg1,(VtArray< GfVec3f >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3fArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3f > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec3f > *)new VtArray< GfVec3f >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec3fArray(void * jarg1) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  VtArray< GfVec3f >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (VtArray< GfVec3f >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec3f >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_pop_back(void * jarg1) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3fArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  result = ((VtArray< GfVec3f > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3fArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  result = ((VtArray< GfVec3f > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3fArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  result = (bool)((VtArray< GfVec3f > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_clear(void * jarg1) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec3f >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec3f >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec3f >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  VtArray< GfVec3f > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (VtArray< GfVec3f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3fArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  VtArray< GfVec3f > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (VtArray< GfVec3f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec3f > const *)arg1)->IsIdentical((VtArray< GfVec3f > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3fArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3f > *arg1 = 0 ;
  VtArray< GfVec3f > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec3f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec3f_Sg__Equals((VtArray< GfVec3f > const &)*arg1,(VtArray< GfVec3f > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec3fArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  result = VtArray_Sl_GfVec3f_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_CopyToArray__SWIG_0(void * jarg1, GfVec3f* jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3f_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_CopyFromArray__SWIG_0(void * jarg1, GfVec3f* jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3f_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3f_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3f_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec3fArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  int arg2 ;
  GfVec3f *result = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec3f *) &VtArray_Sl_GfVec3f_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3fArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec3f > *arg1 = (VtArray< GfVec3f > *) 0 ;
  int arg2 ;
  GfVec3f *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec3f_Sg__SetValue(arg1,arg2,(GfVec3f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3hArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec3h > *result = 0 ;
  
  result = (VtArray< GfVec3h > *)new VtArray< GfVec3h >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3hArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3h >::ElementType *arg2 = (VtArray< GfVec3h >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec3h > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3h >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec3h > *)new VtArray< GfVec3h >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3hArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3h >::ElementType *arg2 = (VtArray< GfVec3h >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec3h > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3h >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec3h > *)new VtArray< GfVec3h >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3hArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3h > *arg1 = 0 ;
  VtArray< GfVec3h > *result = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3h > *)new VtArray< GfVec3h >((VtArray< GfVec3h > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3hArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3h >::value_type *arg2 = 0 ;
  VtArray< GfVec3h > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec3h >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3h > *)new VtArray< GfVec3h >(arg1,(VtArray< GfVec3h >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3hArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3h > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec3h > *)new VtArray< GfVec3h >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec3hArray(void * jarg1) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  VtArray< GfVec3h >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (VtArray< GfVec3h >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec3h >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_pop_back(void * jarg1) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3hArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  result = ((VtArray< GfVec3h > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3hArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  result = ((VtArray< GfVec3h > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3hArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  result = (bool)((VtArray< GfVec3h > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_clear(void * jarg1) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec3h >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec3h >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec3h >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  VtArray< GfVec3h > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (VtArray< GfVec3h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3hArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  VtArray< GfVec3h > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (VtArray< GfVec3h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec3h > const *)arg1)->IsIdentical((VtArray< GfVec3h > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3hArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3h > *arg1 = 0 ;
  VtArray< GfVec3h > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec3h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec3h_Sg__Equals((VtArray< GfVec3h > const &)*arg1,(VtArray< GfVec3h > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec3hArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  result = VtArray_Sl_GfVec3h_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_CopyToArray__SWIG_0(void * jarg1, GfVec3h* jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3h_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_CopyFromArray__SWIG_0(void * jarg1, GfVec3h* jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3h_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3h_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3h_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec3hArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  int arg2 ;
  GfVec3h *result = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec3h *) &VtArray_Sl_GfVec3h_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3hArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec3h > *arg1 = (VtArray< GfVec3h > *) 0 ;
  int arg2 ;
  GfVec3h *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3h *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec3h_Sg__SetValue(arg1,arg2,(GfVec3h const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3iArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec3i > *result = 0 ;
  
  result = (VtArray< GfVec3i > *)new VtArray< GfVec3i >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3iArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3i >::ElementType *arg2 = (VtArray< GfVec3i >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec3i > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3i >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec3i > *)new VtArray< GfVec3i >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3iArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec3i >::ElementType *arg2 = (VtArray< GfVec3i >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec3i > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec3i >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec3i > *)new VtArray< GfVec3i >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3iArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3i > *arg1 = 0 ;
  VtArray< GfVec3i > *result = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3i > *)new VtArray< GfVec3i >((VtArray< GfVec3i > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3iArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3i >::value_type *arg2 = 0 ;
  VtArray< GfVec3i > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec3i >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec3i > *)new VtArray< GfVec3i >(arg1,(VtArray< GfVec3i >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec3iArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec3i > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec3i > *)new VtArray< GfVec3i >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec3iArray(void * jarg1) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  VtArray< GfVec3i >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (VtArray< GfVec3i >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec3i >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_pop_back(void * jarg1) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3iArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  result = ((VtArray< GfVec3i > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec3iArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  result = ((VtArray< GfVec3i > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3iArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  result = (bool)((VtArray< GfVec3i > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_clear(void * jarg1) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec3i >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec3i >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec3i >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  VtArray< GfVec3i > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (VtArray< GfVec3i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3iArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  VtArray< GfVec3i > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (VtArray< GfVec3i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec3i > const *)arg1)->IsIdentical((VtArray< GfVec3i > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec3iArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec3i > *arg1 = 0 ;
  VtArray< GfVec3i > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec3i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec3i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec3i_Sg__Equals((VtArray< GfVec3i > const &)*arg1,(VtArray< GfVec3i > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec3iArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  result = VtArray_Sl_GfVec3i_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_CopyToArray__SWIG_0(void * jarg1, GfVec3i* jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  GfVec3i *arg2 = (GfVec3i *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3i_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_CopyFromArray__SWIG_0(void * jarg1, GfVec3i* jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  GfVec3i *arg2 = (GfVec3i *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec3i_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3i_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec3i_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec3iArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  int arg2 ;
  GfVec3i *result = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec3i *) &VtArray_Sl_GfVec3i_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec3iArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec3i > *arg1 = (VtArray< GfVec3i > *) 0 ;
  int arg2 ;
  GfVec3i *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec3i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec3i_Sg__SetValue(arg1,arg2,(GfVec3i const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4dArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec4d > *result = 0 ;
  
  result = (VtArray< GfVec4d > *)new VtArray< GfVec4d >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4dArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4d >::ElementType *arg2 = (VtArray< GfVec4d >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec4d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec4d > *)new VtArray< GfVec4d >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4dArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4d >::ElementType *arg2 = (VtArray< GfVec4d >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec4d > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4d >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec4d > *)new VtArray< GfVec4d >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4dArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4d > *arg1 = 0 ;
  VtArray< GfVec4d > *result = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4d > *)new VtArray< GfVec4d >((VtArray< GfVec4d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4dArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4d >::value_type *arg2 = 0 ;
  VtArray< GfVec4d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec4d >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4d > *)new VtArray< GfVec4d >(arg1,(VtArray< GfVec4d >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4dArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4d > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec4d > *)new VtArray< GfVec4d >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec4dArray(void * jarg1) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  VtArray< GfVec4d >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (VtArray< GfVec4d >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec4d >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_pop_back(void * jarg1) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4dArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  result = ((VtArray< GfVec4d > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4dArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  result = ((VtArray< GfVec4d > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4dArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  result = (bool)((VtArray< GfVec4d > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_clear(void * jarg1) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec4d >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec4d >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec4d >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  VtArray< GfVec4d > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (VtArray< GfVec4d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4dArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  VtArray< GfVec4d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (VtArray< GfVec4d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec4d > const *)arg1)->IsIdentical((VtArray< GfVec4d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4dArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4d > *arg1 = 0 ;
  VtArray< GfVec4d > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec4d > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec4d_Sg__Equals((VtArray< GfVec4d > const &)*arg1,(VtArray< GfVec4d > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec4dArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  result = VtArray_Sl_GfVec4d_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_CopyToArray__SWIG_0(void * jarg1, GfVec4d* jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  GfVec4d *arg2 = (GfVec4d *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4d_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_CopyFromArray__SWIG_0(void * jarg1, GfVec4d* jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  GfVec4d *arg2 = (GfVec4d *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4d_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4d_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4d_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec4dArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  int arg2 ;
  GfVec4d *result = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec4d *) &VtArray_Sl_GfVec4d_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4dArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec4d > *arg1 = (VtArray< GfVec4d > *) 0 ;
  int arg2 ;
  GfVec4d *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec4d_Sg__SetValue(arg1,arg2,(GfVec4d const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4fArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec4f > *result = 0 ;
  
  result = (VtArray< GfVec4f > *)new VtArray< GfVec4f >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4fArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4f >::ElementType *arg2 = (VtArray< GfVec4f >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec4f > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4f >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec4f > *)new VtArray< GfVec4f >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4fArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4f >::ElementType *arg2 = (VtArray< GfVec4f >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec4f > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4f >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec4f > *)new VtArray< GfVec4f >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4fArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4f > *arg1 = 0 ;
  VtArray< GfVec4f > *result = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4f > *)new VtArray< GfVec4f >((VtArray< GfVec4f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4fArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4f >::value_type *arg2 = 0 ;
  VtArray< GfVec4f > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec4f >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4f > *)new VtArray< GfVec4f >(arg1,(VtArray< GfVec4f >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4fArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4f > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec4f > *)new VtArray< GfVec4f >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec4fArray(void * jarg1) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  VtArray< GfVec4f >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (VtArray< GfVec4f >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec4f >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_pop_back(void * jarg1) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4fArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  result = ((VtArray< GfVec4f > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4fArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  result = ((VtArray< GfVec4f > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4fArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  result = (bool)((VtArray< GfVec4f > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_clear(void * jarg1) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec4f >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec4f >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec4f >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  VtArray< GfVec4f > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (VtArray< GfVec4f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4fArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  VtArray< GfVec4f > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (VtArray< GfVec4f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec4f > const *)arg1)->IsIdentical((VtArray< GfVec4f > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4fArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4f > *arg1 = 0 ;
  VtArray< GfVec4f > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec4f > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec4f_Sg__Equals((VtArray< GfVec4f > const &)*arg1,(VtArray< GfVec4f > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec4fArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  result = VtArray_Sl_GfVec4f_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_CopyToArray__SWIG_0(void * jarg1, GfVec4f* jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  GfVec4f *arg2 = (GfVec4f *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4f_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_CopyFromArray__SWIG_0(void * jarg1, GfVec4f* jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  GfVec4f *arg2 = (GfVec4f *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4f_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4f_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4f_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec4fArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  int arg2 ;
  GfVec4f *result = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec4f *) &VtArray_Sl_GfVec4f_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4fArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec4f > *arg1 = (VtArray< GfVec4f > *) 0 ;
  int arg2 ;
  GfVec4f *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec4f_Sg__SetValue(arg1,arg2,(GfVec4f const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4hArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec4h > *result = 0 ;
  
  result = (VtArray< GfVec4h > *)new VtArray< GfVec4h >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4hArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4h >::ElementType *arg2 = (VtArray< GfVec4h >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec4h > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4h >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec4h > *)new VtArray< GfVec4h >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4hArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4h >::ElementType *arg2 = (VtArray< GfVec4h >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec4h > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4h >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec4h > *)new VtArray< GfVec4h >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4hArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4h > *arg1 = 0 ;
  VtArray< GfVec4h > *result = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4h > *)new VtArray< GfVec4h >((VtArray< GfVec4h > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4hArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4h >::value_type *arg2 = 0 ;
  VtArray< GfVec4h > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec4h >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4h > *)new VtArray< GfVec4h >(arg1,(VtArray< GfVec4h >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4hArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4h > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec4h > *)new VtArray< GfVec4h >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec4hArray(void * jarg1) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  VtArray< GfVec4h >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (VtArray< GfVec4h >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec4h >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_pop_back(void * jarg1) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4hArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  result = ((VtArray< GfVec4h > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4hArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  result = ((VtArray< GfVec4h > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4hArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  result = (bool)((VtArray< GfVec4h > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_clear(void * jarg1) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec4h >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec4h >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec4h >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  VtArray< GfVec4h > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (VtArray< GfVec4h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4hArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  VtArray< GfVec4h > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (VtArray< GfVec4h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec4h > const *)arg1)->IsIdentical((VtArray< GfVec4h > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4hArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4h > *arg1 = 0 ;
  VtArray< GfVec4h > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec4h > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec4h_Sg__Equals((VtArray< GfVec4h > const &)*arg1,(VtArray< GfVec4h > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec4hArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  result = VtArray_Sl_GfVec4h_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_CopyToArray__SWIG_0(void * jarg1, GfVec4h* jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  GfVec4h *arg2 = (GfVec4h *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4h_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_CopyFromArray__SWIG_0(void * jarg1, GfVec4h* jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  GfVec4h *arg2 = (GfVec4h *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4h_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4h_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4h_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec4hArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  int arg2 ;
  GfVec4h *result = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec4h *) &VtArray_Sl_GfVec4h_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4hArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec4h > *arg1 = (VtArray< GfVec4h > *) 0 ;
  int arg2 ;
  GfVec4h *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4h *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec4h_Sg__SetValue(arg1,arg2,(GfVec4h const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4iArray__SWIG_0() {
  void * jresult ;
  VtArray< GfVec4i > *result = 0 ;
  
  result = (VtArray< GfVec4i > *)new VtArray< GfVec4i >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4iArray__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4i >::ElementType *arg2 = (VtArray< GfVec4i >::ElementType *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  VtArray< GfVec4i > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4i >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (VtArray< GfVec4i > *)new VtArray< GfVec4i >(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4iArray__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Vt_ArrayForeignDataSource *arg1 = (Vt_ArrayForeignDataSource *) 0 ;
  VtArray< GfVec4i >::ElementType *arg2 = (VtArray< GfVec4i >::ElementType *) 0 ;
  size_t arg3 ;
  VtArray< GfVec4i > *result = 0 ;
  
  arg1 = (Vt_ArrayForeignDataSource *)jarg1; 
  arg2 = (VtArray< GfVec4i >::ElementType *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (VtArray< GfVec4i > *)new VtArray< GfVec4i >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4iArray__SWIG_3(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4i > *arg1 = 0 ;
  VtArray< GfVec4i > *result = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i > const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4i > *)new VtArray< GfVec4i >((VtArray< GfVec4i > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4iArray__SWIG_5(unsigned long jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4i >::value_type *arg2 = 0 ;
  VtArray< GfVec4i > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (VtArray< GfVec4i >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i >::value_type const & type is null", 0);
    return 0;
  } 
  result = (VtArray< GfVec4i > *)new VtArray< GfVec4i >(arg1,(VtArray< GfVec4i >::value_type const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtVec4iArray__SWIG_6(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  VtArray< GfVec4i > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (VtArray< GfVec4i > *)new VtArray< GfVec4i >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtVec4iArray(void * jarg1) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_push_back(void * jarg1, void * jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  VtArray< GfVec4i >::ElementType *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (VtArray< GfVec4i >::ElementType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i >::ElementType const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((VtArray< GfVec4i >::ElementType const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_pop_back(void * jarg1) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4iArray_size(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  result = ((VtArray< GfVec4i > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtVec4iArray_capacity(void * jarg1) {
  unsigned long jresult ;
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  size_t result;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  result = ((VtArray< GfVec4i > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4iArray_empty(void * jarg1) {
  unsigned int jresult ;
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  result = (bool)((VtArray< GfVec4i > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_reserve(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_resize(void * jarg1, unsigned long jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  size_t arg2 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_clear(void * jarg1) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_assign(void * jarg1, unsigned long jarg2, void * jarg3) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  size_t arg2 ;
  VtArray< GfVec4i >::value_type *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtArray< GfVec4i >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->assign(arg2,(VtArray< GfVec4i >::value_type const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_swap(void * jarg1, void * jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  VtArray< GfVec4i > *arg2 = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (VtArray< GfVec4i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4iArray_IsIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  VtArray< GfVec4i > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (VtArray< GfVec4i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i > const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtArray< GfVec4i > const *)arg1)->IsIdentical((VtArray< GfVec4i > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtVec4iArray_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtArray< GfVec4i > *arg1 = 0 ;
  VtArray< GfVec4i > *arg2 = 0 ;
  bool result;
  
  arg1 = (VtArray< GfVec4i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i > const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< GfVec4i > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i > const & type is null", 0);
    return 0;
  } 
  result = (bool)VtArray_Sl_GfVec4i_Sg__Equals((VtArray< GfVec4i > const &)*arg1,(VtArray< GfVec4i > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtVec4iArray_ToString(void * jarg1) {
  char * jresult ;
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  std::string result;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  result = VtArray_Sl_GfVec4i_Sg__ToString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_CopyToArray__SWIG_0(void * jarg1, GfVec4i* jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  GfVec4i *arg2 = (GfVec4i *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4i_Sg__CopyToArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_CopyFromArray__SWIG_0(void * jarg1, GfVec4i* jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  GfVec4i *arg2 = (GfVec4i *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = jarg2;
  VtArray_Sl_GfVec4i_Sg__CopyFromArray__SWIG_0(arg1,arg2);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_CopyToArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4i_Sg__CopyToArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_CopyFromArray__SWIG_1(void * jarg1, void * jarg2) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (void *)jarg2; 
  VtArray_Sl_GfVec4i_Sg__CopyFromArray__SWIG_1(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtVec4iArray_GetValue(void * jarg1, int jarg2) {
  void * jresult ;
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  int arg2 ;
  GfVec4i *result = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GfVec4i *) &VtArray_Sl_GfVec4i_Sg__GetValue(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtVec4iArray_SetValue(void * jarg1, int jarg2, void * jarg3) {
  VtArray< GfVec4i > *arg1 = (VtArray< GfVec4i > *) 0 ;
  int arg2 ;
  GfVec4i *arg3 = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (GfVec4i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return ;
  } 
  VtArray_Sl_GfVec4i_Sg__SetValue(arg1,arg2,(GfVec4i const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfHalf__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfHalf result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfHalf((VtValue const &)*arg1);
  jresult = new GfHalf((const GfHalf &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfHalf__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfHalf *arg2 = (GfHalf *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfHalf *)jarg2; 
  VtValueToGfHalf((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfMatrix2d__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfMatrix2d result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfMatrix2d((VtValue const &)*arg1);
  jresult = new GfMatrix2d((const GfMatrix2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfMatrix2d__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfMatrix2d *arg2 = (GfMatrix2d *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfMatrix2d *)jarg2; 
  VtValueToGfMatrix2d((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfMatrix3d__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfMatrix3d result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfMatrix3d((VtValue const &)*arg1);
  jresult = new GfMatrix3d((const GfMatrix3d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfMatrix3d__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfMatrix3d *arg2 = (GfMatrix3d *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfMatrix3d *)jarg2; 
  VtValueToGfMatrix3d((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfMatrix4d__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfMatrix4d result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfMatrix4d((VtValue const &)*arg1);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfMatrix4d__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  VtValueToGfMatrix4d((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfQuatd__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfQuatd result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfQuatd((VtValue const &)*arg1);
  jresult = new GfQuatd((const GfQuatd &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfQuatd__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfQuatd *arg2 = (GfQuatd *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfQuatd *)jarg2; 
  VtValueToGfQuatd((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfQuatf__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfQuatf result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfQuatf((VtValue const &)*arg1);
  jresult = new GfQuatf((const GfQuatf &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfQuatf__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfQuatf *arg2 = (GfQuatf *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfQuatf *)jarg2; 
  VtValueToGfQuatf((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfQuath__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfQuath result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfQuath((VtValue const &)*arg1);
  jresult = new GfQuath((const GfQuath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfQuath__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfQuath *arg2 = (GfQuath *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfQuath *)jarg2; 
  VtValueToGfQuath((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec2d__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec2d result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec2d((VtValue const &)*arg1);
  jresult = new GfVec2d((const GfVec2d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec2d__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec2d *arg2 = (GfVec2d *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec2d *)jarg2; 
  VtValueToGfVec2d((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec2f__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec2f result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec2f((VtValue const &)*arg1);
  jresult = new GfVec2f((const GfVec2f &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec2f__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec2f *arg2 = (GfVec2f *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec2f *)jarg2; 
  VtValueToGfVec2f((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec2h__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec2h result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec2h((VtValue const &)*arg1);
  jresult = new GfVec2h((const GfVec2h &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec2h__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec2h *arg2 = (GfVec2h *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec2h *)jarg2; 
  VtValueToGfVec2h((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec2i__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec2i result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec2i((VtValue const &)*arg1);
  jresult = new GfVec2i((const GfVec2i &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec2i__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec2i *arg2 = (GfVec2i *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec2i *)jarg2; 
  VtValueToGfVec2i((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec3d__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec3d result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec3d((VtValue const &)*arg1);
  jresult = new GfVec3d((const GfVec3d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec3d__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec3d *arg2 = (GfVec3d *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3d *)jarg2; 
  VtValueToGfVec3d((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec3f__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec3f result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec3f((VtValue const &)*arg1);
  jresult = new GfVec3f((const GfVec3f &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec3f__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3f *)jarg2; 
  VtValueToGfVec3f((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec3h__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec3h result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec3h((VtValue const &)*arg1);
  jresult = new GfVec3h((const GfVec3h &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec3h__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec3h *arg2 = (GfVec3h *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3h *)jarg2; 
  VtValueToGfVec3h((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec3i__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec3i result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec3i((VtValue const &)*arg1);
  jresult = new GfVec3i((const GfVec3i &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec3i__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec3i *arg2 = (GfVec3i *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec3i *)jarg2; 
  VtValueToGfVec3i((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec4d__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec4d result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec4d((VtValue const &)*arg1);
  jresult = new GfVec4d((const GfVec4d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec4d__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec4d *arg2 = (GfVec4d *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec4d *)jarg2; 
  VtValueToGfVec4d((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec4f__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec4f result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec4f((VtValue const &)*arg1);
  jresult = new GfVec4f((const GfVec4f &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec4f__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec4f *arg2 = (GfVec4f *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec4f *)jarg2; 
  VtValueToGfVec4f((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec4h__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec4h result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec4h((VtValue const &)*arg1);
  jresult = new GfVec4h((const GfVec4h &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec4h__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec4h *arg2 = (GfVec4h *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec4h *)jarg2; 
  VtValueToGfVec4h((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToGfVec4i__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  GfVec4i result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToGfVec4i((VtValue const &)*arg1);
  jresult = new GfVec4i((const GfVec4i &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToGfVec4i__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  GfVec4i *arg2 = (GfVec4i *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (GfVec4i *)jarg2; 
  VtValueToGfVec4i((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToSdfAssetPath__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  SdfAssetPath result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToSdfAssetPath((VtValue const &)*arg1);
  jresult = new SdfAssetPath((const SdfAssetPath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToSdfAssetPath__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  SdfAssetPath *arg2 = (SdfAssetPath *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (SdfAssetPath *)jarg2; 
  VtValueToSdfAssetPath((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToSdfAssetPathArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  SdfAssetPathArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToSdfAssetPathArray((VtValue const &)*arg1);
  jresult = new SdfAssetPathArray((const SdfAssetPathArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToSdfAssetPathArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  SdfAssetPathArray *arg2 = (SdfAssetPathArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (SdfAssetPathArray *)jarg2; 
  VtValueToSdfAssetPathArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToTfToken__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  TfToken result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToTfToken((VtValue const &)*arg1);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToTfToken__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (TfToken *)jarg2; 
  VtValueToTfToken((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtBoolArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtBoolArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtBoolArray((VtValue const &)*arg1);
  jresult = new VtBoolArray((const VtBoolArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtBoolArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtBoolArray *arg2 = (VtBoolArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtBoolArray *)jarg2; 
  VtValueToVtBoolArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtDoubleArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtDoubleArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtDoubleArray((VtValue const &)*arg1);
  jresult = new VtDoubleArray((const VtDoubleArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtDoubleArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtDoubleArray *arg2 = (VtDoubleArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtDoubleArray *)jarg2; 
  VtValueToVtDoubleArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtFloatArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtFloatArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtFloatArray((VtValue const &)*arg1);
  jresult = new VtFloatArray((const VtFloatArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtFloatArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtFloatArray *arg2 = (VtFloatArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtFloatArray *)jarg2; 
  VtValueToVtFloatArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtHalfArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtHalfArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtHalfArray((VtValue const &)*arg1);
  jresult = new VtHalfArray((const VtHalfArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtHalfArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtHalfArray *arg2 = (VtHalfArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtHalfArray *)jarg2; 
  VtValueToVtHalfArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtInt64Array__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtInt64Array result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtInt64Array((VtValue const &)*arg1);
  jresult = new VtInt64Array((const VtInt64Array &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtInt64Array__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtInt64Array *arg2 = (VtInt64Array *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtInt64Array *)jarg2; 
  VtValueToVtInt64Array((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtIntArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtIntArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtIntArray((VtValue const &)*arg1);
  jresult = new VtIntArray((const VtIntArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtIntArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtIntArray *)jarg2; 
  VtValueToVtIntArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtMatrix2dArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtMatrix2dArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtMatrix2dArray((VtValue const &)*arg1);
  jresult = new VtMatrix2dArray((const VtMatrix2dArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtMatrix2dArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtMatrix2dArray *arg2 = (VtMatrix2dArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtMatrix2dArray *)jarg2; 
  VtValueToVtMatrix2dArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtMatrix3dArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtMatrix3dArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtMatrix3dArray((VtValue const &)*arg1);
  jresult = new VtMatrix3dArray((const VtMatrix3dArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtMatrix3dArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtMatrix3dArray *arg2 = (VtMatrix3dArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtMatrix3dArray *)jarg2; 
  VtValueToVtMatrix3dArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtMatrix4dArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtMatrix4dArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtMatrix4dArray((VtValue const &)*arg1);
  jresult = new VtMatrix4dArray((const VtMatrix4dArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtMatrix4dArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtMatrix4dArray *)jarg2; 
  VtValueToVtMatrix4dArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtQuatdArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtQuatdArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtQuatdArray((VtValue const &)*arg1);
  jresult = new VtQuatdArray((const VtQuatdArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtQuatdArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtQuatdArray *arg2 = (VtQuatdArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtQuatdArray *)jarg2; 
  VtValueToVtQuatdArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtQuatfArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtQuatfArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtQuatfArray((VtValue const &)*arg1);
  jresult = new VtQuatfArray((const VtQuatfArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtQuatfArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtQuatfArray *arg2 = (VtQuatfArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtQuatfArray *)jarg2; 
  VtValueToVtQuatfArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtQuathArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtQuathArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtQuathArray((VtValue const &)*arg1);
  jresult = new VtQuathArray((const VtQuathArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtQuathArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtQuathArray *arg2 = (VtQuathArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtQuathArray *)jarg2; 
  VtValueToVtQuathArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtStringArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtStringArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtStringArray((VtValue const &)*arg1);
  jresult = new VtStringArray((const VtStringArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtStringArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtStringArray *arg2 = (VtStringArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtStringArray *)jarg2; 
  VtValueToVtStringArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtTokenArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtTokenArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtTokenArray((VtValue const &)*arg1);
  jresult = new VtTokenArray((const VtTokenArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtTokenArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtTokenArray *arg2 = (VtTokenArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtTokenArray *)jarg2; 
  VtValueToVtTokenArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtUCharArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtUCharArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtUCharArray((VtValue const &)*arg1);
  jresult = new VtUCharArray((const VtUCharArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtUCharArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtUCharArray *arg2 = (VtUCharArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtUCharArray *)jarg2; 
  VtValueToVtUCharArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtUInt64Array__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtUInt64Array result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtUInt64Array((VtValue const &)*arg1);
  jresult = new VtUInt64Array((const VtUInt64Array &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtUInt64Array__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtUInt64Array *arg2 = (VtUInt64Array *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtUInt64Array *)jarg2; 
  VtValueToVtUInt64Array((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtUIntArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtUIntArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtUIntArray((VtValue const &)*arg1);
  jresult = new VtUIntArray((const VtUIntArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtUIntArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtUIntArray *arg2 = (VtUIntArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtUIntArray *)jarg2; 
  VtValueToVtUIntArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec2dArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec2dArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec2dArray((VtValue const &)*arg1);
  jresult = new VtVec2dArray((const VtVec2dArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec2dArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec2dArray *arg2 = (VtVec2dArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec2dArray *)jarg2; 
  VtValueToVtVec2dArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec2fArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec2fArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec2fArray((VtValue const &)*arg1);
  jresult = new VtVec2fArray((const VtVec2fArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec2fArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec2fArray *arg2 = (VtVec2fArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec2fArray *)jarg2; 
  VtValueToVtVec2fArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec2hArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec2hArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec2hArray((VtValue const &)*arg1);
  jresult = new VtVec2hArray((const VtVec2hArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec2hArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec2hArray *arg2 = (VtVec2hArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec2hArray *)jarg2; 
  VtValueToVtVec2hArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec2iArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec2iArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec2iArray((VtValue const &)*arg1);
  jresult = new VtVec2iArray((const VtVec2iArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec2iArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec2iArray *arg2 = (VtVec2iArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec2iArray *)jarg2; 
  VtValueToVtVec2iArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec3dArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec3dArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec3dArray((VtValue const &)*arg1);
  jresult = new VtVec3dArray((const VtVec3dArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec3dArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec3dArray *arg2 = (VtVec3dArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec3dArray *)jarg2; 
  VtValueToVtVec3dArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec3fArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec3fArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec3fArray((VtValue const &)*arg1);
  jresult = new VtVec3fArray((const VtVec3fArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec3fArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec3fArray *)jarg2; 
  VtValueToVtVec3fArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec3hArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec3hArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec3hArray((VtValue const &)*arg1);
  jresult = new VtVec3hArray((const VtVec3hArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec3hArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec3hArray *arg2 = (VtVec3hArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec3hArray *)jarg2; 
  VtValueToVtVec3hArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec3iArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec3iArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec3iArray((VtValue const &)*arg1);
  jresult = new VtVec3iArray((const VtVec3iArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec3iArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec3iArray *arg2 = (VtVec3iArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec3iArray *)jarg2; 
  VtValueToVtVec3iArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec4dArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec4dArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec4dArray((VtValue const &)*arg1);
  jresult = new VtVec4dArray((const VtVec4dArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec4dArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec4dArray *arg2 = (VtVec4dArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec4dArray *)jarg2; 
  VtValueToVtVec4dArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec4fArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec4fArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec4fArray((VtValue const &)*arg1);
  jresult = new VtVec4fArray((const VtVec4fArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec4fArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec4fArray *arg2 = (VtVec4fArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec4fArray *)jarg2; 
  VtValueToVtVec4fArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec4hArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec4hArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec4hArray((VtValue const &)*arg1);
  jresult = new VtVec4hArray((const VtVec4hArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec4hArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec4hArray *arg2 = (VtVec4hArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec4hArray *)jarg2; 
  VtValueToVtVec4hArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValueToVtVec4iArray__SWIG_0(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtVec4iArray result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueToVtVec4iArray((VtValue const &)*arg1);
  jresult = new VtVec4iArray((const VtVec4iArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToVtVec4iArray__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtVec4iArray *arg2 = (VtVec4iArray *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (VtVec4iArray *)jarg2; 
  VtValueToVtVec4iArray((VtValue const &)*arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValueTobool__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  VtValue *arg1 = 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)VtValueTobool((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTobool__SWIG_1(void * jarg1, unsigned int * jarg2) {
  VtValue *arg1 = 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (bool *)jarg2; 
  VtValueTobool((VtValue const &)*arg1,arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_VtValueTodouble__SWIG_0(void * jarg1) {
  double jresult ;
  VtValue *arg1 = 0 ;
  double result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (double)VtValueTodouble((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTodouble__SWIG_1(void * jarg1, double * jarg2) {
  VtValue *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (double *)jarg2; 
  VtValueTodouble((VtValue const &)*arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_VtValueTofloat__SWIG_0(void * jarg1) {
  float jresult ;
  VtValue *arg1 = 0 ;
  float result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (float)VtValueTofloat((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTofloat__SWIG_1(void * jarg1, float * jarg2) {
  VtValue *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (float *)jarg2; 
  VtValueTofloat((VtValue const &)*arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_VtValueToint__SWIG_0(void * jarg1) {
  int jresult ;
  VtValue *arg1 = 0 ;
  int result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (int)VtValueToint((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToint__SWIG_1(void * jarg1, int * jarg2) {
  VtValue *arg1 = 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (int *)jarg2; 
  VtValueToint((VtValue const &)*arg1,arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_VtValueTolong__SWIG_0(void * jarg1) {
  long long jresult ;
  VtValue *arg1 = 0 ;
  int64_t result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (int64_t)VtValueTolong((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTolong__SWIG_1(void * jarg1, long long * jarg2) {
  VtValue *arg1 = 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (int64_t *)jarg2; 
  VtValueTolong((VtValue const &)*arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtValueTostring__SWIG_0(void * jarg1) {
  char * jresult ;
  VtValue *arg1 = 0 ;
  std::string result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValueTostring((VtValue const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTostring__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (std::string *)jarg2; 
  VtValueTostring((VtValue const &)*arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_pxr_VtValueToulong__SWIG_0(void * jarg1) {
  unsigned long long jresult ;
  VtValue *arg1 = 0 ;
  uint64_t result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (uint64_t)VtValueToulong((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueToulong__SWIG_1(void * jarg1, unsigned long long * jarg2) {
  VtValue *arg1 = 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (uint64_t *)jarg2; 
  VtValueToulong((VtValue const &)*arg1,arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pxr_VtValueTobyte__SWIG_0(void * jarg1) {
  unsigned char jresult ;
  VtValue *arg1 = 0 ;
  unsigned char result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (unsigned char)VtValueTobyte((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTobyte__SWIG_1(void * jarg1, unsigned char * jarg2) {
  VtValue *arg1 = 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (unsigned char *)jarg2; 
  VtValueTobyte((VtValue const &)*arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValueTouint__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  VtValue *arg1 = 0 ;
  unsigned int result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (unsigned int)VtValueTouint((VtValue const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValueTouint__SWIG_1(void * jarg1, unsigned int * jarg2) {
  VtValue *arg1 = 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg2 = (unsigned int *)jarg2; 
  VtValueTouint((VtValue const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_0() {
  void * jresult ;
  VtValue *result = 0 ;
  
  result = (VtValue *)new VtValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_1(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtValue(void * jarg1) {
  VtValue *arg1 = (VtValue *) 0 ;
  
  arg1 = (VtValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValue_Swap(void * jarg1, void * jarg2) {
  void * jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  VtValue *arg2 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtValue *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue & type is null", 0);
    return 0;
  } 
  result = (VtValue *) &(arg1)->Swap(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_1(void * jarg1, void * jarg2) {
  VtValue *arg1 = 0 ;
  VtValue *arg2 = 0 ;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue & type is null", 0);
    return ;
  } 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtValue_UncheckedSwap(void * jarg1, void * jarg2) {
  VtValue *arg1 = (VtValue *) 0 ;
  VtValue *arg2 = 0 ;
  
  arg1 = (VtValue *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue & type is null", 0);
    return ;
  } 
  (arg1)->UncheckedSwap(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_IsArrayValued(void * jarg1) {
  unsigned int jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1; 
  result = (bool)((VtValue const *)arg1)->IsArrayValued();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtValue_GetArraySize(void * jarg1) {
  unsigned long jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  size_t result;
  
  arg1 = (VtValue *)jarg1; 
  result = ((VtValue const *)arg1)->GetArraySize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValue_GetTypeid(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  std::type_info *result = 0 ;
  
  arg1 = (VtValue *)jarg1; 
  result = (std::type_info *) &((VtValue const *)arg1)->GetTypeid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValue_GetElementTypeid(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  std::type_info *result = 0 ;
  
  arg1 = (VtValue *)jarg1; 
  result = (std::type_info *) &((VtValue const *)arg1)->GetElementTypeid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValue_GetTfType(void * jarg1) {
  void * jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  TfType result;
  
  arg1 = (VtValue *)jarg1; 
  result = ((VtValue const *)arg1)->GetType();
  jresult = new TfType((const TfType &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_VtValue_GetTypeName(void * jarg1) {
  char * jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  std::string result;
  
  arg1 = (VtValue *)jarg1; 
  result = ((VtValue const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValue_CastToTypeOf__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  VtValue *arg2 = 0 ;
  VtValue result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = VtValue::CastToTypeOf((VtValue const &)*arg1,(VtValue const &)*arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtValue_CastToTypeid__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  VtValue *arg1 = 0 ;
  std::type_info *arg2 = 0 ;
  VtValue result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  result = VtValue::CastToTypeid((VtValue const &)*arg1,(std::type_info const &)*arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_CanCastFromTypeidToTypeid(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::type_info *arg1 = 0 ;
  std::type_info *arg2 = 0 ;
  bool result;
  
  arg1 = (std::type_info *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  result = (bool)VtValue::CanCastFromTypeidToTypeid((std::type_info const &)*arg1,(std::type_info const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_CanCastToTypeOf(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  VtValue *arg2 = 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtValue const *)arg1)->CanCastToTypeOf((VtValue const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_CanCastToTypeid(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  std::type_info *arg2 = 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1; 
  arg2 = (std::type_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::type_info const & type is null", 0);
    return 0;
  } 
  result = (bool)((VtValue const *)arg1)->CanCastToTypeid((std::type_info const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1; 
  result = (bool)((VtValue const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_CanHash(void * jarg1) {
  unsigned int jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1; 
  result = (bool)((VtValue const *)arg1)->CanHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_VtValue_GetHash(void * jarg1) {
  unsigned long jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  size_t result;
  
  arg1 = (VtValue *)jarg1; 
  result = ((VtValue const *)arg1)->GetHash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_31(void * jarg1) {
  unsigned long jresult ;
  VtValue *arg1 = 0 ;
  size_t result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = hash_value((VtValue const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtValue_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtValue *arg1 = 0 ;
  VtValue *arg2 = 0 ;
  bool result;
  
  arg1 = (VtValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)VtValue_Equals((VtValue const &)*arg1,(VtValue const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_VtValue_GetHashCode(void * jarg1) {
  int jresult ;
  VtValue *arg1 = (VtValue *) 0 ;
  int result;
  
  arg1 = (VtValue *)jarg1; 
  result = (int)VtValue_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_3(void * jarg1) {
  void * jresult ;
  GfHalf *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfHalf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfHalf const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfHalf const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_4(void * jarg1) {
  void * jresult ;
  GfMatrix2d *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfMatrix2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix2d const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfMatrix2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_5(void * jarg1) {
  void * jresult ;
  GfMatrix3d *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfMatrix3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3d const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfMatrix3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_6(void * jarg1) {
  void * jresult ;
  GfMatrix4d *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfMatrix4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_7(void * jarg1) {
  void * jresult ;
  GfQuatd *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfQuatd *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatd const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfQuatd const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_8(void * jarg1) {
  void * jresult ;
  GfQuatf *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfQuatf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfQuatf const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_9(void * jarg1) {
  void * jresult ;
  GfQuath *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfQuath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuath const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfQuath const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_10(void * jarg1) {
  void * jresult ;
  GfVec2d *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec2d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2d const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec2d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_11(void * jarg1) {
  void * jresult ;
  GfVec2f *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec2f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2f const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec2f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_12(void * jarg1) {
  void * jresult ;
  GfVec2h *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec2h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2h const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec2h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_13(void * jarg1) {
  void * jresult ;
  GfVec2i *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec2i const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec2i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_14(void * jarg1) {
  void * jresult ;
  GfVec3d *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3d const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_15(void * jarg1) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec3f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_16(void * jarg1) {
  void * jresult ;
  GfVec3h *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec3h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec3h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_17(void * jarg1) {
  void * jresult ;
  GfVec3i *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec3i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3i const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec3i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_18(void * jarg1) {
  void * jresult ;
  GfVec4d *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4d const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec4d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_19(void * jarg1) {
  void * jresult ;
  GfVec4f *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec4f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4f const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec4f const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_20(void * jarg1) {
  void * jresult ;
  GfVec4h *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec4h *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4h const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec4h const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_21(void * jarg1) {
  void * jresult ;
  GfVec4i *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (GfVec4i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec4i const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((GfVec4i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_22(void * jarg1) {
  void * jresult ;
  SdfAssetPath *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (SdfAssetPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((SdfAssetPath const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_23(void * jarg1) {
  void * jresult ;
  VtArray< SdfAssetPath > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< SdfAssetPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< SdfAssetPath > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< SdfAssetPath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_24(void * jarg1) {
  void * jresult ;
  TfToken *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((TfToken const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_25(void * jarg1) {
  void * jresult ;
  VtArray< bool > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< bool > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_26(void * jarg1) {
  void * jresult ;
  VtArray< double > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< double > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_27(void * jarg1) {
  void * jresult ;
  VtArray< float > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< float > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_28(void * jarg1) {
  void * jresult ;
  VtArray< GfHalf > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfHalf > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfHalf > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfHalf > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_29(void * jarg1) {
  void * jresult ;
  VtArray< long long > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< long long > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< long long > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_30(void * jarg1) {
  void * jresult ;
  VtArray< int > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< int > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_31(void * jarg1) {
  void * jresult ;
  VtArray< GfMatrix2d > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfMatrix2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix2d > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfMatrix2d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_32(void * jarg1) {
  void * jresult ;
  VtArray< GfMatrix3d > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfMatrix3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix3d > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfMatrix3d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_33(void * jarg1) {
  void * jresult ;
  VtArray< GfMatrix4d > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfMatrix4d > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfMatrix4d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_34(void * jarg1) {
  void * jresult ;
  VtArray< GfQuatd > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfQuatd > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatd > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfQuatd > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_35(void * jarg1) {
  void * jresult ;
  VtArray< GfQuatf > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfQuatf > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuatf > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfQuatf > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_36(void * jarg1) {
  void * jresult ;
  VtArray< GfQuath > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfQuath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfQuath > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfQuath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_37(void * jarg1) {
  void * jresult ;
  VtArray< std::string > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< std::string > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_38(void * jarg1) {
  void * jresult ;
  VtArray< TfToken > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< TfToken > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< TfToken > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< TfToken > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_39(void * jarg1) {
  void * jresult ;
  VtArray< unsigned char > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned char > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_40(void * jarg1) {
  void * jresult ;
  VtArray< unsigned long long > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< unsigned long long > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned long long > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< unsigned long long > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_41(void * jarg1) {
  void * jresult ;
  VtArray< unsigned int > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< unsigned int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_42(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2d > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec2d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2d > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec2d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_43(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2f > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec2f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2f > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec2f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_44(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2h > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec2h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2h > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec2h > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_45(void * jarg1) {
  void * jresult ;
  VtArray< GfVec2i > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec2i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec2i > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec2i > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_46(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3d > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec3d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3d > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec3d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_47(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3f > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec3f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3f > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec3f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_48(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3h > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec3h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3h > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec3h > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_49(void * jarg1) {
  void * jresult ;
  VtArray< GfVec3i > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec3i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec3i > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec3i > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_50(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4d > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec4d > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4d > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec4d > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_51(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4f > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec4f > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4f > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec4f > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_52(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4h > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec4h > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4h > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec4h > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_53(void * jarg1) {
  void * jresult ;
  VtArray< GfVec4i > *arg1 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtArray< GfVec4i > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< GfVec4i > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)new VtValue((VtArray< GfVec4i > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_54(unsigned int jarg1) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool temp1 ;
  VtValue *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((bool const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_55(double jarg1) {
  void * jresult ;
  double *arg1 = 0 ;
  double temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((double const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_56(float jarg1) {
  void * jresult ;
  float *arg1 = 0 ;
  float temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((float const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_57(int jarg1) {
  void * jresult ;
  int *arg1 = 0 ;
  int temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((int const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_58(long long jarg1) {
  void * jresult ;
  long long *arg1 = 0 ;
  long long temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((long long const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_59(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  VtValue *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (VtValue *)new VtValue((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_60(unsigned long long jarg1) {
  void * jresult ;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (unsigned long long)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((unsigned long long const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_61(unsigned char jarg1) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((unsigned char const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtValue__SWIG_62(unsigned int jarg1) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  VtValue *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  result = (VtValue *)new VtValue((unsigned int const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_VT_DICTIONARY_MAX_ARITY_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDictionary__SWIG_0() {
  void * jresult ;
  VtDictionary *result = 0 ;
  
  result = (VtDictionary *)new VtDictionary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDictionary__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  VtDictionary *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (VtDictionary *)new VtDictionary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDictionary__SWIG_3(void * jarg1) {
  void * jresult ;
  VtDictionary *arg1 = 0 ;
  VtDictionary *result = 0 ;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  result = (VtDictionary *)new VtDictionary((VtDictionary const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_count(void * jarg1, char * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::map< std::string,VtValue,std::less< std::string > >::size_type > result;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((VtDictionary const *)arg1)->count((std::string const &)*arg2);
  jresult = new VtDictionary::size_type((const VtDictionary::size_type &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_erase__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::map< std::string,VtValue,std::less< std::string > >::size_type > result;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->erase((std::string const &)*arg2);
  jresult = new VtDictionary::size_type((const VtDictionary::size_type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_erase__SWIG_1(void * jarg1, void * jarg2) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  SwigValueWrapper< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator > > arg2 ;
  VtDictionary::iterator *argp2 ;
  
  arg1 = (VtDictionary *)jarg1; 
  argp2 = (VtDictionary::iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VtDictionary::iterator", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_erase__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  SwigValueWrapper< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator > > arg2 ;
  SwigValueWrapper< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator > > arg3 ;
  VtDictionary::iterator *argp2 ;
  VtDictionary::iterator *argp3 ;
  
  arg1 = (VtDictionary *)jarg1; 
  argp2 = (VtDictionary::iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VtDictionary::iterator", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (VtDictionary::iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VtDictionary::iterator", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_clear(void * jarg1) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_find__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator > > result;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->find((std::string const &)*arg2);
  jresult = new VtDictionary::iterator((const VtDictionary::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  SwigValueWrapper< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator > > result;
  
  arg1 = (VtDictionary *)jarg1; 
  result = (arg1)->begin();
  jresult = new VtDictionary::iterator((const VtDictionary::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_end__SWIG_0(void * jarg1) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  SwigValueWrapper< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator > > result;
  
  arg1 = (VtDictionary *)jarg1; 
  result = (arg1)->end();
  jresult = new VtDictionary::iterator((const VtDictionary::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_size(void * jarg1) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  SwigValueWrapper< std::map< std::string,VtValue,std::less< std::string > >::size_type > result;
  
  arg1 = (VtDictionary *)jarg1; 
  result = ((VtDictionary const *)arg1)->size();
  jresult = new VtDictionary::size_type((const VtDictionary::size_type &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_VtDictionary_empty(void * jarg1) {
  unsigned int jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  bool result;
  
  arg1 = (VtDictionary *)jarg1; 
  result = (bool)((VtDictionary const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_swap(void * jarg1, void * jarg2) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  VtDictionary *arg2 = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_2(void * jarg1, void * jarg2) {
  VtDictionary *arg1 = 0 ;
  VtDictionary *arg2 = 0 ;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary & type is null", 0);
    return ;
  } 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_32(void * jarg1) {
  unsigned long jresult ;
  VtDictionary *arg1 = 0 ;
  size_t result;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  result = hash_value((VtDictionary const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_insert(void * jarg1, void * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  VtDictionary::value_type *arg2 = 0 ;
  SwigValueWrapper< std::pair< VtDictionary::Iterator< std::map< std::string,VtValue,std::less< std::string > > *,std::map< std::string,VtValue,std::less< std::string > >::iterator >,bool > > result;
  
  arg1 = (VtDictionary *)jarg1; 
  arg2 = (VtDictionary::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary::value_type const & type is null", 0);
    return 0;
  } 
  result = (arg1)->insert((VtDictionary::value_type const &)*arg2);
  jresult = new std::pair< VtDictionary::iterator,bool >((const std::pair< VtDictionary::iterator,bool > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_GetValueAtPath__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (char *)jarg3; 
  result = (VtValue *)((VtDictionary const *)arg1)->GetValueAtPath((std::string const &)*arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_GetValueAtPath__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (VtValue *)((VtDictionary const *)arg1)->GetValueAtPath((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionary_GetValueAtPath__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (VtValue *)((VtDictionary const *)arg1)->GetValueAtPath((std::vector< std::string > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_SetValueAtPath__SWIG_0(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  arg4 = (char *)jarg4; 
  (arg1)->SetValueAtPath((std::string const &)*arg2,(VtValue const &)*arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_SetValueAtPath__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  (arg1)->SetValueAtPath((std::string const &)*arg2,(VtValue const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_SetValueAtPath__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  (arg1)->SetValueAtPath((std::vector< std::string > const &)*arg2,(VtValue const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_EraseValueAtPath__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (char *)jarg3; 
  (arg1)->EraseValueAtPath((std::string const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_EraseValueAtPath__SWIG_1(void * jarg1, char * jarg2) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->EraseValueAtPath((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_VtDictionary_EraseValueAtPath__SWIG_2(void * jarg1, void * jarg2) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->EraseValueAtPath((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtDictionary(void * jarg1) {
  VtDictionary *arg1 = (VtDictionary *) 0 ;
  
  arg1 = (VtDictionary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtGetEmptyDictionary() {
  void * jresult ;
  VtDictionary *result = 0 ;
  
  result = (VtDictionary *) &VtGetEmptyDictionary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionaryOver__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  VtDictionary *arg1 = 0 ;
  VtDictionary *arg2 = 0 ;
  bool arg3 ;
  VtDictionary result;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = VtDictionaryOver((VtDictionary const &)*arg1,(VtDictionary const &)*arg2,arg3);
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionaryOver__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = 0 ;
  VtDictionary *arg2 = 0 ;
  VtDictionary result;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  result = VtDictionaryOver((VtDictionary const &)*arg1,(VtDictionary const &)*arg2);
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionaryOverRecursive__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  VtDictionary *arg1 = 0 ;
  VtDictionary *arg2 = 0 ;
  bool arg3 ;
  VtDictionary result;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = VtDictionaryOverRecursive((VtDictionary const &)*arg1,(VtDictionary const &)*arg2,arg3);
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_VtDictionaryOverRecursive__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  VtDictionary *arg1 = 0 ;
  VtDictionary *arg2 = 0 ;
  VtDictionary result;
  
  arg1 = (VtDictionary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return 0;
  } 
  result = VtDictionaryOverRecursive((VtDictionary const &)*arg1,(VtDictionary const &)*arg2);
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_VtDictionaryHash() {
  void * jresult ;
  VtDictionaryHash *result = 0 ;
  
  result = (VtDictionaryHash *)new VtDictionaryHash();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_VtDictionaryHash(void * jarg1) {
  VtDictionaryHash *arg1 = (VtDictionaryHash *) 0 ;
  
  arg1 = (VtDictionaryHash *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_BOOST_PP_FILENAME_1_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("pxr/base/vt/dictionary.h");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_ArResolverContext() {
  void * jresult ;
  ArResolverContext *result = 0 ;
  
  result = (ArResolverContext *)new ArResolverContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_ArResolverContext_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  ArResolverContext *arg1 = (ArResolverContext *) 0 ;
  bool result;
  
  arg1 = (ArResolverContext *)jarg1; 
  result = (bool)((ArResolverContext const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_ArResolverContext_GetDebugString(void * jarg1) {
  char * jresult ;
  ArResolverContext *arg1 = (ArResolverContext *) 0 ;
  std::string result;
  
  arg1 = (ArResolverContext *)jarg1; 
  result = ((ArResolverContext const *)arg1)->GetDebugString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_33(void * jarg1) {
  unsigned long jresult ;
  ArResolverContext *arg1 = 0 ;
  size_t result;
  
  arg1 = (ArResolverContext *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = hash_value((ArResolverContext const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_ArResolverContext(void * jarg1) {
  ArResolverContext *arg1 = (ArResolverContext *) 0 ;
  
  arg1 = (ArResolverContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfIsDefiningSpecifier(int jarg1) {
  unsigned int jresult ;
  SdfSpecifier arg1 ;
  bool result;
  
  arg1 = (SdfSpecifier)jarg1; 
  result = (bool)SdfIsDefiningSpecifier(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_34(void * jarg1) {
  unsigned long jresult ;
  SdfValueBlock *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfValueBlock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueBlock const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfValueBlock const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfValueBlock() {
  void * jresult ;
  SdfValueBlock *result = 0 ;
  
  result = (SdfValueBlock *)new SdfValueBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfValueBlock(void * jarg1) {
  SdfValueBlock *arg1 = (SdfValueBlock *) 0 ;
  
  arg1 = (SdfValueBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfHumanReadableValue__SWIG_0() {
  void * jresult ;
  SdfHumanReadableValue *result = 0 ;
  
  result = (SdfHumanReadableValue *)new SdfHumanReadableValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfHumanReadableValue__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfHumanReadableValue *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (SdfHumanReadableValue *)new SdfHumanReadableValue((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfHumanReadableValue_GetText(void * jarg1) {
  char * jresult ;
  SdfHumanReadableValue *arg1 = (SdfHumanReadableValue *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfHumanReadableValue *)jarg1; 
  result = (std::string *) &((SdfHumanReadableValue const *)arg1)->GetText();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfHumanReadableValue(void * jarg1) {
  SdfHumanReadableValue *arg1 = (SdfHumanReadableValue *) 0 ;
  
  arg1 = (SdfHumanReadableValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_35(void * jarg1) {
  unsigned long jresult ;
  SdfHumanReadableValue *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfHumanReadableValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfHumanReadableValue const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfHumanReadableValue const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfTupleDimensions__SWIG_0() {
  void * jresult ;
  SdfTupleDimensions *result = 0 ;
  
  result = (SdfTupleDimensions *)new SdfTupleDimensions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfTupleDimensions__SWIG_1(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  SdfTupleDimensions *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (SdfTupleDimensions *)new SdfTupleDimensions(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfTupleDimensions__SWIG_2(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  SdfTupleDimensions *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (SdfTupleDimensions *)new SdfTupleDimensions(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfTupleDimensions__SWIG_3(void * jarg1) {
  void * jresult ;
  size_t (*arg1)[2] = 0 ;
  SdfTupleDimensions *result = 0 ;
  
  arg1 = (size_t (*)[2])jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "size_t const (&)[2] type is null", 0);
    return 0;
  } 
  result = (SdfTupleDimensions *)new SdfTupleDimensions((size_t const (&)[2])*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfTupleDimensions_d_set(void * jarg1, void * jarg2) {
  SdfTupleDimensions *arg1 = (SdfTupleDimensions *) 0 ;
  size_t *arg2 ;
  
  arg1 = (SdfTupleDimensions *)jarg1; 
  arg2 = (size_t *)jarg2; 
  {
    size_t ii;
    size_t *b = (size_t *) arg1->d;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((size_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfTupleDimensions_d_get(void * jarg1) {
  void * jresult ;
  SdfTupleDimensions *arg1 = (SdfTupleDimensions *) 0 ;
  size_t *result = 0 ;
  
  arg1 = (SdfTupleDimensions *)jarg1; 
  result = (size_t *)(size_t *) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfTupleDimensions_size_set(void * jarg1, unsigned long jarg2) {
  SdfTupleDimensions *arg1 = (SdfTupleDimensions *) 0 ;
  size_t arg2 ;
  
  arg1 = (SdfTupleDimensions *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfTupleDimensions_size_get(void * jarg1) {
  unsigned long jresult ;
  SdfTupleDimensions *arg1 = (SdfTupleDimensions *) 0 ;
  size_t result;
  
  arg1 = (SdfTupleDimensions *)jarg1; 
  result =  ((arg1)->size);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfTupleDimensions(void * jarg1) {
  SdfTupleDimensions *arg1 = (SdfTupleDimensions *) 0 ;
  
  arg1 = (SdfTupleDimensions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfValueTypeName() {
  void * jresult ;
  SdfValueTypeName *result = 0 ;
  
  result = (SdfValueTypeName *)new SdfValueTypeName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetAsToken(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  TfToken result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = ((SdfValueTypeName const *)arg1)->GetAsToken();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetTfType(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  TfType *result = 0 ;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (TfType *) &((SdfValueTypeName const *)arg1)->GetType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetCPPTypeName(void * jarg1) {
  char * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (std::string *) &((SdfValueTypeName const *)arg1)->GetCPPTypeName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetRole(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (TfToken *) &((SdfValueTypeName const *)arg1)->GetRole();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetDefaultValue(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  VtValue *result = 0 ;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (VtValue *) &((SdfValueTypeName const *)arg1)->GetDefaultValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetScalarType(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = ((SdfValueTypeName const *)arg1)->GetScalarType();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetArrayType(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = ((SdfValueTypeName const *)arg1)->GetArrayType();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfValueTypeName_IsScalar(void * jarg1) {
  unsigned int jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  bool result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (bool)((SdfValueTypeName const *)arg1)->IsScalar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfValueTypeName_IsArray(void * jarg1) {
  unsigned int jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  bool result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (bool)((SdfValueTypeName const *)arg1)->IsArray();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetHash(void * jarg1) {
  unsigned long jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  size_t result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = ((SdfValueTypeName const *)arg1)->GetHash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetAliasesAsTokens(void * jarg1) {
  void * jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  std::vector< TfToken > result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = ((SdfValueTypeName const *)arg1)->GetAliasesAsTokens();
  jresult = new std::vector< TfToken >((const std::vector< TfToken > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfValueTypeName_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfValueTypeName *arg1 = 0 ;
  SdfValueTypeName *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfValueTypeName *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfValueTypeName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = (bool)SdfValueTypeName_Equals((SdfValueTypeName const &)*arg1,(SdfValueTypeName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfValueTypeName_GetHashCode(void * jarg1) {
  int jresult ;
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  int result;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  result = (int)SdfValueTypeName_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfValueTypeName(void * jarg1) {
  SdfValueTypeName *arg1 = (SdfValueTypeName *) 0 ;
  
  arg1 = (SdfValueTypeName *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfValueTypeNameHash() {
  void * jresult ;
  SdfValueTypeNameHash *result = 0 ;
  
  result = (SdfValueTypeNameHash *)new SdfValueTypeNameHash();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfValueTypeNameHash(void * jarg1) {
  SdfValueTypeNameHash *arg1 = (SdfValueTypeNameHash *) 0 ;
  
  arg1 = (SdfValueTypeNameHash *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_37(void * jarg1) {
  unsigned long jresult ;
  SdfValueTypeName *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfValueTypeName *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfValueTypeName const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor4dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor4dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeMatrix3d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeMatrix3d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord3dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord3dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypePoint3h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypePoint3h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeAsset() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeAsset();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypePoint3d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypePoint3d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypePoint3f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypePoint3f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeQuathArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeQuathArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeUChar() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeUChar();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeMatrix2dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeMatrix2dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord2fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord2fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeVector3dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeVector3dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor4h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor4h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor4f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor4f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor4d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor4d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat2Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat2Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat4Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat4Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeAssetArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeAssetArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeUInt() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeUInt();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeNormal3fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeNormal3fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeToken() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeToken();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat3Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat3Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord2hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord2hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeUCharArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeUCharArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDoubleArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDoubleArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFrame4d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFrame4d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeQuatdArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeQuatdArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypePoint3hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypePoint3hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeString() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeString();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble4() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble4();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeNormal3dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeNormal3dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor3dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor3dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord2dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord2dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf3Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf3Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeMatrix4dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeMatrix4dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeNormal3h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeNormal3h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor3fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor3fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor4hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor4hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeNormal3d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeNormal3d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeMatrix2d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeMatrix2d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeNormal3f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeNormal3f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeUInt64() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeUInt64();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloatArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloatArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor3f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor3f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor3d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor3d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt64Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt64Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeIntArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeIntArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypePoint3dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypePoint3dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord3hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord3hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeBool() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeBool();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor3hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor3hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble2() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble2();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble3() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble3();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeUInt64Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeUInt64Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeStringArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeStringArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeVector3hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeVector3hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeMatrix3dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeMatrix3dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeQuatf() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeQuatf();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble3Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble3Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeQuatd() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeQuatd();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeQuath() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeQuath();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt4() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt4();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf4Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf4Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt2() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt2();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypePoint3fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypePoint3fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt3() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt3();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeBoolArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeBoolArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf2Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf2Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeMatrix4d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeMatrix4d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble4Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble4Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalfArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalfArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat4() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat4();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat2() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat2();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat3() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat3();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeUIntArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeUIntArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord2d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord2d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf3() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf3();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord3h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord3h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFrame4dArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFrame4dArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeVector3fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeVector3fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord3d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord3d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord3f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord3f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor3h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor3h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeVector3h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeVector3h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeVector3d() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeVector3d();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeVector3f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeVector3f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt4Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt4Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeColor4fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeColor4fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeQuatfArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeQuatfArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeDouble2Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeDouble2Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTokenArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTokenArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeNormal3hArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeNormal3hArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt3Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt3Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord2h() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord2h();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf4() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf4();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeFloat() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeFloat();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord2f() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord2f();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeHalf2() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeHalf2();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt2Array() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt2Array();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeInt64() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeInt64();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfGetValueTypeTexCoord3fArray() {
  void * jresult ;
  SdfValueTypeName result;
  
  result = SdfGetValueTypeTexCoord3fArray();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPath__SWIG_0() {
  void * jresult ;
  SdfAssetPath *result = 0 ;
  
  result = (SdfAssetPath *)new SdfAssetPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPath__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfAssetPath *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (SdfAssetPath *)new SdfAssetPath((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfAssetPath__SWIG_2(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SdfAssetPath *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (SdfAssetPath *)new SdfAssetPath((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfAssetPath_GetHash(void * jarg1) {
  unsigned long jresult ;
  SdfAssetPath *arg1 = (SdfAssetPath *) 0 ;
  size_t result;
  
  arg1 = (SdfAssetPath *)jarg1; 
  result = ((SdfAssetPath const *)arg1)->GetHash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_38(void * jarg1) {
  unsigned long jresult ;
  SdfAssetPath *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfAssetPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfAssetPath const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfAssetPath_GetAssetPath(void * jarg1) {
  char * jresult ;
  SdfAssetPath *arg1 = (SdfAssetPath *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfAssetPath *)jarg1; 
  result = (std::string *) &((SdfAssetPath const *)arg1)->GetAssetPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfAssetPath_GetResolvedPath(void * jarg1) {
  char * jresult ;
  SdfAssetPath *arg1 = (SdfAssetPath *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfAssetPath *)jarg1; 
  result = (std::string *) &((SdfAssetPath const *)arg1)->GetResolvedPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_3(void * jarg1, void * jarg2) {
  SdfAssetPath *arg1 = 0 ;
  SdfAssetPath *arg2 = 0 ;
  
  arg1 = (SdfAssetPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath & type is null", 0);
    return ;
  } 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfAssetPath_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfAssetPath *arg1 = 0 ;
  SdfAssetPath *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfAssetPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return 0;
  } 
  result = (bool)SdfAssetPath_Equals((SdfAssetPath const &)*arg1,(SdfAssetPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfAssetPath_GetHashCode(void * jarg1) {
  int jresult ;
  SdfAssetPath *arg1 = (SdfAssetPath *) 0 ;
  int result;
  
  arg1 = (SdfAssetPath *)jarg1; 
  result = (int)SdfAssetPath_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfAssetPath(void * jarg1) {
  SdfAssetPath *arg1 = (SdfAssetPath *) 0 ;
  
  arg1 = (SdfAssetPath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_Clear(void * jarg1) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_Add(void * jarg1, void * jarg2) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  SdfPath *arg2 = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((SdfPath const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfPathVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  std::vector< SdfPath >::size_type result;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  result = ((std::vector< SdfPath > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfPathVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  std::vector< SdfPath >::size_type result;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  result = ((std::vector< SdfPath > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  std::vector< SdfPath >::size_type arg2 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (std::vector< SdfPath >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathVector__SWIG_0() {
  void * jresult ;
  std::vector< SdfPath > *result = 0 ;
  
  result = (std::vector< SdfPath > *)new std::vector< SdfPath >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SdfPath > *arg1 = 0 ;
  std::vector< SdfPath > *result = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfPath > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< SdfPath > *)new std::vector< SdfPath >((std::vector< SdfPath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SdfPath > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SdfPath > *)new_std_vector_Sl_SdfPath_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPathVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  SdfPath result;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SdfPath_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPathVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  SdfPath *result = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (SdfPath *) &std_vector_Sl_SdfPath_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  SdfPath *arg3 = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfPath_Sg__setitem(arg1,arg2,(SdfPath const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  std::vector< SdfPath > *arg2 = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (std::vector< SdfPath > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfPath > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_SdfPath_Sg__AddRange(arg1,(std::vector< SdfPath > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPathVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SdfPath > *result = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SdfPath > *)std_vector_Sl_SdfPath_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  SdfPath *arg3 = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfPath_Sg__Insert(arg1,arg2,(SdfPath const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  std::vector< SdfPath > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfPath > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfPath > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfPath_Sg__InsertRange(arg1,arg2,(std::vector< SdfPath > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SdfPath_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfPath_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPathVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SdfPath *arg1 = 0 ;
  int arg2 ;
  std::vector< SdfPath > *result = 0 ;
  
  arg1 = (SdfPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SdfPath > *)std_vector_Sl_SdfPath_Sg__Repeat((SdfPath const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  std_vector_Sl_SdfPath_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfPath_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  int arg2 ;
  std::vector< SdfPath > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfPath > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfPath > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfPath_Sg__SetRange(arg1,arg2,(std::vector< SdfPath > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPathVector(void * jarg1) {
  std::vector< SdfPath > *arg1 = (std::vector< SdfPath > *) 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathStringPair__SWIG_0() {
  void * jresult ;
  std::pair< std::string,std::string > *result = 0 ;
  
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathStringPair__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathStringPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::string,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathStringPair_first_set(void * jarg1, char * jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPathStringPair_first_get(void * jarg1) {
  char * jresult ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathStringPair_second_set(void * jarg1, char * jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPathStringPair_second_get(void * jarg1) {
  char * jresult ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPathStringPair(void * jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathPair__SWIG_0() {
  void * jresult ;
  std::pair< SdfPath,SdfPath > *result = 0 ;
  
  result = (std::pair< SdfPath,SdfPath > *)new std::pair< SdfPath,SdfPath >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathPair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath arg1 ;
  SdfPath arg2 ;
  SdfPath *argp1 ;
  SdfPath *argp2 ;
  std::pair< SdfPath,SdfPath > *result = 0 ;
  
  argp1 = (SdfPath *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfPath", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (SdfPath *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfPath", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< SdfPath,SdfPath > *)new std::pair< SdfPath,SdfPath >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPathPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< SdfPath,SdfPath > *arg1 = 0 ;
  std::pair< SdfPath,SdfPath > *result = 0 ;
  
  arg1 = (std::pair< SdfPath,SdfPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< SdfPath,SdfPath > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< SdfPath,SdfPath > *)new std::pair< SdfPath,SdfPath >((std::pair< SdfPath,SdfPath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathPair_first_set(void * jarg1, void * jarg2) {
  std::pair< SdfPath,SdfPath > *arg1 = (std::pair< SdfPath,SdfPath > *) 0 ;
  SdfPath *arg2 = (SdfPath *) 0 ;
  
  arg1 = (std::pair< SdfPath,SdfPath > *)jarg1; 
  arg2 = (SdfPath *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPathPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< SdfPath,SdfPath > *arg1 = (std::pair< SdfPath,SdfPath > *) 0 ;
  SdfPath *result = 0 ;
  
  arg1 = (std::pair< SdfPath,SdfPath > *)jarg1; 
  result = (SdfPath *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPathPair_second_set(void * jarg1, void * jarg2) {
  std::pair< SdfPath,SdfPath > *arg1 = (std::pair< SdfPath,SdfPath > *) 0 ;
  SdfPath *arg2 = (SdfPath *) 0 ;
  
  arg1 = (std::pair< SdfPath,SdfPath > *)jarg1; 
  arg2 = (SdfPath *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPathPair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< SdfPath,SdfPath > *arg1 = (std::pair< SdfPath,SdfPath > *) 0 ;
  SdfPath *result = 0 ;
  
  arg1 = (std::pair< SdfPath,SdfPath > *)jarg1; 
  result = (SdfPath *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPathPair(void * jarg1) {
  std::pair< SdfPath,SdfPath > *arg1 = (std::pair< SdfPath,SdfPath > *) 0 ;
  
  arg1 = (std::pair< SdfPath,SdfPath > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GetPathFromVector(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfPath > *arg1 = 0 ;
  int arg2 ;
  SdfPath *arg3 = (SdfPath *) 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfPath > const & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (SdfPath *)jarg3; 
  GetPathFromVector((std::vector< SdfPath > const &)*arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_EmptyPath() {
  void * jresult ;
  SdfPath *result = 0 ;
  
  result = (SdfPath *) &SdfPath::EmptyPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AbsoluteRootPath() {
  void * jresult ;
  SdfPath *result = 0 ;
  
  result = (SdfPath *) &SdfPath::AbsoluteRootPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_ReflexiveRelativePath() {
  void * jresult ;
  SdfPath *result = 0 ;
  
  result = (SdfPath *) &SdfPath::ReflexiveRelativePath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPath__SWIG_0() {
  void * jresult ;
  SdfPath *result = 0 ;
  
  result = (SdfPath *)new SdfPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPath__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfPath *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (SdfPath *)new SdfPath((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfPath_GetPathElementCount(void * jarg1) {
  unsigned long jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  size_t result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetPathElementCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsAbsolutePath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsAbsolutePath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsPrimPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsPrimPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsAbsoluteRootOrPrimPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsAbsoluteRootOrPrimPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsRootPrimPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsRootPrimPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsPropertyPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsPropertyPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsPrimPropertyPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsPrimPropertyPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsNamespacedPropertyPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsNamespacedPropertyPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsPrimVariantSelectionPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsPrimVariantSelectionPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsPrimOrPrimVariantSelectionPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsPrimOrPrimVariantSelectionPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_ContainsPrimVariantSelection(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->ContainsPrimVariantSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_ContainsTargetPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->ContainsTargetPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsRelationalAttributePath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsRelationalAttributePath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsTargetPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsTargetPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsMapperPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsMapperPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsMapperArgPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsMapperArgPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsExpressionPath(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsExpressionPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  result = (bool)((SdfPath const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetToken(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  result = (TfToken *) &((SdfPath const *)arg1)->GetToken();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_GetString(void * jarg1) {
  char * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  result = (std::string *) &((SdfPath const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_GetText(void * jarg1) {
  char * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  char *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  result = (char *)((SdfPath const *)arg1)->GetText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetPrefixes__SWIG_0(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPathVector result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetPrefixes();
  jresult = new SdfPathVector((const SdfPathVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPath_GetPrefixes__SWIG_1(void * jarg1, void * jarg2) {
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPathVector *)jarg2; 
  ((SdfPath const *)arg1)->GetPrefixes(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_GetName(void * jarg1) {
  char * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  result = (std::string *) &((SdfPath const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetNameToken(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  result = (TfToken *) &((SdfPath const *)arg1)->GetNameToken();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_GetElementString(void * jarg1) {
  char * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  std::string result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetElementString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetElementToken(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetElementToken();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_ReplaceName(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->ReplaceName((TfToken const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetTargetPath(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  result = (SdfPath *) &((SdfPath const *)arg1)->GetTargetPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPath_GetAllTargetPathsRecursively(void * jarg1, void * jarg2) {
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPathVector *)jarg2; 
  ((SdfPath const *)arg1)->GetAllTargetPathsRecursively(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetVariantSelection(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  std::pair< std::string,std::string > result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetVariantSelection();
  jresult = new std::pair< std::string,std::string >((const std::pair< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_HasPrefix(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((SdfPath const *)arg1)->HasPrefix((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetParentPath(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetParentPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetPrimPath(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetPrimPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetPrimOrPrimVariantSelectionPath(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetPrimOrPrimVariantSelectionPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetAbsoluteRootOrPrimPath(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetAbsoluteRootOrPrimPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_StripAllVariantSelections(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->StripAllVariantSelections();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendPath((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendChild(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendChild((TfToken const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendProperty(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendProperty((TfToken const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendVariantSelection(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = ((SdfPath const *)arg1)->AppendVariantSelection((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendTarget(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendTarget((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendRelationalAttribute(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendRelationalAttribute((TfToken const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_ReplaceTargetPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->ReplaceTargetPath((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendMapper(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendMapper((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendMapperArg(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendMapperArg((TfToken const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendExpression(void * jarg1) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->AppendExpression();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendElementString(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  std::string *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((SdfPath const *)arg1)->AppendElementString((std::string const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_AppendElementToken(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  TfToken *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->AppendElementToken((TfToken const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_ReplacePrefix__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  bool arg4 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((SdfPath const *)arg1)->ReplacePrefix((SdfPath const &)*arg2,(SdfPath const &)*arg3,arg4);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_ReplacePrefix__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->ReplacePrefix((SdfPath const &)*arg2,(SdfPath const &)*arg3);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetCommonPrefix(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->GetCommonPrefix((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_RemoveCommonSuffix__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  bool arg3 ;
  std::pair< SdfPath,SdfPath > result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((SdfPath const *)arg1)->RemoveCommonSuffix((SdfPath const &)*arg2,arg3);
  jresult = new std::pair< SdfPath,SdfPath >((const std::pair< SdfPath,SdfPath > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_RemoveCommonSuffix__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  std::pair< SdfPath,SdfPath > result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->RemoveCommonSuffix((SdfPath const &)*arg2);
  jresult = new std::pair< SdfPath,SdfPath >((const std::pair< SdfPath,SdfPath > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_MakeAbsolutePath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->MakeAbsolutePath((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_MakeRelativePath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfPath const *)arg1)->MakeRelativePath((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsValidIdentifier(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SdfPath::IsValidIdentifier((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsValidNamespacedIdentifier(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SdfPath::IsValidNamespacedIdentifier((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_TokenizeIdentifier(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfPath::TokenizeIdentifier((std::string const &)*arg1);
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_TokenizeIdentifierAsTokens(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfTokenVector result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfPath::TokenizeIdentifierAsTokens((std::string const &)*arg1);
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_JoinIdentifier__SWIG_0(void * jarg1) {
  char * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = SdfPath::JoinIdentifier((std::vector< std::string > const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_JoinIdentifier__SWIG_1(void * jarg1) {
  char * jresult ;
  TfTokenVector *arg1 = 0 ;
  std::string result;
  
  arg1 = (TfTokenVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfTokenVector const & type is null", 0);
    return 0;
  } 
  result = SdfPath::JoinIdentifier((std::vector< TfToken > const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_JoinIdentifier__SWIG_2(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SdfPath::JoinIdentifier((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_JoinIdentifier__SWIG_3(void * jarg1, void * jarg2) {
  char * jresult ;
  TfToken *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  std::string result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = SdfPath::JoinIdentifier((TfToken const &)*arg1,(TfToken const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPath_StripNamespace__SWIG_0(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfPath::StripNamespace((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_StripNamespace__SWIG_1(void * jarg1) {
  void * jresult ;
  TfToken *arg1 = 0 ;
  TfToken result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = SdfPath::StripNamespace((TfToken const &)*arg1);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsValidPathString__SWIG_0(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::string *)jarg2; 
  result = (bool)SdfPath::IsValidPathString((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsValidPathString__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SdfPath::IsValidPathString((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_IsBuiltInMarker(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SdfPath::IsBuiltInMarker((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPath_Hash() {
  void * jresult ;
  SdfPath::Hash *result = 0 ;
  
  result = (SdfPath::Hash *)new SdfPath::Hash();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPath_Hash(void * jarg1) {
  SdfPath::Hash *arg1 = (SdfPath::Hash *) 0 ;
  
  arg1 = (SdfPath::Hash *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfPath_GetHash(void * jarg1) {
  unsigned long jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  size_t result;
  
  arg1 = (SdfPath *)jarg1; 
  result = ((SdfPath const *)arg1)->GetHash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPath_FastLessThan() {
  void * jresult ;
  SdfPath::FastLessThan *result = 0 ;
  
  result = (SdfPath::FastLessThan *)new SdfPath::FastLessThan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPath_FastLessThan(void * jarg1) {
  SdfPath::FastLessThan *arg1 = (SdfPath::FastLessThan *) 0 ;
  
  arg1 = (SdfPath::FastLessThan *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPath_GetConciseRelativePaths(void * jarg1) {
  void * jresult ;
  SdfPathVector *arg1 = 0 ;
  SdfPathVector result;
  
  arg1 = (SdfPathVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = SdfPath::GetConciseRelativePaths((std::vector< SdfPath > const &)*arg1);
  jresult = new SdfPathVector((const SdfPathVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPath_RemoveDescendentPaths(void * jarg1) {
  SdfPathVector *arg1 = (SdfPathVector *) 0 ;
  
  arg1 = (SdfPathVector *)jarg1; 
  SdfPath::RemoveDescendentPaths(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPath_RemoveAncestorPaths(void * jarg1) {
  SdfPathVector *arg1 = (SdfPathVector *) 0 ;
  
  arg1 = (SdfPathVector *)jarg1; 
  SdfPath::RemoveAncestorPaths(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_4(void * jarg1, void * jarg2) {
  SdfPath *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  
  arg1 = (SdfPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath & type is null", 0);
    return ;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfPath_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfPath *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)SdfPath_Equals((SdfPath const &)*arg1,(SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPath(void * jarg1) {
  SdfPath *arg1 = (SdfPath *) 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_39(void * jarg1) {
  unsigned long jresult ;
  SdfPath *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfPath const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_Clear(void * jarg1) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_Add(void * jarg1, void * jarg2) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  SdfLayerOffset *arg2 = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (SdfLayerOffset *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((SdfLayerOffset const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  std::vector< SdfLayerOffset >::size_type result;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  result = ((std::vector< SdfLayerOffset > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  std::vector< SdfLayerOffset >::size_type result;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  result = ((std::vector< SdfLayerOffset > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  std::vector< SdfLayerOffset >::size_type arg2 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (std::vector< SdfLayerOffset >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffsetVector__SWIG_0() {
  void * jresult ;
  std::vector< SdfLayerOffset > *result = 0 ;
  
  result = (std::vector< SdfLayerOffset > *)new std::vector< SdfLayerOffset >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffsetVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SdfLayerOffset > *arg1 = 0 ;
  std::vector< SdfLayerOffset > *result = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerOffset > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< SdfLayerOffset > *)new std::vector< SdfLayerOffset >((std::vector< SdfLayerOffset > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffsetVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SdfLayerOffset > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SdfLayerOffset > *)new_std_vector_Sl_SdfLayerOffset_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  SdfLayerOffset result;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SdfLayerOffset_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new SdfLayerOffset((const SdfLayerOffset &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  SdfLayerOffset *result = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (SdfLayerOffset *) &std_vector_Sl_SdfLayerOffset_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  SdfLayerOffset *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfLayerOffset *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__setitem(arg1,arg2,(SdfLayerOffset const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  std::vector< SdfLayerOffset > *arg2 = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (std::vector< SdfLayerOffset > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerOffset > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_SdfLayerOffset_Sg__AddRange(arg1,(std::vector< SdfLayerOffset > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SdfLayerOffset > *result = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SdfLayerOffset > *)std_vector_Sl_SdfLayerOffset_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  SdfLayerOffset *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfLayerOffset *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__Insert(arg1,arg2,(SdfLayerOffset const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  std::vector< SdfLayerOffset > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfLayerOffset > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerOffset > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__InsertRange(arg1,arg2,(std::vector< SdfLayerOffset > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SdfLayerOffset *arg1 = 0 ;
  int arg2 ;
  std::vector< SdfLayerOffset > *result = 0 ;
  
  arg1 = (SdfLayerOffset *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SdfLayerOffset > *)std_vector_Sl_SdfLayerOffset_Sg__Repeat((SdfLayerOffset const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  std_vector_Sl_SdfLayerOffset_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffsetVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  int arg2 ;
  std::vector< SdfLayerOffset > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfLayerOffset > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerOffset > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerOffset_Sg__SetRange(arg1,arg2,(std::vector< SdfLayerOffset > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfLayerOffsetVector(void * jarg1) {
  std::vector< SdfLayerOffset > *arg1 = (std::vector< SdfLayerOffset > *) 0 ;
  
  arg1 = (std::vector< SdfLayerOffset > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffset__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  SdfLayerOffset *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (SdfLayerOffset *)new SdfLayerOffset(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffset__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  SdfLayerOffset *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (SdfLayerOffset *)new SdfLayerOffset(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffset__SWIG_2() {
  void * jresult ;
  SdfLayerOffset *result = 0 ;
  
  result = (SdfLayerOffset *)new SdfLayerOffset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayerOffset_GetOffset(void * jarg1) {
  double jresult ;
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  double result;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  result = (double)((SdfLayerOffset const *)arg1)->GetOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayerOffset_GetScale(void * jarg1) {
  double jresult ;
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  double result;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  result = (double)((SdfLayerOffset const *)arg1)->GetScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffset_SetOffset(void * jarg1, double jarg2) {
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  double arg2 ;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerOffset_SetScale(void * jarg1, double jarg2) {
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  double arg2 ;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetScale(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerOffset_IsIdentity(void * jarg1) {
  unsigned int jresult ;
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  bool result;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  result = (bool)((SdfLayerOffset const *)arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerOffset_IsValid(void * jarg1) {
  unsigned int jresult ;
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  bool result;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  result = (bool)((SdfLayerOffset const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerOffset_GetInverse(void * jarg1) {
  void * jresult ;
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  SdfLayerOffset result;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  result = ((SdfLayerOffset const *)arg1)->GetInverse();
  jresult = new SdfLayerOffset((const SdfLayerOffset &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerOffset_GetHash(void * jarg1) {
  unsigned long jresult ;
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  size_t result;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  result = ((SdfLayerOffset const *)arg1)->GetHash();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerOffset_Hash() {
  void * jresult ;
  SdfLayerOffset::Hash *result = 0 ;
  
  result = (SdfLayerOffset::Hash *)new SdfLayerOffset::Hash();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfLayerOffset_Hash(void * jarg1) {
  SdfLayerOffset::Hash *arg1 = (SdfLayerOffset::Hash *) 0 ;
  
  arg1 = (SdfLayerOffset::Hash *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_40(void * jarg1) {
  unsigned long jresult ;
  SdfLayerOffset *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfLayerOffset *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfLayerOffset const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfLayerOffset(void * jarg1) {
  SdfLayerOffset *arg1 = (SdfLayerOffset *) 0 ;
  
  arg1 = (SdfLayerOffset *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPayload__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  SdfPayload *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (SdfPayload *)new SdfPayload((std::string const &)*arg1,(SdfPath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPayload__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfPayload *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (SdfPayload *)new SdfPayload((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfPayload__SWIG_2() {
  void * jresult ;
  SdfPayload *result = 0 ;
  
  result = (SdfPayload *)new SdfPayload();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfPayload_GetAssetPath(void * jarg1) {
  char * jresult ;
  SdfPayload *arg1 = (SdfPayload *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfPayload *)jarg1; 
  result = (std::string *) &((SdfPayload const *)arg1)->GetAssetPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPayload_SetAssetPath(void * jarg1, char * jarg2) {
  SdfPayload *arg1 = (SdfPayload *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfPayload *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetAssetPath((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfPayload_GetPrimPath(void * jarg1) {
  void * jresult ;
  SdfPayload *arg1 = (SdfPayload *) 0 ;
  SdfPath *result = 0 ;
  
  arg1 = (SdfPayload *)jarg1; 
  result = (SdfPath *) &((SdfPayload const *)arg1)->GetPrimPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfPayload_SetPrimPath(void * jarg1, void * jarg2) {
  SdfPayload *arg1 = (SdfPayload *) 0 ;
  SdfPath *arg2 = 0 ;
  
  arg1 = (SdfPayload *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  (arg1)->SetPrimPath((SdfPath const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_41(void * jarg1) {
  unsigned long jresult ;
  SdfPayload *arg1 = 0 ;
  size_t result;
  
  arg1 = (SdfPayload *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPayload const & type is null", 0);
    return 0;
  } 
  result = hash_value((SdfPayload const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfPayload(void * jarg1) {
  SdfPayload *arg1 = (SdfPayload *) 0 ;
  
  arg1 = (SdfPayload *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_Clear(void * jarg1) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_Add(void * jarg1, void * jarg2) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  SdfNamespaceEdit *arg2 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (SdfNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((SdfNamespaceEdit const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  std::vector< SdfNamespaceEdit >::size_type result;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  result = ((std::vector< SdfNamespaceEdit > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  std::vector< SdfNamespaceEdit >::size_type result;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  result = ((std::vector< SdfNamespaceEdit > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  std::vector< SdfNamespaceEdit >::size_type arg2 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (std::vector< SdfNamespaceEdit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditVector__SWIG_0() {
  void * jresult ;
  std::vector< SdfNamespaceEdit > *result = 0 ;
  
  result = (std::vector< SdfNamespaceEdit > *)new std::vector< SdfNamespaceEdit >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SdfNamespaceEdit > *arg1 = 0 ;
  std::vector< SdfNamespaceEdit > *result = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEdit > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< SdfNamespaceEdit > *)new std::vector< SdfNamespaceEdit >((std::vector< SdfNamespaceEdit > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SdfNamespaceEdit > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SdfNamespaceEdit > *)new_std_vector_Sl_SdfNamespaceEdit_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  SdfNamespaceEdit result;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SdfNamespaceEdit_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new SdfNamespaceEdit((const SdfNamespaceEdit &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  SdfNamespaceEdit *result = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (SdfNamespaceEdit *) &std_vector_Sl_SdfNamespaceEdit_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  SdfNamespaceEdit *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfNamespaceEdit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__setitem(arg1,arg2,(SdfNamespaceEdit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  std::vector< SdfNamespaceEdit > *arg2 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (std::vector< SdfNamespaceEdit > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEdit > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_SdfNamespaceEdit_Sg__AddRange(arg1,(std::vector< SdfNamespaceEdit > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SdfNamespaceEdit > *result = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SdfNamespaceEdit > *)std_vector_Sl_SdfNamespaceEdit_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  SdfNamespaceEdit *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfNamespaceEdit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__Insert(arg1,arg2,(SdfNamespaceEdit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  std::vector< SdfNamespaceEdit > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfNamespaceEdit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEdit > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__InsertRange(arg1,arg2,(std::vector< SdfNamespaceEdit > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SdfNamespaceEdit *arg1 = 0 ;
  int arg2 ;
  std::vector< SdfNamespaceEdit > *result = 0 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SdfNamespaceEdit > *)std_vector_Sl_SdfNamespaceEdit_Sg__Repeat((SdfNamespaceEdit const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  std_vector_Sl_SdfNamespaceEdit_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  int arg2 ;
  std::vector< SdfNamespaceEdit > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfNamespaceEdit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEdit > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEdit_Sg__SetRange(arg1,arg2,(std::vector< SdfNamespaceEdit > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfNamespaceEditVector(void * jarg1) {
  std::vector< SdfNamespaceEdit > *arg1 = (std::vector< SdfNamespaceEdit > *) 0 ;
  
  arg1 = (std::vector< SdfNamespaceEdit > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_Clear(void * jarg1) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_Add(void * jarg1, void * jarg2) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  SdfNamespaceEditDetail *arg2 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (SdfNamespaceEditDetail *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEditDetail const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((SdfNamespaceEditDetail const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  std::vector< SdfNamespaceEditDetail >::size_type result;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  result = ((std::vector< SdfNamespaceEditDetail > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  std::vector< SdfNamespaceEditDetail >::size_type result;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  result = ((std::vector< SdfNamespaceEditDetail > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  std::vector< SdfNamespaceEditDetail >::size_type arg2 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (std::vector< SdfNamespaceEditDetail >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditDetailVector__SWIG_0() {
  void * jresult ;
  std::vector< SdfNamespaceEditDetail > *result = 0 ;
  
  result = (std::vector< SdfNamespaceEditDetail > *)new std::vector< SdfNamespaceEditDetail >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditDetailVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SdfNamespaceEditDetail > *arg1 = 0 ;
  std::vector< SdfNamespaceEditDetail > *result = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEditDetail > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< SdfNamespaceEditDetail > *)new std::vector< SdfNamespaceEditDetail >((std::vector< SdfNamespaceEditDetail > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditDetailVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SdfNamespaceEditDetail > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SdfNamespaceEditDetail > *)new_std_vector_Sl_SdfNamespaceEditDetail_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  SdfNamespaceEditDetail result;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SdfNamespaceEditDetail_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new SdfNamespaceEditDetail((const SdfNamespaceEditDetail &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  SdfNamespaceEditDetail *result = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (SdfNamespaceEditDetail *) &std_vector_Sl_SdfNamespaceEditDetail_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  SdfNamespaceEditDetail *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfNamespaceEditDetail *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEditDetail const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__setitem(arg1,arg2,(SdfNamespaceEditDetail const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  std::vector< SdfNamespaceEditDetail > *arg2 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (std::vector< SdfNamespaceEditDetail > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEditDetail > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_SdfNamespaceEditDetail_Sg__AddRange(arg1,(std::vector< SdfNamespaceEditDetail > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SdfNamespaceEditDetail > *result = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SdfNamespaceEditDetail > *)std_vector_Sl_SdfNamespaceEditDetail_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  SdfNamespaceEditDetail *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfNamespaceEditDetail *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEditDetail const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__Insert(arg1,arg2,(SdfNamespaceEditDetail const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  std::vector< SdfNamespaceEditDetail > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfNamespaceEditDetail > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEditDetail > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__InsertRange(arg1,arg2,(std::vector< SdfNamespaceEditDetail > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SdfNamespaceEditDetail *arg1 = 0 ;
  int arg2 ;
  std::vector< SdfNamespaceEditDetail > *result = 0 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEditDetail const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SdfNamespaceEditDetail > *)std_vector_Sl_SdfNamespaceEditDetail_Sg__Repeat((SdfNamespaceEditDetail const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  std_vector_Sl_SdfNamespaceEditDetail_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetailVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  int arg2 ;
  std::vector< SdfNamespaceEditDetail > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfNamespaceEditDetail > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfNamespaceEditDetail > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfNamespaceEditDetail_Sg__SetRange(arg1,arg2,(std::vector< SdfNamespaceEditDetail > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfNamespaceEditDetailVector(void * jarg1) {
  std::vector< SdfNamespaceEditDetail > *arg1 = (std::vector< SdfNamespaceEditDetail > *) 0 ;
  
  arg1 = (std::vector< SdfNamespaceEditDetail > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_AtEnd_get() {
  int jresult ;
  int result;
  
  result = (int)SdfNamespaceEdit::AtEnd;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_Same_get() {
  int jresult ;
  int result;
  
  result = (int)SdfNamespaceEdit::Same;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEdit__SWIG_0() {
  void * jresult ;
  SdfNamespaceEdit *result = 0 ;
  
  result = (SdfNamespaceEdit *)new SdfNamespaceEdit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEdit__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  SdfNamespaceEdit::Path *arg2 = 0 ;
  SdfNamespaceEdit::Index arg3 ;
  SdfNamespaceEdit *result = 0 ;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfNamespaceEdit::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfNamespaceEdit::Index)jarg3; 
  result = (SdfNamespaceEdit *)new SdfNamespaceEdit((SdfNamespaceEdit::Path const &)*arg1,(SdfNamespaceEdit::Path const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEdit__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  SdfNamespaceEdit::Path *arg2 = 0 ;
  SdfNamespaceEdit *result = 0 ;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfNamespaceEdit::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  result = (SdfNamespaceEdit *)new SdfNamespaceEdit((SdfNamespaceEdit::Path const &)*arg1,(SdfNamespaceEdit::Path const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_Remove(void * jarg1) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  SdfNamespaceEdit::This result;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  result = SdfNamespaceEdit::Remove((SdfPath const &)*arg1);
  jresult = new SdfNamespaceEdit::This((const SdfNamespaceEdit::This &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_Rename(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfNamespaceEdit::This result;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = SdfNamespaceEdit::Rename((SdfPath const &)*arg1,(TfToken const &)*arg2);
  jresult = new SdfNamespaceEdit::This((const SdfNamespaceEdit::This &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_Reorder(void * jarg1, int jarg2) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  SdfNamespaceEdit::Index arg2 ;
  SdfNamespaceEdit::This result;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfNamespaceEdit::Index)jarg2; 
  result = SdfNamespaceEdit::Reorder((SdfPath const &)*arg1,arg2);
  jresult = new SdfNamespaceEdit::This((const SdfNamespaceEdit::This &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_Reparent(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  SdfNamespaceEdit::Path *arg2 = 0 ;
  SdfNamespaceEdit::Index arg3 ;
  SdfNamespaceEdit::This result;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfNamespaceEdit::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfNamespaceEdit::Index)jarg3; 
  result = SdfNamespaceEdit::Reparent((SdfPath const &)*arg1,(SdfPath const &)*arg2,arg3);
  jresult = new SdfNamespaceEdit::This((const SdfNamespaceEdit::This &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_ReparentAndRename(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  SdfNamespaceEdit::Path *arg1 = 0 ;
  SdfNamespaceEdit::Path *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  SdfNamespaceEdit::Index arg4 ;
  SdfNamespaceEdit::This result;
  
  arg1 = (SdfNamespaceEdit::Path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfNamespaceEdit::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (SdfNamespaceEdit::Index)jarg4; 
  result = SdfNamespaceEdit::ReparentAndRename((SdfPath const &)*arg1,(SdfPath const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = new SdfNamespaceEdit::This((const SdfNamespaceEdit::This &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_currentPath_set(void * jarg1, void * jarg2) {
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Path *arg2 = (SdfNamespaceEdit::Path *) 0 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  arg2 = (SdfNamespaceEdit::Path *)jarg2; 
  if (arg1) (arg1)->currentPath = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_currentPath_get(void * jarg1) {
  void * jresult ;
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Path *result = 0 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  result = (SdfNamespaceEdit::Path *)& ((arg1)->currentPath);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_newPath_set(void * jarg1, void * jarg2) {
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Path *arg2 = (SdfNamespaceEdit::Path *) 0 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  arg2 = (SdfNamespaceEdit::Path *)jarg2; 
  if (arg1) (arg1)->newPath = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_newPath_get(void * jarg1) {
  void * jresult ;
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Path *result = 0 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  result = (SdfNamespaceEdit::Path *)& ((arg1)->newPath);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_index_set(void * jarg1, int jarg2) {
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Index arg2 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  arg2 = (SdfNamespaceEdit::Index)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfNamespaceEdit_index_get(void * jarg1) {
  int jresult ;
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Index result;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  result = (SdfNamespaceEdit::Index) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfNamespaceEdit(void * jarg1) {
  SdfNamespaceEdit *arg1 = (SdfNamespaceEdit *) 0 ;
  
  arg1 = (SdfNamespaceEdit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditDetail__SWIG_0() {
  void * jresult ;
  SdfNamespaceEditDetail *result = 0 ;
  
  result = (SdfNamespaceEditDetail *)new SdfNamespaceEditDetail();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfNamespaceEditDetail__SWIG_1(int jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  SdfNamespaceEditDetail::Result arg1 ;
  SdfNamespaceEdit *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfNamespaceEditDetail *result = 0 ;
  
  arg1 = (SdfNamespaceEditDetail::Result)jarg1; 
  arg2 = (SdfNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (SdfNamespaceEditDetail *)new SdfNamespaceEditDetail(arg1,(SdfNamespaceEdit const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetail_result_set(void * jarg1, int jarg2) {
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  SdfNamespaceEditDetail::Result arg2 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  arg2 = (SdfNamespaceEditDetail::Result)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetail_result_get(void * jarg1) {
  int jresult ;
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  SdfNamespaceEditDetail::Result result;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  result = (SdfNamespaceEditDetail::Result) ((arg1)->result);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetail_edit_set(void * jarg1, void * jarg2) {
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  SdfNamespaceEdit *arg2 = (SdfNamespaceEdit *) 0 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  arg2 = (SdfNamespaceEdit *)jarg2; 
  if (arg1) (arg1)->edit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetail_edit_get(void * jarg1) {
  void * jresult ;
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  SdfNamespaceEdit *result = 0 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  result = (SdfNamespaceEdit *)& ((arg1)->edit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetail_reason_set(void * jarg1, char * jarg2) {
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfNamespaceEditDetail_reason_get(void * jarg1) {
  char * jresult ;
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  result = (std::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfNamespaceEditDetail(void * jarg1) {
  SdfNamespaceEditDetail *arg1 = (SdfNamespaceEditDetail *) 0 ;
  
  arg1 = (SdfNamespaceEditDetail *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_CombineResult(int jarg1, int jarg2) {
  int jresult ;
  SdfNamespaceEditDetail::Result arg1 ;
  SdfNamespaceEditDetail::Result arg2 ;
  SdfNamespaceEditDetail::Result result;
  
  arg1 = (SdfNamespaceEditDetail::Result)jarg1; 
  arg2 = (SdfNamespaceEditDetail::Result)jarg2; 
  result = (SdfNamespaceEditDetail::Result)CombineResult(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_CombineError(int jarg1) {
  int jresult ;
  SdfNamespaceEditDetail::Result arg1 ;
  SdfNamespaceEditDetail::Result result;
  
  arg1 = (SdfNamespaceEditDetail::Result)jarg1; 
  result = (SdfNamespaceEditDetail::Result)CombineError(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_CombineUnbatched(int jarg1) {
  int jresult ;
  SdfNamespaceEditDetail::Result arg1 ;
  SdfNamespaceEditDetail::Result result;
  
  arg1 = (SdfNamespaceEditDetail::Result)jarg1; 
  result = (SdfNamespaceEditDetail::Result)CombineUnbatched(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfBatchNamespaceEdit__SWIG_0() {
  void * jresult ;
  SdfBatchNamespaceEdit *result = 0 ;
  
  result = (SdfBatchNamespaceEdit *)new SdfBatchNamespaceEdit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfBatchNamespaceEdit__SWIG_1(void * jarg1) {
  void * jresult ;
  SdfBatchNamespaceEdit *arg1 = 0 ;
  SdfBatchNamespaceEdit *result = 0 ;
  
  arg1 = (SdfBatchNamespaceEdit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  result = (SdfBatchNamespaceEdit *)new SdfBatchNamespaceEdit((SdfBatchNamespaceEdit const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfBatchNamespaceEdit__SWIG_2(void * jarg1) {
  void * jresult ;
  SdfNamespaceEditVector *arg1 = 0 ;
  SdfBatchNamespaceEdit *result = 0 ;
  
  arg1 = (SdfNamespaceEditVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEditVector const & type is null", 0);
    return 0;
  } 
  result = (SdfBatchNamespaceEdit *)new SdfBatchNamespaceEdit((SdfNamespaceEditVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfBatchNamespaceEdit(void * jarg1) {
  SdfBatchNamespaceEdit *arg1 = (SdfBatchNamespaceEdit *) 0 ;
  
  arg1 = (SdfBatchNamespaceEdit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfBatchNamespaceEdit_Add__SWIG_0(void * jarg1, void * jarg2) {
  SdfBatchNamespaceEdit *arg1 = (SdfBatchNamespaceEdit *) 0 ;
  SdfNamespaceEdit *arg2 = 0 ;
  
  arg1 = (SdfBatchNamespaceEdit *)jarg1; 
  arg2 = (SdfNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit const & type is null", 0);
    return ;
  } 
  (arg1)->Add((SdfNamespaceEdit const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfBatchNamespaceEdit_Add__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SdfBatchNamespaceEdit *arg1 = (SdfBatchNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Path *arg2 = 0 ;
  SdfNamespaceEdit::Path *arg3 = 0 ;
  SdfNamespaceEdit::Index arg4 ;
  
  arg1 = (SdfBatchNamespaceEdit *)jarg1; 
  arg2 = (SdfNamespaceEdit::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return ;
  } 
  arg3 = (SdfNamespaceEdit::Path *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return ;
  } 
  arg4 = (SdfNamespaceEdit::Index)jarg4; 
  (arg1)->Add((SdfNamespaceEdit::Path const &)*arg2,(SdfNamespaceEdit::Path const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfBatchNamespaceEdit_Add__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  SdfBatchNamespaceEdit *arg1 = (SdfBatchNamespaceEdit *) 0 ;
  SdfNamespaceEdit::Path *arg2 = 0 ;
  SdfNamespaceEdit::Path *arg3 = 0 ;
  
  arg1 = (SdfBatchNamespaceEdit *)jarg1; 
  arg2 = (SdfNamespaceEdit::Path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return ;
  } 
  arg3 = (SdfNamespaceEdit::Path *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfNamespaceEdit::Path const & type is null", 0);
    return ;
  } 
  (arg1)->Add((SdfNamespaceEdit::Path const &)*arg2,(SdfNamespaceEdit::Path const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfBatchNamespaceEdit_GetEdits(void * jarg1) {
  void * jresult ;
  SdfBatchNamespaceEdit *arg1 = (SdfBatchNamespaceEdit *) 0 ;
  SdfNamespaceEditVector *result = 0 ;
  
  arg1 = (SdfBatchNamespaceEdit *)jarg1; 
  result = (SdfNamespaceEditVector *) &((SdfBatchNamespaceEdit const *)arg1)->GetEdits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerBase_GetFileFormat(void * jarg1) {
  void * jresult ;
  SdfLayerBase *arg1 = (SdfLayerBase *) 0 ;
  SwigValueWrapper< TfDeclarePtrs< SdfFileFormat >::ConstPtr > result;
  
  arg1 = (SdfLayerBase *)jarg1; 
  result = ((SdfLayerBase const *)arg1)->GetFileFormat();
  jresult = new SdfFileFormatConstPtr((const SdfFileFormatConstPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerBase_GetFileFormatArguments(void * jarg1) {
  void * jresult ;
  SdfLayerBase *arg1 = (SdfLayerBase *) 0 ;
  SdfLayerBase::FileFormatArguments *result = 0 ;
  
  arg1 = (SdfLayerBase *)jarg1; 
  result = (SdfLayerBase::FileFormatArguments *) &((SdfLayerBase const *)arg1)->GetFileFormatArguments();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerBase_GetSchema(void * jarg1) {
  void * jresult ;
  SdfLayerBase *arg1 = (SdfLayerBase *) 0 ;
  SdfSchemaBase *result = 0 ;
  
  arg1 = (SdfLayerBase *)jarg1; 
  result = (SdfSchemaBase *) &((SdfLayerBase const *)arg1)->GetSchema();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_Clear(void * jarg1) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_Add(void * jarg1, void * jarg2) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((SdfLayerHandle const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  std::vector< SdfLayerHandle >::size_type result;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  result = ((std::vector< SdfLayerHandle > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  std::vector< SdfLayerHandle >::size_type result;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  result = ((std::vector< SdfLayerHandle > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  std::vector< SdfLayerHandle >::size_type arg2 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (std::vector< SdfLayerHandle >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerHandleVector__SWIG_0() {
  void * jresult ;
  std::vector< SdfLayerHandle > *result = 0 ;
  
  result = (std::vector< SdfLayerHandle > *)new std::vector< SdfLayerHandle >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerHandleVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SdfLayerHandle > *arg1 = 0 ;
  std::vector< SdfLayerHandle > *result = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerHandle > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< SdfLayerHandle > *)new std::vector< SdfLayerHandle >((std::vector< SdfLayerHandle > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerHandleVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SdfLayerHandle > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SdfLayerHandle > *)new_std_vector_Sl_SdfLayerHandle_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SdfLayerHandle_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  SdfLayerHandle *result = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (SdfLayerHandle *) &std_vector_Sl_SdfLayerHandle_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  SdfLayerHandle *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__setitem(arg1,arg2,(SdfLayerHandle const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  std::vector< SdfLayerHandle > *arg2 = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (std::vector< SdfLayerHandle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerHandle > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_SdfLayerHandle_Sg__AddRange(arg1,(std::vector< SdfLayerHandle > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SdfLayerHandle > *result = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SdfLayerHandle > *)std_vector_Sl_SdfLayerHandle_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  SdfLayerHandle *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__Insert(arg1,arg2,(SdfLayerHandle const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  std::vector< SdfLayerHandle > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfLayerHandle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerHandle > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__InsertRange(arg1,arg2,(std::vector< SdfLayerHandle > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  int arg2 ;
  std::vector< SdfLayerHandle > *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SdfLayerHandle > *)std_vector_Sl_SdfLayerHandle_Sg__Repeat((SdfLayerHandle const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  std_vector_Sl_SdfLayerHandle_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandleVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  int arg2 ;
  std::vector< SdfLayerHandle > *arg3 = 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SdfLayerHandle > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfLayerHandle > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SdfLayerHandle_Sg__SetRange(arg1,arg2,(std::vector< SdfLayerHandle > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfLayerHandleVector(void * jarg1) {
  std::vector< SdfLayerHandle > *arg1 = (std::vector< SdfLayerHandle > *) 0 ;
  
  arg1 = (std::vector< SdfLayerHandle > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_SdfLayerHandle(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfLayerHandle *result = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (SdfLayerHandle *)new SdfLayerHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle___deref__(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayer *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (SdfLayer *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfLayerHandle(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateNew__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->CreateNew((std::string const &)*arg2,(std::string const &)*arg3,(SdfLayer::FileFormatArguments const &)*arg4);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateNew__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (*arg1)->CreateNew((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateNew__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->CreateNew((std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateNew__SWIG_3(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SdfLayer::FileFormatArguments *arg5 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (SdfLayer::FileFormatArguments *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->CreateNew((SdfFileFormatConstPtr const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(SdfLayer::FileFormatArguments const &)*arg5);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateNew__SWIG_4(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (*arg1)->CreateNew((SdfFileFormatConstPtr const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateNew__SWIG_5(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (*arg1)->CreateNew((SdfFileFormatConstPtr const &)*arg2,(std::string const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_New__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SdfLayer::FileFormatArguments *arg5 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (SdfLayer::FileFormatArguments *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->New((SdfFileFormatConstPtr const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(SdfLayer::FileFormatArguments const &)*arg5);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_New__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (*arg1)->New((SdfFileFormatConstPtr const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_New__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (*arg1)->New((SdfFileFormatConstPtr const &)*arg2,(std::string const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Find__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayer::FileFormatArguments *arg3 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayer::FileFormatArguments *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->Find((std::string const &)*arg2,(SdfLayer::FileFormatArguments const &)*arg3);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Find__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->Find((std::string const &)*arg2);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_FindRelativeToLayer__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->FindRelativeToLayer((SdfLayerHandle const &)*arg2,(std::string const &)*arg3,(SdfLayer::FileFormatArguments const &)*arg4);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_FindRelativeToLayer__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (*arg1)->FindRelativeToLayer((SdfLayerHandle const &)*arg2,(std::string const &)*arg3);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_FindOrOpen__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayer::FileFormatArguments *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayer::FileFormatArguments *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->FindOrOpen((std::string const &)*arg2,(SdfLayer::FileFormatArguments const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_FindOrOpen__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->FindOrOpen((std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_OpenAsAnonymous__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (*arg1)->OpenAsAnonymous((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_OpenAsAnonymous__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (*arg1)->OpenAsAnonymous((std::string const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_OpenAsAnonymous__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->OpenAsAnonymous((std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetSchema(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfSchemaBase *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (SdfSchemaBase *) &(*arg1)->GetSchema();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetLoadedLayers(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerHandleSet result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetLoadedLayers();
  jresult = new SdfLayerHandleSet((const SdfLayerHandleSet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_TransferContent(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return ;
  } 
  (*arg1)->TransferContent((SdfLayerHandle const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateAnonymous__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->CreateAnonymous((std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateAnonymous__SWIG_1(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->CreateAnonymous();
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateAnonymous__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfFileFormatConstPtr *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfFileFormatConstPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->CreateAnonymous((std::string const &)*arg2,(SdfFileFormatConstPtr const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_IsAnonymous(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->IsAnonymous();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_IsAnonymousLayerIdentifier(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->IsAnonymousLayerIdentifier((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetDisplayNameFromIdentifier(void * jarg1, char * jarg2) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->GetDisplayNameFromIdentifier((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ComputeRealPath(void * jarg1, char * jarg2) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->ComputeRealPath((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Save__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->Save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Save__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Export__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->Export((std::string const &)*arg2,(std::string const &)*arg3,(SdfLayer::FileFormatArguments const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Export__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(*arg1)->Export((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Export__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->Export((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ImportFromString(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->ImportFromString((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Clear(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Reload__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->Reload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Reload__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->Reload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ReloadLayers__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::set< SdfLayerHandle > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (std::set< SdfLayerHandle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< SdfLayerHandle > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(*arg1)->ReloadLayers((std::set< SdfLayerHandle > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ReloadLayers__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::set< SdfLayerHandle > *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (std::set< SdfLayerHandle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< SdfLayerHandle > const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->ReloadLayers((std::set< SdfLayerHandle > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Import(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->Import((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetExternalReferences(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetExternalReferences();
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_UpdateExternalReference__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(*arg1)->UpdateExternalReference((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_UpdateExternalReference__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->UpdateExternalReference((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SplitIdentifier(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  SdfLayer::FileFormatArguments *arg4 = (SdfLayer::FileFormatArguments *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::string *)jarg3; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4; 
  result = (bool)(*arg1)->SplitIdentifier((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CreateIdentifier(void * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayer::FileFormatArguments *arg3 = 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayer::FileFormatArguments *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->CreateIdentifier((std::string const &)*arg2,(SdfLayer::FileFormatArguments const &)*arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetIdentifier(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (std::string *) &(*arg1)->GetIdentifier();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetIdentifier(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->SetIdentifier((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_UpdateAssetInfo__SWIG_0(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->UpdateAssetInfo((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_UpdateAssetInfo__SWIG_1(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->UpdateAssetInfo();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetDisplayName(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetDisplayName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetRealPath(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (std::string *) &(*arg1)->GetRealPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFileExtension(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetFileExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetVersion(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (std::string *) &(*arg1)->GetVersion();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetRepositoryPath(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (std::string *) &(*arg1)->GetRepositoryPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetAssetName(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (std::string *) &(*arg1)->GetAssetName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetAssetInfo(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  VtValue *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (VtValue *) &(*arg1)->GetAssetInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ComputeAbsolutePath(void * jarg1, char * jarg2) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->ComputeAbsolutePath((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFieldTypeid__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfAbstractDataSpecId *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  std::type_info *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfAbstractDataSpecId *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAbstractDataSpecId const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (std::type_info *) &(*arg1)->GetFieldTypeid((SdfAbstractDataSpecId const &)*arg2,(TfToken const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFieldTypeid__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  std::type_info *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (std::type_info *) &(*arg1)->GetFieldTypeid((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetSpecType(void * jarg1, void * jarg2) {
  int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfSpecType result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (SdfSpecType)(*arg1)->GetSpecType((SdfPath const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasSpec(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasSpec((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ListFields(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  std::vector< TfToken > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->ListFields((SdfPath const &)*arg2);
  jresult = new std::vector< TfToken >((const std::vector< TfToken > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasField(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasField((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasFieldDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasFieldDictKey((SdfPath const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetField(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetField((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFieldDictValueByKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  VtValue result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetFieldDictValueByKey((SdfPath const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_EraseField(void * jarg1, void * jarg2, void * jarg3) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->EraseField((SdfPath const &)*arg2,(TfToken const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_EraseFieldDictValueByKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->EraseFieldDictValueByKey((SdfPath const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetColorConfiguration(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfAssetPath result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetColorConfiguration();
  jresult = new SdfAssetPath((const SdfAssetPath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetColorConfiguration(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfAssetPath *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return ;
  } 
  (*arg1)->SetColorConfiguration((SdfAssetPath const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasColorConfiguration(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasColorConfiguration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearColorConfiguration(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearColorConfiguration();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetColorManagementSystem(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetColorManagementSystem();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetColorManagementSystem(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->SetColorManagementSystem((TfToken const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasColorManagementSystem(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasColorManagementSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearColorManagementSystem(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearColorManagementSystem();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetComment(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetComment();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetComment(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->SetComment((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetDefaultPrim(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetDefaultPrim();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetDefaultPrim(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->SetDefaultPrim((TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearDefaultPrim(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearDefaultPrim();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasDefaultPrim(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasDefaultPrim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetDocumentation(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetDocumentation();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetDocumentation(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->SetDocumentation((std::string const &)*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetStartTimeCode(void * jarg1) {
  double jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (double)(*arg1)->GetStartTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetStartTimeCode(void * jarg1, double jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetStartTimeCode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasStartTimeCode(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasStartTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearStartTimeCode(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearStartTimeCode();
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetEndTimeCode(void * jarg1) {
  double jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (double)(*arg1)->GetEndTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetEndTimeCode(void * jarg1, double jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetEndTimeCode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasEndTimeCode(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasEndTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearEndTimeCode(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearEndTimeCode();
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetTimeCodesPerSecond(void * jarg1) {
  double jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (double)(*arg1)->GetTimeCodesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetTimeCodesPerSecond(void * jarg1, double jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetTimeCodesPerSecond(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasTimeCodesPerSecond(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasTimeCodesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearTimeCodesPerSecond(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearTimeCodesPerSecond();
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFramesPerSecond(void * jarg1) {
  double jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (double)(*arg1)->GetFramesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetFramesPerSecond(void * jarg1, double jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetFramesPerSecond(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasFramesPerSecond(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasFramesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearFramesPerSecond(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearFramesPerSecond();
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFramePrecision(void * jarg1) {
  int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  int result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (int)(*arg1)->GetFramePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetFramePrecision(void * jarg1, int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  int arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFramePrecision(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasFramePrecision(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasFramePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearFramePrecision(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearFramePrecision();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetOwner(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetOwner();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetOwner(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->SetOwner((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasOwner(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearOwner(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearOwner();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetSessionOwner(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetSessionOwner();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetSessionOwner(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->SetSessionOwner((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasSessionOwner(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasSessionOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearSessionOwner(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearSessionOwner();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetHasOwnedSubLayers(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->GetHasOwnedSubLayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetHasOwnedSubLayers(void * jarg1, unsigned int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetHasOwnedSubLayers(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetCustomLayerData(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  VtDictionary result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetCustomLayerData();
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetCustomLayerData(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  VtDictionary *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return ;
  } 
  (*arg1)->SetCustomLayerData((VtDictionary const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_HasCustomLayerData(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->HasCustomLayerData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ClearCustomLayerData(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->ClearCustomLayerData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetRootPrims(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayer::RootPrimsView result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetRootPrims();
  jresult = new SdfLayer::RootPrimsView((const SdfLayer::RootPrimsView &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetRootPrims(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPrimSpecHandleVector *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPrimSpecHandleVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandleVector const & type is null", 0);
    return ;
  } 
  (*arg1)->SetRootPrims((SdfPrimSpecHandleVector const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_InsertRootPrim__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPrimSpecHandle *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPrimSpecHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(*arg1)->InsertRootPrim((SdfPrimSpecHandle const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_InsertRootPrim__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPrimSpecHandle *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPrimSpecHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandle const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->InsertRootPrim((SdfPrimSpecHandle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemoveRootPrim(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPrimSpecHandle *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPrimSpecHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandle const & type is null", 0);
    return ;
  } 
  (*arg1)->RemoveRootPrim((SdfPrimSpecHandle const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ScheduleRemoveIfInert(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfSpec *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfSpec const & type is null", 0);
    return ;
  } 
  (*arg1)->ScheduleRemoveIfInert((SdfSpec const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemovePrimIfInert(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPrimSpecHandle arg2 ;
  SdfPrimSpecHandle *argp2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  argp2 = (SdfPrimSpecHandle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfPrimSpecHandle", 0);
    return ;
  }
  arg2 = *argp2; 
  (*arg1)->RemovePrimIfInert(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemovePropertyIfHasOnlyRequiredFields(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPropertySpecHandle arg2 ;
  SdfPropertySpecHandle *argp2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  argp2 = (SdfPropertySpecHandle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfPropertySpecHandle", 0);
    return ;
  }
  arg2 = *argp2; 
  (*arg1)->RemovePropertyIfHasOnlyRequiredFields(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemoveInertSceneDescription(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->RemoveInertSceneDescription();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetRootPrimOrder(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::vector< TfToken > *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (std::vector< TfToken > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return ;
  } 
  (*arg1)->SetRootPrimOrder((std::vector< TfToken > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_InsertInRootPrimOrder__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (*arg1)->InsertInRootPrimOrder((TfToken const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_InsertInRootPrimOrder__SWIG_1(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->InsertInRootPrimOrder((TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemoveFromRootPrimOrder(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->RemoveFromRootPrimOrder((TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemoveFromRootPrimOrderByIndex(void * jarg1, int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  int arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->RemoveFromRootPrimOrderByIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ApplyRootPrimOrder(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::vector< TfToken > *arg2 = (std::vector< TfToken > *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (std::vector< TfToken > *)jarg2; 
  (*arg1)->ApplyRootPrimOrder(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetSubLayerPaths(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (*arg1)->SetSubLayerPaths((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetNumSubLayerPaths(void * jarg1) {
  unsigned long jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  size_t result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetNumSubLayerPaths();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_InsertSubLayerPath__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (*arg1)->InsertSubLayerPath((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_InsertSubLayerPath__SWIG_1(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->InsertSubLayerPath((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemoveSubLayerPath(void * jarg1, int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  int arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->RemoveSubLayerPath(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetSubLayerOffsets(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerOffsetVector result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetSubLayerOffsets();
  jresult = new SdfLayerOffsetVector((const SdfLayerOffsetVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetSubLayerOffset(void * jarg1, int jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  int arg2 ;
  SdfLayerOffset result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (*arg1)->GetSubLayerOffset(arg2);
  jresult = new SdfLayerOffset((const SdfLayerOffset &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetSubLayerOffset(void * jarg1, void * jarg2, int jarg3) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerOffset *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfLayerOffset *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (*arg1)->SetSubLayerOffset((SdfLayerOffset const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetMutedLayers(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetMutedLayers();
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_IsMuted__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->IsMuted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_IsMuted__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->IsMuted((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetMuted(void * jarg1, unsigned int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetMuted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_AddToMutedLayers(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->AddToMutedLayers((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_RemoveFromMutedLayers(void * jarg1, char * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (*arg1)->RemoveFromMutedLayers((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetPseudoRoot(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPrimSpecHandle result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetPseudoRoot();
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetObjectAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfSpecHandle result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetObjectAtPath((SdfPath const &)*arg2);
  jresult = new SdfSpecHandle((const SdfSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetPrimAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPrimSpecHandle result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetPrimAtPath((SdfPath const &)*arg2);
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetPropertyAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPropertySpecHandle result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetPropertyAtPath((SdfPath const &)*arg2);
  jresult = new SdfPropertySpecHandle((const SdfPropertySpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetAttributeAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfAttributeSpecHandle result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetAttributeAtPath((SdfPath const &)*arg2);
  jresult = new SdfAttributeSpecHandle((const SdfAttributeSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetRelationshipAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfRelationshipSpecHandle result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetRelationshipAtPath((SdfPath const &)*arg2);
  jresult = new SdfRelationshipSpecHandle((const SdfRelationshipSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_PermissionToEdit(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->PermissionToEdit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_PermissionToSave(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->PermissionToSave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetPermissionToEdit(void * jarg1, unsigned int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetPermissionToEdit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetPermissionToSave(void * jarg1, unsigned int jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool arg2 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetPermissionToSave(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CanApply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfBatchNamespaceEdit *arg2 = 0 ;
  SdfNamespaceEditDetailVector *arg3 = (SdfNamespaceEditDetailVector *) 0 ;
  SdfNamespaceEditDetail::Result result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfBatchNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfNamespaceEditDetailVector *)jarg3; 
  result = (SdfNamespaceEditDetail::Result)(*arg1)->CanApply((SdfBatchNamespaceEdit const &)*arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_CanApply__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfBatchNamespaceEdit *arg2 = 0 ;
  SdfNamespaceEditDetail::Result result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfBatchNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  result = (SdfNamespaceEditDetail::Result)(*arg1)->CanApply((SdfBatchNamespaceEdit const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_Apply(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfBatchNamespaceEdit *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfBatchNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->Apply((SdfBatchNamespaceEdit const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetStateDelegate(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SwigValueWrapper< TfDeclarePtrs< SdfLayerStateDelegateBase >::Ptr > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetStateDelegate();
  jresult = new SdfLayerStateDelegateBasePtr((const SdfLayerStateDelegateBasePtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_SetStateDelegate(void * jarg1, void * jarg2) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerStateDelegateBaseRefPtr *arg2 = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfLayerStateDelegateBaseRefPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerStateDelegateBaseRefPtr const & type is null", 0);
    return ;
  } 
  (*arg1)->SetStateDelegate((SdfLayerStateDelegateBaseRefPtr const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_IsDirty(void * jarg1) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (bool)(*arg1)->IsDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ListAllTimeSamples(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::set< double > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->ListAllTimeSamples();
  jresult = new std::set< double >((const std::set< double > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetBracketingTimeSamples(void * jarg1, double jarg2, double * jarg3, double * jarg4) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(*arg1)->GetBracketingTimeSamples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetNumTimeSamplesForPath(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  size_t result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetNumTimeSamplesForPath((SdfPath const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ListTimeSamplesForPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  std::set< double > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->ListTimeSamplesForPath((SdfPath const &)*arg2);
  jresult = new std::set< double >((const std::set< double > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetBracketingTimeSamplesForPath(void * jarg1, void * jarg2, double jarg3, double * jarg4, double * jarg5) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)(*arg1)->GetBracketingTimeSamplesForPath((SdfPath const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_QueryTimeSample(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->QueryTimeSample((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_EraseTimeSample(void * jarg1, void * jarg2, double jarg3) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfPath *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (*arg1)->EraseTimeSample((SdfPath const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayerHandle_DumpLayerInfo(void * jarg1) {
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  (*arg1)->DumpLayerInfo();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayerHandle_WriteDataFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->WriteDataFile((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_ExportToString(void * jarg1) {
  char * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  std::string result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = SdfLayer_ExportToString((SdfLayer*)(arg1)->operator ->());
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFileFormat(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SwigValueWrapper< TfDeclarePtrs< SdfFileFormat >::ConstPtr > result;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (*arg1)->GetFileFormat();
  jresult = new SdfFileFormatConstPtr((const SdfFileFormatConstPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayerHandle_GetFileFormatArguments(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = (SdfLayerHandle *) 0 ;
  SdfLayerBase::FileFormatArguments *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1; 
  result = (SdfLayerBase::FileFormatArguments *) &(*arg1)->GetFileFormatArguments();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_SdfLayer(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateNew__SWIG_0(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SdfLayer::FileFormatArguments *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayer::FileFormatArguments *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::CreateNew((std::string const &)*arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateNew__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SdfLayer::CreateNew((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateNew__SWIG_2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::CreateNew((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateNew__SWIG_3(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  SdfFileFormatConstPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfFileFormatConstPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::CreateNew((TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateNew__SWIG_4(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  SdfFileFormatConstPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfFileFormatConstPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = SdfLayer::CreateNew((TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateNew__SWIG_5(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfFileFormatConstPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfFileFormatConstPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SdfLayer::CreateNew((TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg1,(std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_New__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  SdfFileFormatConstPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfFileFormatConstPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::New((TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_New__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  SdfFileFormatConstPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfFileFormatConstPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = SdfLayer::New((TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_New__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfFileFormatConstPtr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (SdfFileFormatConstPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SdfLayer::New((TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg1,(std::string const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_Find__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayer::FileFormatArguments *arg2 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayer::FileFormatArguments *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::Find((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_Find__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::Find((std::string const &)*arg1);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_FindRelativeToLayer__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SdfLayer::FileFormatArguments *arg3 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayer::FileFormatArguments *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::FindRelativeToLayer((SdfLayerHandle const &)*arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_FindRelativeToLayer__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SdfLayer::FindRelativeToLayer((SdfLayerHandle const &)*arg1,(std::string const &)*arg2);
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_FindOrOpen__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayer::FileFormatArguments *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayer::FileFormatArguments *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::FindOrOpen((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_FindOrOpen__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::FindOrOpen((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_OpenAsAnonymous__SWIG_0(char * jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = SdfLayer::OpenAsAnonymous((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_OpenAsAnonymous__SWIG_1(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = SdfLayer::OpenAsAnonymous((std::string const &)*arg1,arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_OpenAsAnonymous__SWIG_2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::OpenAsAnonymous((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetSchema(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfSchemaBase *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (SdfSchemaBase *) &((SdfLayer const *)arg1)->GetSchema();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetLoadedLayers() {
  void * jresult ;
  SdfLayerHandleSet result;
  
  result = SdfLayer::GetLoadedLayers();
  jresult = new SdfLayerHandleSet((const SdfLayerHandleSet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_TransferContent(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return ;
  } 
  (arg1)->TransferContent((SdfLayerHandle const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateAnonymous__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::CreateAnonymous((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateAnonymous__SWIG_1() {
  void * jresult ;
  SdfLayerRefPtr result;
  
  result = SdfLayer::CreateAnonymous();
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateAnonymous__SWIG_2(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfFileFormatConstPtr *arg2 = 0 ;
  SdfLayerRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfFileFormatConstPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfFileFormatConstPtr const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::CreateAnonymous((std::string const &)*arg1,(TfDeclarePtrs< SdfFileFormat >::ConstPtr const &)*arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_IsAnonymous(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->IsAnonymous();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_IsAnonymousLayerIdentifier(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SdfLayer::IsAnonymousLayerIdentifier((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetDisplayNameFromIdentifier(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::GetDisplayNameFromIdentifier((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_ComputeRealPath(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SdfLayer::ComputeRealPath((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Save__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  bool arg2 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  result = (bool)((SdfLayer const *)arg1)->Save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Save__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Export__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (bool)((SdfLayer const *)arg1)->Export((std::string const &)*arg2,(std::string const &)*arg3,(SdfLayer::FileFormatArguments const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Export__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((SdfLayer const *)arg1)->Export((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Export__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((SdfLayer const *)arg1)->Export((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_ImportFromString(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->ImportFromString((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_Clear(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Reload__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  bool arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Reload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Reload__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)(arg1)->Reload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_ReloadLayers__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::set< SdfLayerHandle > *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (std::set< SdfLayerHandle > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< SdfLayerHandle > const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (bool)SdfLayer::ReloadLayers((std::set< SdfLayerHandle > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_ReloadLayers__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  std::set< SdfLayerHandle > *arg1 = 0 ;
  bool result;
  
  arg1 = (std::set< SdfLayerHandle > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< SdfLayerHandle > const & type is null", 0);
    return 0;
  } 
  result = (bool)SdfLayer::ReloadLayers((std::set< SdfLayerHandle > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Import(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->Import((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetExternalReferences(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (arg1)->GetExternalReferences();
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_UpdateExternalReference__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->UpdateExternalReference((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_UpdateExternalReference__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->UpdateExternalReference((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_SplitIdentifier(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  SdfLayer::FileFormatArguments *arg3 = (SdfLayer::FileFormatArguments *) 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::string *)jarg2; 
  arg3 = (SdfLayer::FileFormatArguments *)jarg3; 
  result = (bool)SdfLayer::SplitIdentifier((std::string const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_CreateIdentifier(char * jarg1, void * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  SdfLayer::FileFormatArguments *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayer::FileFormatArguments *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = SdfLayer::CreateIdentifier((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetIdentifier(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (std::string *) &((SdfLayer const *)arg1)->GetIdentifier();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetIdentifier(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetIdentifier((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_UpdateAssetInfo__SWIG_0(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->UpdateAssetInfo((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_UpdateAssetInfo__SWIG_1(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->UpdateAssetInfo();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetDisplayName(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetDisplayName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetRealPath(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (std::string *) &((SdfLayer const *)arg1)->GetRealPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetFileExtension(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetFileExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetVersion(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (std::string *) &((SdfLayer const *)arg1)->GetVersion();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetRepositoryPath(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (std::string *) &((SdfLayer const *)arg1)->GetRepositoryPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetAssetName(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (std::string *) &((SdfLayer const *)arg1)->GetAssetName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetAssetInfo(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  VtValue *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (VtValue *) &((SdfLayer const *)arg1)->GetAssetInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_ComputeAbsolutePath(void * jarg1, char * jarg2) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->ComputeAbsolutePath((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetFieldTypeid__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfAbstractDataSpecId *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::type_info *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfAbstractDataSpecId *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAbstractDataSpecId const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (std::type_info *) &((SdfLayer const *)arg1)->GetFieldTypeid((SdfAbstractDataSpecId const &)*arg2,(TfToken const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayer_GetSpecType(void * jarg1, void * jarg2) {
  int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfSpecType result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (SdfSpecType)((SdfLayer const *)arg1)->GetSpecType((SdfPath const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasSpec(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((SdfLayer const *)arg1)->HasSpec((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_ListFields(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::vector< TfToken > result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfLayer const *)arg1)->ListFields((SdfPath const &)*arg2);
  jresult = new std::vector< TfToken >((const std::vector< TfToken > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasField(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((SdfLayer const *)arg1)->HasField((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetFieldTypeid__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::type_info *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (std::type_info *) &((SdfLayer const *)arg1)->GetFieldTypeid((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasFieldDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((SdfLayer const *)arg1)->HasFieldDictKey((SdfPath const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetField(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  VtValue result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfLayer const *)arg1)->GetField((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetFieldDictValueByKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  VtValue result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((SdfLayer const *)arg1)->GetFieldDictValueByKey((SdfPath const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_EraseField(void * jarg1, void * jarg2, void * jarg3) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->EraseField((SdfPath const &)*arg2,(TfToken const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_EraseFieldDictValueByKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->EraseFieldDictValueByKey((SdfPath const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetColorConfiguration(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfAssetPath result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetColorConfiguration();
  jresult = new SdfAssetPath((const SdfAssetPath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetColorConfiguration(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfAssetPath *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return ;
  } 
  (arg1)->SetColorConfiguration((SdfAssetPath const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasColorConfiguration(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasColorConfiguration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearColorConfiguration(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearColorConfiguration();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetColorManagementSystem(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  TfToken result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetColorManagementSystem();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetColorManagementSystem(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->SetColorManagementSystem((TfToken const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasColorManagementSystem(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasColorManagementSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearColorManagementSystem(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearColorManagementSystem();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetComment(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetComment();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetComment(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetComment((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetDefaultPrim(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  TfToken result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetDefaultPrim();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetDefaultPrim(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->SetDefaultPrim((TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearDefaultPrim(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearDefaultPrim();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasDefaultPrim(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)(arg1)->HasDefaultPrim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetDocumentation(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetDocumentation();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetDocumentation(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetDocumentation((std::string const &)*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayer_GetStartTimeCode(void * jarg1) {
  double jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((SdfLayer const *)arg1)->GetStartTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetStartTimeCode(void * jarg1, double jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  double arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->SetStartTimeCode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasStartTimeCode(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasStartTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearStartTimeCode(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearStartTimeCode();
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayer_GetEndTimeCode(void * jarg1) {
  double jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((SdfLayer const *)arg1)->GetEndTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetEndTimeCode(void * jarg1, double jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  double arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->SetEndTimeCode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasEndTimeCode(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasEndTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearEndTimeCode(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearEndTimeCode();
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayer_GetTimeCodesPerSecond(void * jarg1) {
  double jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((SdfLayer const *)arg1)->GetTimeCodesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetTimeCodesPerSecond(void * jarg1, double jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  double arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->SetTimeCodesPerSecond(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasTimeCodesPerSecond(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasTimeCodesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearTimeCodesPerSecond(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearTimeCodesPerSecond();
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_SdfLayer_GetFramesPerSecond(void * jarg1) {
  double jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((SdfLayer const *)arg1)->GetFramesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetFramesPerSecond(void * jarg1, double jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  double arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->SetFramesPerSecond(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasFramesPerSecond(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasFramesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearFramesPerSecond(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearFramesPerSecond();
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayer_GetFramePrecision(void * jarg1) {
  int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (int)((SdfLayer const *)arg1)->GetFramePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetFramePrecision(void * jarg1, int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  int arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->SetFramePrecision(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasFramePrecision(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasFramePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearFramePrecision(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearFramePrecision();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetOwner(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetOwner();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetOwner(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetOwner((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasOwner(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearOwner(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearOwner();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_GetSessionOwner(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetSessionOwner();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetSessionOwner(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetSessionOwner((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasSessionOwner(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasSessionOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearSessionOwner(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearSessionOwner();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_GetHasOwnedSubLayers(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->GetHasOwnedSubLayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetHasOwnedSubLayers(void * jarg1, unsigned int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  bool arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHasOwnedSubLayers(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetCustomLayerData(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  VtDictionary result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetCustomLayerData();
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetCustomLayerData(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  VtDictionary *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return ;
  } 
  (arg1)->SetCustomLayerData((VtDictionary const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_HasCustomLayerData(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->HasCustomLayerData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ClearCustomLayerData(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearCustomLayerData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetRootPrims(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfLayer::RootPrimsView result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetRootPrims();
  jresult = new SdfLayer::RootPrimsView((const SdfLayer::RootPrimsView &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetRootPrims(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPrimSpecHandleVector *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPrimSpecHandleVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandleVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetRootPrims((SdfPrimSpecHandleVector const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_InsertRootPrim__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPrimSpecHandle *arg2 = 0 ;
  int arg3 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPrimSpecHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->InsertRootPrim((SdfPrimSpecHandle const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_InsertRootPrim__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPrimSpecHandle *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPrimSpecHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandle const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->InsertRootPrim((SdfPrimSpecHandle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemoveRootPrim(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPrimSpecHandle *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPrimSpecHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPrimSpecHandle const & type is null", 0);
    return ;
  } 
  (arg1)->RemoveRootPrim((SdfPrimSpecHandle const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ScheduleRemoveIfInert(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfSpec *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfSpec const & type is null", 0);
    return ;
  } 
  (arg1)->ScheduleRemoveIfInert((SdfSpec const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemovePrimIfInert(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPrimSpecHandle arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfPrimSpecHandle *argp2 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  argp2 = (SdfPrimSpecHandle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfPrimSpecHandle", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->RemovePrimIfInert(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemovePropertyIfHasOnlyRequiredFields(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPropertySpecHandle arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfPropertySpecHandle *argp2 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  argp2 = (SdfPropertySpecHandle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfPropertySpecHandle", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->RemovePropertyIfHasOnlyRequiredFields(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemoveInertSceneDescription(void * jarg1) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->RemoveInertSceneDescription();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetRootPrimOrder(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::vector< TfToken > *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (std::vector< TfToken > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TfToken > const & type is null", 0);
    return ;
  } 
  (arg1)->SetRootPrimOrder((std::vector< TfToken > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_InsertInRootPrimOrder__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfToken *arg2 = 0 ;
  int arg3 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->InsertInRootPrimOrder((TfToken const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_InsertInRootPrimOrder__SWIG_1(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->InsertInRootPrimOrder((TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemoveFromRootPrimOrder(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->RemoveFromRootPrimOrder((TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemoveFromRootPrimOrderByIndex(void * jarg1, int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  int arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->RemoveFromRootPrimOrderByIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_ApplyRootPrimOrder(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::vector< TfToken > *arg2 = (std::vector< TfToken > *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (std::vector< TfToken > *)jarg2; 
  ((SdfLayer const *)arg1)->ApplyRootPrimOrder(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetSubLayerPaths(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->SetSubLayerPaths((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayer_GetNumSubLayerPaths(void * jarg1) {
  unsigned long jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetNumSubLayerPaths();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_InsertSubLayerPath__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (arg1)->InsertSubLayerPath((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_InsertSubLayerPath__SWIG_1(void * jarg1, char * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->InsertSubLayerPath((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemoveSubLayerPath(void * jarg1, int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  int arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->RemoveSubLayerPath(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetSubLayerOffsets(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfLayerOffsetVector result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetSubLayerOffsets();
  jresult = new SdfLayerOffsetVector((const SdfLayerOffsetVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetSubLayerOffset(void * jarg1, int jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  int arg2 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfLayerOffset result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (int)jarg2; 
  result = ((SdfLayer const *)arg1)->GetSubLayerOffset(arg2);
  jresult = new SdfLayerOffset((const SdfLayerOffset &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetSubLayerOffset(void * jarg1, void * jarg2, int jarg3) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfLayerOffset *arg2 = 0 ;
  int arg3 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfLayerOffset *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->SetSubLayerOffset((SdfLayerOffset const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetMutedLayers() {
  void * jresult ;
  SwigValueWrapper< std::set< std::string > > result;
  
  result = SdfLayer::GetMutedLayers();
  jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_IsMuted__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->IsMuted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_IsMuted__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SdfLayer::IsMuted((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetMuted(void * jarg1, unsigned int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  bool arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMuted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_AddToMutedLayers(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  SdfLayer::AddToMutedLayers((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_RemoveFromMutedLayers(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  SdfLayer::RemoveFromMutedLayers((std::string const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetPseudoRoot(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfPrimSpecHandle result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetPseudoRoot();
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetObjectAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfSpecHandle result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetObjectAtPath((SdfPath const &)*arg2);
  jresult = new SdfSpecHandle((const SdfSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetPrimAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfPrimSpecHandle result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetPrimAtPath((SdfPath const &)*arg2);
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetPropertyAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfPropertySpecHandle result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetPropertyAtPath((SdfPath const &)*arg2);
  jresult = new SdfPropertySpecHandle((const SdfPropertySpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetAttributeAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfAttributeSpecHandle result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetAttributeAtPath((SdfPath const &)*arg2);
  jresult = new SdfAttributeSpecHandle((const SdfAttributeSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetRelationshipAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  SdfRelationshipSpecHandle result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetRelationshipAtPath((SdfPath const &)*arg2);
  jresult = new SdfRelationshipSpecHandle((const SdfRelationshipSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_PermissionToEdit(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->PermissionToEdit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_PermissionToSave(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->PermissionToSave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetPermissionToEdit(void * jarg1, unsigned int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  bool arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPermissionToEdit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetPermissionToSave(void * jarg1, unsigned int jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  bool arg2 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPermissionToSave(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayer_CanApply__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfBatchNamespaceEdit *arg2 = 0 ;
  SdfNamespaceEditDetailVector *arg3 = (SdfNamespaceEditDetailVector *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfNamespaceEditDetail::Result result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfBatchNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfNamespaceEditDetailVector *)jarg3; 
  result = (SdfNamespaceEditDetail::Result)((SdfLayer const *)arg1)->CanApply((SdfBatchNamespaceEdit const &)*arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_SdfLayer_CanApply__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfBatchNamespaceEdit *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SdfNamespaceEditDetail::Result result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfBatchNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  result = (SdfNamespaceEditDetail::Result)((SdfLayer const *)arg1)->CanApply((SdfBatchNamespaceEdit const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_Apply(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfBatchNamespaceEdit *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfBatchNamespaceEdit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfBatchNamespaceEdit const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Apply((SdfBatchNamespaceEdit const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_GetStateDelegate(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  SwigValueWrapper< TfDeclarePtrs< SdfLayerStateDelegateBase >::Ptr > result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->GetStateDelegate();
  jresult = new SdfLayerStateDelegateBasePtr((const SdfLayerStateDelegateBasePtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_SetStateDelegate(void * jarg1, void * jarg2) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfLayerStateDelegateBaseRefPtr *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfLayerStateDelegateBaseRefPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerStateDelegateBaseRefPtr const & type is null", 0);
    return ;
  } 
  (arg1)->SetStateDelegate((SdfLayerStateDelegateBaseRefPtr const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_IsDirty(void * jarg1) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((SdfLayer const *)arg1)->IsDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_ListAllTimeSamples(void * jarg1) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::set< double > result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((SdfLayer const *)arg1)->ListAllTimeSamples();
  jresult = new std::set< double >((const std::set< double > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_GetBracketingTimeSamples(void * jarg1, double jarg2, double * jarg3, double * jarg4) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  result = (bool)(arg1)->GetBracketingTimeSamples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_SdfLayer_GetNumTimeSamplesForPath(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfLayer const *)arg1)->GetNumTimeSamplesForPath((SdfPath const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_SdfLayer_ListTimeSamplesForPath(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::set< double > result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((SdfLayer const *)arg1)->ListTimeSamplesForPath((SdfPath const &)*arg2);
  jresult = new std::set< double >((const std::set< double > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_GetBracketingTimeSamplesForPath(void * jarg1, void * jarg2, double jarg3, double * jarg4, double * jarg5) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (bool)(arg1)->GetBracketingTimeSamplesForPath((SdfPath const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_QueryTimeSample(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  double arg3 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((SdfLayer const *)arg1)->QueryTimeSample((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_EraseTimeSample(void * jarg1, void * jarg2, double jarg3) {
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  SdfPath *arg2 = 0 ;
  double arg3 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->EraseTimeSample((SdfPath const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SdfLayer_DumpLayerInfo() {
  SdfLayer::DumpLayerInfo();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SdfLayer_WriteDataFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< SdfLayer > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->WriteDataFile((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_SdfLayer_ExportToString(void * jarg1) {
  char * jresult ;
  SdfLayer *arg1 = (SdfLayer *) 0 ;
  TfRefPtr< SdfLayer const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const SdfLayer > *)jarg1;
  arg1 = (SdfLayer *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = SdfLayer_ExportToString((SdfLayer const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageWeakPtr(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdStageWeakPtr *result = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (UsdStageWeakPtr *)new UsdStageWeakPtr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr___deref__(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  UsdStage *result = 0 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (UsdStage *)(arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStageWeakPtr(void * jarg1) {
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetPopulationMask(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  UsdStagePopulationMask result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetPopulationMask();
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetPseudoRoot(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetPseudoRoot();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetDefaultPrim(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetDefaultPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasDefaultPrim(void * jarg1) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (bool)(*arg1)->HasDefaultPrim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetPrimAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdPrim result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetPrimAtPath((SdfPath const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetObjectAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdObject result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (*arg1)->GetObjectAtPath((SdfPath const &)*arg2);
  jresult = new UsdObject((const UsdObject &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetSessionLayer(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetSessionLayer();
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetRootLayer(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetRootLayer();
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetPathResolverContext(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  ArResolverContext result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetPathResolverContext();
  jresult = new ArResolverContext((const ArResolverContext &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_ResolveIdentifierToEditTarget(void * jarg1, char * jarg2) {
  char * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (*arg1)->ResolveIdentifierToEditTarget((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetLayerStack__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  bool arg2 ;
  SdfLayerHandleVector result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->GetLayerStack(arg2);
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetLayerStack__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfLayerHandleVector result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetLayerStack();
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetUsedLayers__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  bool arg2 ;
  SdfLayerHandleVector result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->GetUsedLayers(arg2);
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetUsedLayers__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfLayerHandleVector result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetUsedLayers();
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasLocalLayer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasLocalLayer((SdfLayerHandle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetEditTarget(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (UsdEditTarget *) &(*arg1)->GetEditTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetMutedLayers(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (std::vector< std::string > *) &(*arg1)->GetMutedLayers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_IsLayerMuted(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->IsLayerMuted((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_Export__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->Export((std::string const &)*arg2,arg3,(SdfLayer::FileFormatArguments const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_Export__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(*arg1)->Export((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_Export__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(*arg1)->Export((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_ExportToString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (std::string *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(*arg1)->ExportToString(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_ExportToString__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (std::string *)jarg2; 
  result = (bool)(*arg1)->ExportToString(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_Flatten__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  bool arg2 ;
  SdfLayerRefPtr result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->Flatten(arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_Flatten__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfLayerRefPtr result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->Flatten();
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetMetadata(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3; 
  result = (bool)(*arg1)->GetMetadata((TfToken const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasAuthoredMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasAuthoredMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_SetMetadata(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->SetMetadata((TfToken const &)*arg2,(VtValue const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_ClearMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->ClearMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue *arg4 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtValue *)jarg4; 
  result = (bool)(*arg1)->GetMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasMetadataDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasMetadataDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasAuthoredMetadataDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->HasAuthoredMetadataDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_SetMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtValue *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->SetMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3,(VtValue const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_ClearMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(*arg1)->ClearMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetStartTimeCode(void * jarg1) {
  double jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  double result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (double)(*arg1)->GetStartTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetEndTimeCode(void * jarg1) {
  double jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  double result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (double)(*arg1)->GetEndTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_HasAuthoredTimeCodeRange(void * jarg1) {
  unsigned int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  bool result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (bool)(*arg1)->HasAuthoredTimeCodeRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetTimeCodesPerSecond(void * jarg1) {
  double jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  double result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (double)(*arg1)->GetTimeCodesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_SetTimeCodesPerSecond(void * jarg1, double jarg2) {
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  double arg2 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetTimeCodesPerSecond(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetFramesPerSecond(void * jarg1) {
  double jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  double result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (double)(*arg1)->GetFramesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_SetFramesPerSecond(void * jarg1, double jarg2) {
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  double arg2 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetFramesPerSecond(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_SetColorConfiguration(void * jarg1, void * jarg2) {
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfAssetPath *arg2 = 0 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return ;
  } 
  (*arg1)->SetColorConfiguration((SdfAssetPath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetColorConfiguration(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  SdfAssetPath result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetColorConfiguration();
  jresult = new SdfAssetPath((const SdfAssetPath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_SetColorManagementSystem(void * jarg1, void * jarg2) {
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (*arg1)->SetColorManagementSystem((TfToken const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetColorManagementSystem(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  TfToken result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetColorManagementSystem();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetInterpolationType(void * jarg1) {
  int jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  UsdInterpolationType result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (UsdInterpolationType)(*arg1)->GetInterpolationType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageWeakPtr_GetMasters(void * jarg1) {
  void * jresult ;
  UsdStageWeakPtr *arg1 = (UsdStageWeakPtr *) 0 ;
  std::vector< UsdPrim > result;
  
  arg1 = (UsdStageWeakPtr *)jarg1; 
  result = (*arg1)->GetMasters();
  jresult = new std::vector< UsdPrim >((const std::vector< UsdPrim > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdMetadataValueMap_GetValue(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdMetadataValueMap *arg1 = (UsdMetadataValueMap *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *result = 0 ;
  
  arg1 = (UsdMetadataValueMap *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (VtValue *) &UsdMetadataValueMap_GetValue((UsdMetadataValueMap const *)arg1,(TfToken const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdMetadataValueMap_SetValue(void * jarg1, void * jarg2, void * jarg3) {
  UsdMetadataValueMap *arg1 = (UsdMetadataValueMap *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  
  arg1 = (UsdMetadataValueMap *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  UsdMetadataValueMap_SetValue(arg1,(TfToken const &)*arg2,(VtValue const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdMetadataValueMap() {
  void * jresult ;
  UsdMetadataValueMap *result = 0 ;
  
  result = (UsdMetadataValueMap *)new UsdMetadataValueMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdMetadataValueMap(void * jarg1) {
  UsdMetadataValueMap *arg1 = (UsdMetadataValueMap *) 0 ;
  
  arg1 = (UsdMetadataValueMap *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdDescribe__SWIG_0(void * jarg1) {
  char * jresult ;
  UsdObject *arg1 = 0 ;
  std::string result;
  
  arg1 = (UsdObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdObject const & type is null", 0);
    return 0;
  } 
  result = UsdDescribe((UsdObject const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdDescribe__SWIG_1(void * jarg1) {
  char * jresult ;
  UsdStageWeakPtr *arg1 = 0 ;
  std::string result;
  
  arg1 = (UsdStageWeakPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageWeakPtr const & type is null", 0);
    return 0;
  } 
  result = UsdDescribe((UsdStageWeakPtr const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdDescribe__SWIG_2(void * jarg1) {
  char * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = UsdDescribe((UsdStage const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdDescribe__SWIG_4(void * jarg1) {
  char * jresult ;
  UsdStageCache *arg1 = 0 ;
  std::string result;
  
  arg1 = (UsdStageCache *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCache const & type is null", 0);
    return 0;
  } 
  result = UsdDescribe((UsdStageCache const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAuthorOldStyleAdd() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)UsdAuthorOldStyleAdd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdUsesInverseLayerOffset() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)UsdUsesInverseLayerOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrepLayerOffset(void * jarg1) {
  void * jresult ;
  SdfLayerOffset arg1 ;
  SdfLayerOffset *argp1 ;
  SdfLayerOffset result;
  
  argp1 = (SdfLayerOffset *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfLayerOffset", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = UsdPrepLayerOffset(arg1);
  jresult = new SdfLayerOffset((const SdfLayerOffset &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdTimeCode__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  UsdTimeCode *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (UsdTimeCode *)new UsdTimeCode(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdTimeCode__SWIG_1() {
  void * jresult ;
  UsdTimeCode *result = 0 ;
  
  result = (UsdTimeCode *)new UsdTimeCode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTimeCode_EarliestTime() {
  void * jresult ;
  UsdTimeCode result;
  
  result = UsdTimeCode::EarliestTime();
  jresult = new UsdTimeCode((const UsdTimeCode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTimeCode_Default() {
  void * jresult ;
  UsdTimeCode result;
  
  result = UsdTimeCode::Default();
  jresult = new UsdTimeCode((const UsdTimeCode &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdTimeCode_SafeStep__SWIG_0(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)UsdTimeCode::SafeStep(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdTimeCode_SafeStep__SWIG_1(double jarg1) {
  double jresult ;
  double arg1 ;
  double result;
  
  arg1 = (double)jarg1; 
  result = (double)UsdTimeCode::SafeStep(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdTimeCode_SafeStep__SWIG_2() {
  double jresult ;
  double result;
  
  result = (double)UsdTimeCode::SafeStep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdTimeCode_IsDefault(void * jarg1) {
  unsigned int jresult ;
  UsdTimeCode *arg1 = (UsdTimeCode *) 0 ;
  bool result;
  
  arg1 = (UsdTimeCode *)jarg1; 
  result = (bool)((UsdTimeCode const *)arg1)->IsDefault();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdTimeCode_IsNumeric(void * jarg1) {
  unsigned int jresult ;
  UsdTimeCode *arg1 = (UsdTimeCode *) 0 ;
  bool result;
  
  arg1 = (UsdTimeCode *)jarg1; 
  result = (bool)((UsdTimeCode const *)arg1)->IsNumeric();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdTimeCode_GetValue(void * jarg1) {
  double jresult ;
  UsdTimeCode *arg1 = (UsdTimeCode *) 0 ;
  double result;
  
  arg1 = (UsdTimeCode *)jarg1; 
  result = (double)((UsdTimeCode const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_42(void * jarg1) {
  unsigned long jresult ;
  UsdTimeCode *arg1 = 0 ;
  size_t result;
  
  arg1 = (UsdTimeCode *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = hash_value((UsdTimeCode const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdTimeCode(void * jarg1) {
  UsdTimeCode *arg1 = (UsdTimeCode *) 0 ;
  
  arg1 = (UsdTimeCode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_0() {
  void * jresult ;
  UsdEditTarget *result = 0 ;
  
  result = (UsdEditTarget *)new UsdEditTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerOffset arg2 ;
  SdfLayerOffset *argp2 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  argp2 = (SdfLayerOffset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfLayerOffset", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (UsdEditTarget *)new UsdEditTarget((SdfLayerHandle const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_2(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = (UsdEditTarget *)new UsdEditTarget((SdfLayerHandle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerRefPtr *arg1 = 0 ;
  SdfLayerOffset arg2 ;
  SdfLayerRefPtr tempnull1 ;
  SdfLayerOffset *argp2 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = jarg1 ? (SdfLayerRefPtr *)jarg1 : &tempnull1; 
  argp2 = (SdfLayerOffset *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfLayerOffset", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (UsdEditTarget *)new UsdEditTarget((SdfLayerRefPtr const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_4(void * jarg1) {
  void * jresult ;
  SdfLayerRefPtr *arg1 = 0 ;
  SdfLayerRefPtr tempnull1 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = jarg1 ? (SdfLayerRefPtr *)jarg1 : &tempnull1; 
  result = (UsdEditTarget *)new UsdEditTarget((SdfLayerRefPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  PcpNodeRef *arg2 = 0 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (PcpNodeRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PcpNodeRef const & type is null", 0);
    return 0;
  } 
  result = (UsdEditTarget *)new UsdEditTarget((SdfLayerHandle const &)*arg1,(PcpNodeRef const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdEditTarget__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerRefPtr *arg1 = 0 ;
  PcpNodeRef *arg2 = 0 ;
  SdfLayerRefPtr tempnull1 ;
  UsdEditTarget *result = 0 ;
  
  arg1 = jarg1 ? (SdfLayerRefPtr *)jarg1 : &tempnull1; 
  arg2 = (PcpNodeRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PcpNodeRef const & type is null", 0);
    return 0;
  } 
  result = (UsdEditTarget *)new UsdEditTarget((SdfLayerRefPtr const &)*arg1,(PcpNodeRef const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_ForLocalDirectVariant(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdEditTarget result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdEditTarget::ForLocalDirectVariant((SdfLayerHandle const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdEditTarget((const UsdEditTarget &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdEditTarget_IsNull(void * jarg1) {
  unsigned int jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  bool result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  result = (bool)((UsdEditTarget const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdEditTarget_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  bool result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  result = (bool)((UsdEditTarget const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_GetLayer(void * jarg1) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  SdfLayerHandle *result = 0 ;
  
  arg1 = (UsdEditTarget *)jarg1; 
  result = (SdfLayerHandle *) &((UsdEditTarget const *)arg1)->GetLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_MapToSpecPath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPath result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdEditTarget const *)arg1)->MapToSpecPath((SdfPath const &)*arg2);
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_GetPrimSpecForScenePath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPrimSpecHandle result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdEditTarget const *)arg1)->GetPrimSpecForScenePath((SdfPath const &)*arg2);
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_GetPropertySpecForScenePath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfPropertySpecHandle result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdEditTarget const *)arg1)->GetPropertySpecForScenePath((SdfPath const &)*arg2);
  jresult = new SdfPropertySpecHandle((const SdfPropertySpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_GetSpecForScenePath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfSpecHandle result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdEditTarget const *)arg1)->GetSpecForScenePath((SdfPath const &)*arg2);
  jresult = new SdfSpecHandle((const SdfSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_GetMapFunction(void * jarg1) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  PcpMapFunction *result = 0 ;
  
  arg1 = (UsdEditTarget *)jarg1; 
  result = (PcpMapFunction *) &((UsdEditTarget const *)arg1)->GetMapFunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdEditTarget_ComposeOver(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  UsdEditTarget *arg2 = 0 ;
  UsdEditTarget result;
  
  arg1 = (UsdEditTarget *)jarg1; 
  arg2 = (UsdEditTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdEditTarget const & type is null", 0);
    return 0;
  } 
  result = ((UsdEditTarget const *)arg1)->ComposeOver((UsdEditTarget const &)*arg2);
  jresult = new UsdEditTarget((const UsdEditTarget &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdEditTarget(void * jarg1) {
  UsdEditTarget *arg1 = (UsdEditTarget *) 0 ;
  
  arg1 = (UsdEditTarget *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_Term__SWIG_0(int jarg1) {
  void * jresult ;
  Usd_PrimFlags arg1 ;
  Usd_Term *result = 0 ;
  
  arg1 = (Usd_PrimFlags)jarg1; 
  result = (Usd_Term *)new Usd_Term(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_Term__SWIG_1(int jarg1, unsigned int jarg2) {
  void * jresult ;
  Usd_PrimFlags arg1 ;
  bool arg2 ;
  Usd_Term *result = 0 ;
  
  arg1 = (Usd_PrimFlags)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Usd_Term *)new Usd_Term(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_Usd_Term_flag_set(void * jarg1, int jarg2) {
  Usd_Term *arg1 = (Usd_Term *) 0 ;
  Usd_PrimFlags arg2 ;
  
  arg1 = (Usd_Term *)jarg1; 
  arg2 = (Usd_PrimFlags)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_Usd_Term_flag_get(void * jarg1) {
  int jresult ;
  Usd_Term *arg1 = (Usd_Term *) 0 ;
  Usd_PrimFlags result;
  
  arg1 = (Usd_Term *)jarg1; 
  result = (Usd_PrimFlags) ((arg1)->flag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_Usd_Term_negated_set(void * jarg1, unsigned int jarg2) {
  Usd_Term *arg1 = (Usd_Term *) 0 ;
  bool arg2 ;
  
  arg1 = (Usd_Term *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->negated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_Usd_Term_negated_get(void * jarg1) {
  unsigned int jresult ;
  Usd_Term *arg1 = (Usd_Term *) 0 ;
  bool result;
  
  arg1 = (Usd_Term *)jarg1; 
  result = (bool) ((arg1)->negated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_Usd_Term(void * jarg1) {
  Usd_Term *arg1 = (Usd_Term *) 0 ;
  
  arg1 = (Usd_Term *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsPredicate__SWIG_0() {
  void * jresult ;
  Usd_PrimFlagsPredicate *result = 0 ;
  
  result = (Usd_PrimFlagsPredicate *)new Usd_PrimFlagsPredicate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsPredicate__SWIG_1(int jarg1) {
  void * jresult ;
  Usd_PrimFlags arg1 ;
  Usd_PrimFlagsPredicate *result = 0 ;
  
  arg1 = (Usd_PrimFlags)jarg1; 
  result = (Usd_PrimFlagsPredicate *)new Usd_PrimFlagsPredicate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsPredicate__SWIG_2(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< Usd_Term > arg1 ;
  Usd_Term *argp1 ;
  Usd_PrimFlagsPredicate *result = 0 ;
  
  argp1 = (Usd_Term *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Usd_Term", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Usd_PrimFlagsPredicate *)new Usd_PrimFlagsPredicate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_Usd_PrimFlagsPredicate_Tautology() {
  void * jresult ;
  Usd_PrimFlagsPredicate result;
  
  result = Usd_PrimFlagsPredicate::Tautology();
  jresult = new Usd_PrimFlagsPredicate((const Usd_PrimFlagsPredicate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_Usd_PrimFlagsPredicate_Contradiction() {
  void * jresult ;
  Usd_PrimFlagsPredicate result;
  
  result = Usd_PrimFlagsPredicate::Contradiction();
  jresult = new Usd_PrimFlagsPredicate((const Usd_PrimFlagsPredicate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_Usd_PrimFlagsPredicate_TraverseInstanceProxies(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Usd_PrimFlagsPredicate *arg1 = (Usd_PrimFlagsPredicate *) 0 ;
  bool arg2 ;
  Usd_PrimFlagsPredicate *result = 0 ;
  
  arg1 = (Usd_PrimFlagsPredicate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Usd_PrimFlagsPredicate *) &(arg1)->TraverseInstanceProxies(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_Usd_PrimFlagsPredicate_IncludeInstanceProxiesInTraversal(void * jarg1) {
  unsigned int jresult ;
  Usd_PrimFlagsPredicate *arg1 = (Usd_PrimFlagsPredicate *) 0 ;
  bool result;
  
  arg1 = (Usd_PrimFlagsPredicate *)jarg1; 
  result = (bool)((Usd_PrimFlagsPredicate const *)arg1)->IncludeInstanceProxiesInTraversal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_43(void * jarg1) {
  unsigned long jresult ;
  Usd_PrimFlagsPredicate *arg1 = 0 ;
  size_t result;
  
  arg1 = (Usd_PrimFlagsPredicate *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = hash_value((Usd_PrimFlagsPredicate const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_Usd_PrimFlagsPredicate(void * jarg1) {
  Usd_PrimFlagsPredicate *arg1 = (Usd_PrimFlagsPredicate *) 0 ;
  
  arg1 = (Usd_PrimFlagsPredicate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsConjunction__SWIG_0() {
  void * jresult ;
  Usd_PrimFlagsConjunction *result = 0 ;
  
  result = (Usd_PrimFlagsConjunction *)new Usd_PrimFlagsConjunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsConjunction__SWIG_1(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< Usd_Term > arg1 ;
  Usd_Term *argp1 ;
  Usd_PrimFlagsConjunction *result = 0 ;
  
  argp1 = (Usd_Term *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Usd_Term", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Usd_PrimFlagsConjunction *)new Usd_PrimFlagsConjunction(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_Usd_PrimFlagsConjunction(void * jarg1) {
  Usd_PrimFlagsConjunction *arg1 = (Usd_PrimFlagsConjunction *) 0 ;
  
  arg1 = (Usd_PrimFlagsConjunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsDisjunction__SWIG_0() {
  void * jresult ;
  Usd_PrimFlagsDisjunction *result = 0 ;
  
  result = (Usd_PrimFlagsDisjunction *)new Usd_PrimFlagsDisjunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_Usd_PrimFlagsDisjunction__SWIG_1(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< Usd_Term > arg1 ;
  Usd_Term *argp1 ;
  Usd_PrimFlagsDisjunction *result = 0 ;
  
  argp1 = (Usd_Term *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Usd_Term", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Usd_PrimFlagsDisjunction *)new Usd_PrimFlagsDisjunction(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_Usd_PrimFlagsDisjunction(void * jarg1) {
  Usd_PrimFlagsDisjunction *arg1 = (Usd_PrimFlagsDisjunction *) 0 ;
  
  arg1 = (Usd_PrimFlagsDisjunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsActive_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsActive;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsLoaded_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsLoaded;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsModel_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsModel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsGroup_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsGroup;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsAbstract_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsAbstract;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsDefined_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsDefined;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimIsInstance_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimIsInstance;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimHasDefiningSpecifier_get() {
  int jresult ;
  Usd_PrimFlags result;
  
  result = (Usd_PrimFlags)(Usd_PrimFlags)UsdPrimHasDefiningSpecifier;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimDefaultPredicate_get() {
  void * jresult ;
  Usd_PrimFlagsConjunction *result = 0 ;
  
  result = (Usd_PrimFlagsConjunction *)&UsdPrimDefaultPredicate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimAllPrimsPredicate_get() {
  void * jresult ;
  Usd_PrimFlagsPredicate *result = 0 ;
  
  result = (Usd_PrimFlagsPredicate *)&UsdPrimAllPrimsPredicate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTraverseInstanceProxies__SWIG_0(void * jarg1) {
  void * jresult ;
  Usd_PrimFlagsPredicate arg1 ;
  Usd_PrimFlagsPredicate *argp1 ;
  Usd_PrimFlagsPredicate result;
  
  argp1 = (Usd_PrimFlagsPredicate *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Usd_PrimFlagsPredicate", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = UsdTraverseInstanceProxies(arg1);
  jresult = new Usd_PrimFlagsPredicate((const Usd_PrimFlagsPredicate &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTraverseInstanceProxies__SWIG_1() {
  void * jresult ;
  Usd_PrimFlagsPredicate result;
  
  result = UsdTraverseInstanceProxies();
  jresult = new Usd_PrimFlagsPredicate((const Usd_PrimFlagsPredicate &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimRange_EndSentinel(void * jarg1) {
  UsdPrimRange::EndSentinel *arg1 = (UsdPrimRange::EndSentinel *) 0 ;
  
  arg1 = (UsdPrimRange::EndSentinel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimRange_iterator__SWIG_0() {
  void * jresult ;
  UsdPrimRange::iterator *result = 0 ;
  
  result = (UsdPrimRange::iterator *)new UsdPrimRange::iterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimRange_iterator__SWIG_1(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< UsdPrimRange::EndSentinel > arg1 ;
  UsdPrimRange::EndSentinel *argp1 ;
  UsdPrimRange::iterator *result = 0 ;
  
  argp1 = (UsdPrimRange::EndSentinel *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdPrimRange::EndSentinel", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (UsdPrimRange::iterator *)new UsdPrimRange::iterator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrimRange_iterator_IsPostVisit(void * jarg1) {
  unsigned int jresult ;
  UsdPrimRange::iterator *arg1 = (UsdPrimRange::iterator *) 0 ;
  bool result;
  
  arg1 = (UsdPrimRange::iterator *)jarg1; 
  result = (bool)((UsdPrimRange::iterator const *)arg1)->IsPostVisit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimRange_iterator_PruneChildren(void * jarg1) {
  UsdPrimRange::iterator *arg1 = (UsdPrimRange::iterator *) 0 ;
  
  arg1 = (UsdPrimRange::iterator *)jarg1; 
  (arg1)->PruneChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimRange_iterator_MoveNext(void * jarg1) {
  UsdPrimRange::iterator *arg1 = (UsdPrimRange::iterator *) 0 ;
  
  arg1 = (UsdPrimRange::iterator *)jarg1; 
  UsdPrimRange_iterator_MoveNext(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_iterator_GetCurrent(void * jarg1) {
  void * jresult ;
  UsdPrimRange::iterator *arg1 = (UsdPrimRange::iterator *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrimRange::iterator *)jarg1; 
  result = UsdPrimRange_iterator_GetCurrent(arg1);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrimRange_iterator_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrimRange::iterator *arg1 = 0 ;
  UsdPrimRange::iterator *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrimRange::iterator *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange::iterator const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdPrimRange::iterator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange::iterator const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdPrimRange_iterator_Equals((UsdPrimRange::iterator const &)*arg1,(UsdPrimRange::iterator const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimRange_iterator_GetHashCode(void * jarg1) {
  int jresult ;
  UsdPrimRange::iterator *arg1 = (UsdPrimRange::iterator *) 0 ;
  int result;
  
  arg1 = (UsdPrimRange::iterator *)jarg1; 
  result = (int)UsdPrimRange_iterator_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimRange_iterator(void * jarg1) {
  UsdPrimRange::iterator *arg1 = (UsdPrimRange::iterator *) 0 ;
  
  arg1 = (UsdPrimRange::iterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimRange__SWIG_0() {
  void * jresult ;
  UsdPrimRange *result = 0 ;
  
  result = (UsdPrimRange *)new UsdPrimRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimRange__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdPrimRange *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdPrimRange *)new UsdPrimRange((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimRange__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  UsdPrimRange *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = (UsdPrimRange *)new UsdPrimRange((UsdPrim const &)*arg1,(Usd_PrimFlagsPredicate const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_PreAndPostVisit__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdPrimRange result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdPrimRange::PreAndPostVisit((UsdPrim const &)*arg1);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_PreAndPostVisit__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  UsdPrimRange result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = UsdPrimRange::PreAndPostVisit((UsdPrim const &)*arg1,(Usd_PrimFlagsPredicate const &)*arg2);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_AllPrims(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdPrimRange result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdPrimRange::AllPrims((UsdPrim const &)*arg1);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_AllPrimsPreAndPostVisit(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdPrimRange result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdPrimRange::AllPrimsPreAndPostVisit((UsdPrim const &)*arg1);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_Stage__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  UsdPrimRange result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = UsdPrimRange::Stage((UsdStageWeakPtr const &)*arg1,(Usd_PrimFlagsPredicate const &)*arg2);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_Stage__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  UsdPrimRange result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  result = UsdPrimRange::Stage((UsdStageWeakPtr const &)*arg1);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_GetStart(void * jarg1) {
  void * jresult ;
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  UsdPrimRange::iterator result;
  
  arg1 = (UsdPrimRange *)jarg1; 
  result = ((UsdPrimRange const *)arg1)->begin();
  jresult = new UsdPrimRange::iterator((const UsdPrimRange::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_GetCurrent(void * jarg1) {
  void * jresult ;
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrimRange *)jarg1; 
  result = ((UsdPrimRange const *)arg1)->front();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimRange_GetEnd(void * jarg1) {
  void * jresult ;
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  UsdPrimRange::iterator result;
  
  arg1 = (UsdPrimRange *)jarg1; 
  result = ((UsdPrimRange const *)arg1)->end();
  jresult = new UsdPrimRange::iterator((const UsdPrimRange::iterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimRange_IncrementBegin(void * jarg1) {
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  
  arg1 = (UsdPrimRange *)jarg1; 
  (arg1)->increment_begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimRange_SetBegin(void * jarg1, void * jarg2) {
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  UsdPrimRange::iterator *arg2 = 0 ;
  
  arg1 = (UsdPrimRange *)jarg1; 
  arg2 = (UsdPrimRange::iterator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange::iterator const & type is null", 0);
    return ;
  } 
  (arg1)->set_begin((UsdPrimRange::iterator const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrimRange_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  bool result;
  
  arg1 = (UsdPrimRange *)jarg1; 
  result = (bool)((UsdPrimRange const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrimRange_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrimRange *arg1 = 0 ;
  UsdPrimRange *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrimRange *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdPrimRange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdPrimRange_Equals((UsdPrimRange const &)*arg1,(UsdPrimRange const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimRange_GetHashCode(void * jarg1) {
  int jresult ;
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  int result;
  
  arg1 = (UsdPrimRange *)jarg1; 
  result = (int)UsdPrimRange_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimRange(void * jarg1) {
  UsdPrimRange *arg1 = (UsdPrimRange *) 0 ;
  
  arg1 = (UsdPrimRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_All() {
  void * jresult ;
  UsdStagePopulationMask result;
  
  result = UsdStagePopulationMask::All();
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStagePopulationMask__SWIG_0() {
  void * jresult ;
  UsdStagePopulationMask *result = 0 ;
  
  result = (UsdStagePopulationMask *)new UsdStagePopulationMask();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStagePopulationMask__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = 0 ;
  UsdStagePopulationMask *result = 0 ;
  
  arg1 = (UsdStagePopulationMask *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = (UsdStagePopulationMask *)new UsdStagePopulationMask((UsdStagePopulationMask const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStagePopulationMask__SWIG_4(void * jarg1) {
  void * jresult ;
  std::vector< SdfPath > *arg1 = 0 ;
  UsdStagePopulationMask *result = 0 ;
  
  arg1 = (std::vector< SdfPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SdfPath > const & type is null", 0);
    return 0;
  } 
  result = (UsdStagePopulationMask *)new UsdStagePopulationMask((std::vector< SdfPath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_Union(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStagePopulationMask result;
  
  arg1 = (UsdStagePopulationMask *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStagePopulationMask::Union((UsdStagePopulationMask const &)*arg1,(UsdStagePopulationMask const &)*arg2);
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_GetUnion__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStagePopulationMask result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = ((UsdStagePopulationMask const *)arg1)->GetUnion((UsdStagePopulationMask const &)*arg2);
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_GetUnion__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdStagePopulationMask result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdStagePopulationMask const *)arg1)->GetUnion((SdfPath const &)*arg2);
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_Intersection(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStagePopulationMask result;
  
  arg1 = (UsdStagePopulationMask *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStagePopulationMask::Intersection((UsdStagePopulationMask const &)*arg1,(UsdStagePopulationMask const &)*arg2);
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_GetIntersection(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStagePopulationMask result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = ((UsdStagePopulationMask const *)arg1)->GetIntersection((UsdStagePopulationMask const &)*arg2);
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_Includes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStagePopulationMask const *)arg1)->Includes((UsdStagePopulationMask const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_Includes__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStagePopulationMask const *)arg1)->Includes((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_IncludesSubtree(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStagePopulationMask const *)arg1)->IncludesSubtree((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  bool result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  result = (bool)((UsdStagePopulationMask const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_GetIncludedChildNames(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  SdfPath *arg2 = 0 ;
  std::vector< TfToken > *arg3 = (std::vector< TfToken > *) 0 ;
  bool result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< TfToken > *)jarg3; 
  result = (bool)((UsdStagePopulationMask const *)arg1)->GetIncludedChildNames((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_GetPaths(void * jarg1) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  std::vector< SdfPath > result;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  result = ((UsdStagePopulationMask const *)arg1)->GetPaths();
  jresult = new std::vector< SdfPath >((const std::vector< SdfPath > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_Add__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStagePopulationMask *result = 0 ;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = (UsdStagePopulationMask *) &(arg1)->Add((UsdStagePopulationMask const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_Add__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdStagePopulationMask *result = 0 ;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (UsdStagePopulationMask *) &(arg1)->Add((SdfPath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStagePopulationMask_swap(void * jarg1, void * jarg2) {
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStagePopulationMask(void * jarg1) {
  UsdStagePopulationMask *arg1 = (UsdStagePopulationMask *) 0 ;
  
  arg1 = (UsdStagePopulationMask *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_5(void * jarg1, void * jarg2) {
  UsdStagePopulationMask *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  
  arg1 = (UsdStagePopulationMask *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask & type is null", 0);
    return ;
  } 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStage::InitialLoadSet arg2 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (UsdStage::InitialLoadSet)jarg2; 
  result = UsdStage::CreateNew((std::string const &)*arg1,arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = UsdStage::CreateNew((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::CreateNew((std::string const &)*arg1,(SdfLayerHandle const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = UsdStage::CreateNew((std::string const &)*arg1,(SdfLayerHandle const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_4(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStage::InitialLoadSet arg4 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStage::InitialLoadSet)jarg4; 
  result = UsdStage::CreateNew((std::string const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3,arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_5(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::CreateNew((std::string const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_6(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::CreateNew((std::string const &)*arg1,(ArResolverContext const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateNew__SWIG_7(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::CreateNew((std::string const &)*arg1,(ArResolverContext const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_0(int jarg1) {
  void * jresult ;
  UsdStage::InitialLoadSet arg1 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStage::InitialLoadSet)jarg1; 
  result = UsdStage::CreateInMemory(arg1);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_1() {
  void * jresult ;
  UsdStageRefPtr result;
  
  result = UsdStage::CreateInMemory();
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_2(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStage::InitialLoadSet arg2 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (UsdStage::InitialLoadSet)jarg2; 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_3(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = UsdStage::CreateInMemory((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_4(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,(ArResolverContext const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_5(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,(ArResolverContext const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_6(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,(SdfLayerHandle const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_7(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,(SdfLayerHandle const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_8(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStage::InitialLoadSet arg4 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStage::InitialLoadSet)jarg4; 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3,arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateInMemory__SWIG_9(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::CreateInMemory((std::string const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStage::InitialLoadSet arg2 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (UsdStage::InitialLoadSet)jarg2; 
  result = UsdStage::Open((std::string const &)*arg1,arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = UsdStage::Open((std::string const &)*arg1);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::Open((std::string const &)*arg1,(ArResolverContext const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_3(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::Open((std::string const &)*arg1,(ArResolverContext const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::OpenMasked((std::string const &)*arg1,(UsdStagePopulationMask const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStage::OpenMasked((std::string const &)*arg1,(UsdStagePopulationMask const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_2(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStagePopulationMask *arg3 = 0 ;
  UsdStage::InitialLoadSet arg4 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStagePopulationMask *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStage::InitialLoadSet)jarg4; 
  result = UsdStage::OpenMasked((std::string const &)*arg1,(ArResolverContext const &)*arg2,(UsdStagePopulationMask const &)*arg3,arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_3(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStagePopulationMask *arg3 = 0 ;
  UsdStageRefPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStagePopulationMask *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStage::OpenMasked((std::string const &)*arg1,(ArResolverContext const &)*arg2,(UsdStagePopulationMask const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_4(void * jarg1, int jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  UsdStage::InitialLoadSet arg2 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdStage::InitialLoadSet)jarg2; 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_5(void * jarg1) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_6(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_8(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,(ArResolverContext const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_9(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,(ArResolverContext const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_10(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStage::InitialLoadSet arg4 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStage::InitialLoadSet)jarg4; 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3,arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Open__SWIG_11(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = UsdStage::Open((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStage::InitialLoadSet arg3 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStage::InitialLoadSet)jarg3; 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(UsdStagePopulationMask const &)*arg2,arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_5(void * jarg1, void * jarg2) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(UsdStagePopulationMask const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_6(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStagePopulationMask *arg3 = 0 ;
  UsdStage::InitialLoadSet arg4 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStagePopulationMask *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStage::InitialLoadSet)jarg4; 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,(UsdStagePopulationMask const &)*arg3,arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStagePopulationMask *arg3 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStagePopulationMask *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,(UsdStagePopulationMask const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_8(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStagePopulationMask *arg3 = 0 ;
  UsdStage::InitialLoadSet arg4 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStagePopulationMask *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStage::InitialLoadSet)jarg4; 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(ArResolverContext const &)*arg2,(UsdStagePopulationMask const &)*arg3,arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  ArResolverContext *arg2 = 0 ;
  UsdStagePopulationMask *arg3 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (ArResolverContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdStagePopulationMask *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(ArResolverContext const &)*arg2,(UsdStagePopulationMask const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_10(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStagePopulationMask *arg4 = 0 ;
  UsdStage::InitialLoadSet arg5 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStagePopulationMask *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  arg5 = (UsdStage::InitialLoadSet)jarg5; 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3,(UsdStagePopulationMask const &)*arg4,arg5);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OpenMasked__SWIG_11(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  SdfLayerHandle *arg1 = 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStagePopulationMask *arg4 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (SdfLayerHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdStagePopulationMask *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return 0;
  } 
  result = UsdStage::OpenMasked((SdfLayerHandle const &)*arg1,(SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3,(UsdStagePopulationMask const &)*arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStage(void * jarg1) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_Reload(void * jarg1) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->Reload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_IsSupportedFile(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)UsdStage::IsSupportedFile((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_Save(void * jarg1) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->Save();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SaveSessionLayers(void * jarg1) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->SaveSessionLayers();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetGlobalVariantFallbacks() {
  void * jresult ;
  PcpVariantFallbackMap result;
  
  result = UsdStage::GetGlobalVariantFallbacks();
  jresult = new PcpVariantFallbackMap((const PcpVariantFallbackMap &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetGlobalVariantFallbacks(void * jarg1) {
  PcpVariantFallbackMap *arg1 = 0 ;
  
  arg1 = (PcpVariantFallbackMap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PcpVariantFallbackMap const & type is null", 0);
    return ;
  } 
  UsdStage::SetGlobalVariantFallbacks((PcpVariantFallbackMap const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Load__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdLoadPolicy arg3 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdLoadPolicy)jarg3; 
  result = (arg1)->Load((SdfPath const &)*arg2,arg3);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Load__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Load((SdfPath const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Load__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (arg1)->Load();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_Unload__SWIG_0(void * jarg1, void * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  (arg1)->Unload((SdfPath const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_Unload__SWIG_1(void * jarg1) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_LoadAndUnload__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPathSet *arg2 = 0 ;
  SdfPathSet *arg3 = 0 ;
  UsdLoadPolicy arg4 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPathSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathSet const & type is null", 0);
    return ;
  } 
  arg3 = (SdfPathSet *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathSet const & type is null", 0);
    return ;
  } 
  arg4 = (UsdLoadPolicy)jarg4; 
  (arg1)->LoadAndUnload((SdfPathSet const &)*arg2,(SdfPathSet const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_LoadAndUnload__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPathSet *arg2 = 0 ;
  SdfPathSet *arg3 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPathSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathSet const & type is null", 0);
    return ;
  } 
  arg3 = (SdfPathSet *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathSet const & type is null", 0);
    return ;
  } 
  (arg1)->LoadAndUnload((SdfPathSet const &)*arg2,(SdfPathSet const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetLoadSet(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  SwigValueWrapper< std::set< SdfPath > > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (arg1)->GetLoadSet();
  jresult = new SdfPathSet((const SdfPathSet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_FindLoadable__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  SwigValueWrapper< std::set< SdfPath > > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->FindLoadable((SdfPath const &)*arg2);
  jresult = new SdfPathSet((const SdfPathSet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_FindLoadable__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  SwigValueWrapper< std::set< SdfPath > > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (arg1)->FindLoadable();
  jresult = new SdfPathSet((const SdfPathSet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetPopulationMask(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdStagePopulationMask result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetPopulationMask();
  jresult = new UsdStagePopulationMask((const UsdStagePopulationMask &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetPopulationMask(void * jarg1, void * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  UsdStagePopulationMask *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (UsdStagePopulationMask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePopulationMask const & type is null", 0);
    return ;
  } 
  (arg1)->SetPopulationMask((UsdStagePopulationMask const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetPseudoRoot(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetPseudoRoot();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetDefaultPrim(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetDefaultPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetDefaultPrim(void * jarg1, void * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  UsdPrim *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return ;
  } 
  (arg1)->SetDefaultPrim((UsdPrim const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_ClearDefaultPrim(void * jarg1) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  (arg1)->ClearDefaultPrim();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasDefaultPrim(void * jarg1) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((UsdStage const *)arg1)->HasDefaultPrim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetPrimAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdStage const *)arg1)->GetPrimAtPath((SdfPath const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetObjectAtPath(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdObject result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = ((UsdStage const *)arg1)->GetObjectAtPath((SdfPath const &)*arg2);
  jresult = new UsdObject((const UsdObject &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Traverse__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrimRange result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (arg1)->Traverse();
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Traverse__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrimRange result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Traverse((Usd_PrimFlagsPredicate const &)*arg2);
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_TraverseAll(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrimRange result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (arg1)->TraverseAll();
  jresult = new UsdPrimRange((const UsdPrimRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_OverridePrim(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->OverridePrim((SdfPath const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_DefinePrim__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DefinePrim((SdfPath const &)*arg2,(TfToken const &)*arg3);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_DefinePrim__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->DefinePrim((SdfPath const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_CreateClassPrim(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdPrim result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateClassPrim((SdfPath const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_RemovePrim(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfPath *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemovePrim((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetSessionLayer(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetSessionLayer();
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetRootLayer(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SwigValueWrapper< SdfLayerHandle > result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetRootLayer();
  jresult = new SdfLayerHandle((const SdfLayerHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetPathResolverContext(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  ArResolverContext result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetPathResolverContext();
  jresult = new ArResolverContext((const ArResolverContext &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdStage_ResolveIdentifierToEditTarget(void * jarg1, char * jarg2) {
  char * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdStage const *)arg1)->ResolveIdentifierToEditTarget((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetLayerStack__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  bool arg2 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfLayerHandleVector result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  result = ((UsdStage const *)arg1)->GetLayerStack(arg2);
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetLayerStack__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfLayerHandleVector result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetLayerStack();
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetUsedLayers__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  bool arg2 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfLayerHandleVector result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  result = ((UsdStage const *)arg1)->GetUsedLayers(arg2);
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetUsedLayers__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfLayerHandleVector result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetUsedLayers();
  jresult = new SdfLayerHandleVector((const SdfLayerHandleVector &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasLocalLayer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->HasLocalLayer((SdfLayerHandle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetEditTarget(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdEditTarget *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (UsdEditTarget *) &((UsdStage const *)arg1)->GetEditTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetEditTargetForLocalLayer__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  size_t arg2 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdEditTarget result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetEditTargetForLocalLayer(arg2);
  jresult = new UsdEditTarget((const UsdEditTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetEditTargetForLocalLayer__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  UsdEditTarget result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetEditTargetForLocalLayer((SdfLayerHandle const &)*arg2);
  jresult = new UsdEditTarget((const UsdEditTarget &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetEditTarget(void * jarg1, void * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  UsdEditTarget *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (UsdEditTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdEditTarget const & type is null", 0);
    return ;
  } 
  (arg1)->SetEditTarget((UsdEditTarget const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_MuteLayer(void * jarg1, char * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->MuteLayer((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_UnmuteLayer(void * jarg1, char * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->UnmuteLayer((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_MuteAndUnmuteLayers(void * jarg1, void * jarg2, void * jarg3) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->MuteAndUnmuteLayers((std::vector< std::string > const &)*arg2,(std::vector< std::string > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetMutedLayers(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (std::vector< std::string > *) &((UsdStage const *)arg1)->GetMutedLayers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_IsLayerMuted(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdStage const *)arg1)->IsLayerMuted((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_Export__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  SdfLayer::FileFormatArguments *arg4 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = (SdfLayer::FileFormatArguments *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayer::FileFormatArguments const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->Export((std::string const &)*arg2,arg3,(SdfLayer::FileFormatArguments const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_Export__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((UsdStage const *)arg1)->Export((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_Export__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdStage const *)arg1)->Export((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_ExportToString__SWIG_0(void * jarg1, char** jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool arg3 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  arg3 = jarg3 ? true : false; 
  result = (bool)((UsdStage const *)arg1)->ExportToString(arg2,arg3);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_ExportToString__SWIG_1(void * jarg1, char** jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  result = (bool)((UsdStage const *)arg1)->ExportToString(arg2);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Flatten__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  bool arg2 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfLayerRefPtr result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = jarg2 ? true : false; 
  result = ((UsdStage const *)arg1)->Flatten(arg2);
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_Flatten__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfLayerRefPtr result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->Flatten();
  jresult = result ? new TfRefPtr< SdfLayer>(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_GetMetadata(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = (VtValue *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3; 
  result = (bool)((UsdStage const *)arg1)->GetMetadata((TfToken const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->HasMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasAuthoredMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->HasAuthoredMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_SetMetadata(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->SetMetadata((TfToken const &)*arg2,(VtValue const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_ClearMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->ClearMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_GetMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue *arg4 = (VtValue *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtValue *)jarg4; 
  result = (bool)((UsdStage const *)arg1)->GetMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasMetadataDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->HasMetadataDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasAuthoredMetadataDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->HasAuthoredMetadataDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_SetMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue *arg4 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtValue *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->SetMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3,(VtValue const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_ClearMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStage const *)arg1)->ClearMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStage_GetStartTimeCode(void * jarg1) {
  double jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((UsdStage const *)arg1)->GetStartTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetStartTimeCode(void * jarg1, double jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  double arg2 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->SetStartTimeCode(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStage_GetEndTimeCode(void * jarg1) {
  double jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((UsdStage const *)arg1)->GetEndTimeCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetEndTimeCode(void * jarg1, double jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  double arg2 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->SetEndTimeCode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStage_HasAuthoredTimeCodeRange(void * jarg1) {
  unsigned int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (bool)((UsdStage const *)arg1)->HasAuthoredTimeCodeRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStage_GetTimeCodesPerSecond(void * jarg1) {
  double jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((UsdStage const *)arg1)->GetTimeCodesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetTimeCodesPerSecond(void * jarg1, double jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  double arg2 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  ((UsdStage const *)arg1)->SetTimeCodesPerSecond(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_pxr_UsdStage_GetFramesPerSecond(void * jarg1) {
  double jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (double)((UsdStage const *)arg1)->GetFramesPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetFramesPerSecond(void * jarg1, double jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  double arg2 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (double)jarg2; 
  ((UsdStage const *)arg1)->SetFramesPerSecond(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetColorConfiguration(void * jarg1, void * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  SdfAssetPath *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return ;
  } 
  ((UsdStage const *)arg1)->SetColorConfiguration((SdfAssetPath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetColorConfiguration(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  SdfAssetPath result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetColorConfiguration();
  jresult = new SdfAssetPath((const SdfAssetPath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetColorManagementSystem(void * jarg1, void * jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfToken *arg2 = 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  ((UsdStage const *)arg1)->SetColorManagementSystem((TfToken const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetColorManagementSystem(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  TfToken result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetColorManagementSystem();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_GetColorConfigFallbacks(void * jarg1, void * jarg2) {
  SdfAssetPath *arg1 = (SdfAssetPath *) 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  
  arg1 = (SdfAssetPath *)jarg1; 
  arg2 = (TfToken *)jarg2; 
  UsdStage::GetColorConfigFallbacks(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetColorConfigFallbacks(void * jarg1, void * jarg2) {
  SdfAssetPath *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (SdfAssetPath *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return ;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  UsdStage::SetColorConfigFallbacks((SdfAssetPath const &)*arg1,(TfToken const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStage_SetInterpolationType(void * jarg1, int jarg2) {
  UsdStage *arg1 = (UsdStage *) 0 ;
  UsdInterpolationType arg2 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  arg2 = (UsdInterpolationType)jarg2; 
  (arg1)->SetInterpolationType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdStage_GetInterpolationType(void * jarg1) {
  int jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  UsdInterpolationType result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = (UsdInterpolationType)((UsdStage const *)arg1)->GetInterpolationType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetMasters(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage const > *smartarg1 = 0 ;
  std::vector< UsdPrim > result;
  
  
  smartarg1 = (TfRefPtr< const UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = ((UsdStage const *)arg1)->GetMasters();
  jresult = new std::vector< UsdPrim >((const std::vector< UsdPrim > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetAllPrims(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  std::vector< UsdPrim > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = UsdStage_GetAllPrims(arg1);
  jresult = new std::vector< UsdPrim >((const std::vector< UsdPrim > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetAllPrimsByType(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string arg2 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  std::vector< UsdPrim > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = UsdStage_GetAllPrimsByType(arg1,arg2);
  jresult = new std::vector< UsdPrim >((const std::vector< UsdPrim > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetAllPaths(void * jarg1) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  std::vector< SdfPath > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  result = UsdStage_GetAllPaths(arg1);
  jresult = new std::vector< SdfPath >((const std::vector< SdfPath > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStage_GetAllPathsByType(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdStage *arg1 = (UsdStage *) 0 ;
  std::string arg2 ;
  TfRefPtr< UsdStage > *smartarg1 = 0 ;
  std::vector< SdfPath > result;
  
  
  smartarg1 = (TfRefPtr<  UsdStage > *)jarg1;
  arg1 = (UsdStage *)(smartarg1 ? smartarg1->operator->() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = UsdStage_GetAllPathsByType(arg1,arg2);
  jresult = new std::vector< SdfPath >((const std::vector< SdfPath > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageCacheResultPair__SWIG_0() {
  void * jresult ;
  std::pair< UsdStageRefPtr,bool > *result = 0 ;
  
  result = (std::pair< UsdStageRefPtr,bool > *)new std::pair< UsdStageRefPtr,bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageCacheResultPair__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TfRefPtr< UsdStage > arg1 ;
  bool arg2 ;
  std::pair< UsdStageRefPtr,bool > *result = 0 ;
  
  if (jarg1) arg1 = *(TfRefPtr< UsdStage > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (std::pair< UsdStageRefPtr,bool > *)new std::pair< UsdStageRefPtr,bool >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageCacheResultPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< UsdStageRefPtr,bool > *arg1 = 0 ;
  std::pair< UsdStageRefPtr,bool > *result = 0 ;
  
  arg1 = (std::pair< UsdStageRefPtr,bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< UsdStageRefPtr,bool > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< UsdStageRefPtr,bool > *)new std::pair< UsdStageRefPtr,bool >((std::pair< UsdStageRefPtr,bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageCacheResultPair_first_set(void * jarg1, void * jarg2) {
  std::pair< UsdStageRefPtr,bool > *arg1 = (std::pair< UsdStageRefPtr,bool > *) 0 ;
  TfRefPtr< UsdStage > *arg2 = 0 ;
  TfRefPtr< UsdStage > tempnull2 ;
  
  arg1 = (std::pair< UsdStageRefPtr,bool > *)jarg1; 
  arg2 = jarg2 ? (TfRefPtr< UsdStage > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCacheResultPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< UsdStageRefPtr,bool > *arg1 = (std::pair< UsdStageRefPtr,bool > *) 0 ;
  TfRefPtr< UsdStage > *result = 0 ;
  
  arg1 = (std::pair< UsdStageRefPtr,bool > *)jarg1; 
  result = (TfRefPtr< UsdStage > *) & ((arg1)->first);
  jresult = *result ? new TfRefPtr< UsdStage>(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageCacheResultPair_second_set(void * jarg1, unsigned int jarg2) {
  std::pair< UsdStageRefPtr,bool > *arg1 = (std::pair< UsdStageRefPtr,bool > *) 0 ;
  bool arg2 ;
  
  arg1 = (std::pair< UsdStageRefPtr,bool > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCacheResultPair_second_get(void * jarg1) {
  unsigned int jresult ;
  std::pair< UsdStageRefPtr,bool > *arg1 = (std::pair< UsdStageRefPtr,bool > *) 0 ;
  bool result;
  
  arg1 = (std::pair< UsdStageRefPtr,bool > *)jarg1; 
  result = (bool) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStageCacheResultPair(void * jarg1) {
  std::pair< UsdStageRefPtr,bool > *arg1 = (std::pair< UsdStageRefPtr,bool > *) 0 ;
  
  arg1 = (std::pair< UsdStageRefPtr,bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageCache_Id() {
  void * jresult ;
  UsdStageCache::Id *result = 0 ;
  
  result = (UsdStageCache::Id *)new UsdStageCache::Id();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_Id_FromLongInt(long jarg1) {
  void * jresult ;
  long arg1 ;
  UsdStageCache::Id result;
  
  arg1 = (long)jarg1; 
  result = UsdStageCache::Id::FromLongInt(arg1);
  jresult = new UsdStageCache::Id((const UsdStageCache::Id &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_Id_FromString(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  UsdStageCache::Id result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = UsdStageCache::Id::FromString((std::string const &)*arg1);
  jresult = new UsdStageCache::Id((const UsdStageCache::Id &)result); 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_pxr_UsdStageCache_Id_ToLongInt(void * jarg1) {
  long jresult ;
  UsdStageCache::Id *arg1 = (UsdStageCache::Id *) 0 ;
  long result;
  
  arg1 = (UsdStageCache::Id *)jarg1; 
  result = (long)((UsdStageCache::Id const *)arg1)->ToLongInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdStageCache_Id_ToString(void * jarg1) {
  char * jresult ;
  UsdStageCache::Id *arg1 = (UsdStageCache::Id *) 0 ;
  std::string result;
  
  arg1 = (UsdStageCache::Id *)jarg1; 
  result = ((UsdStageCache::Id const *)arg1)->ToString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCache_Id_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdStageCache::Id *arg1 = (UsdStageCache::Id *) 0 ;
  bool result;
  
  arg1 = (UsdStageCache::Id *)jarg1; 
  result = (bool)((UsdStageCache::Id const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStageCache_Id(void * jarg1) {
  UsdStageCache::Id *arg1 = (UsdStageCache::Id *) 0 ;
  
  arg1 = (UsdStageCache::Id *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageCache__SWIG_0() {
  void * jresult ;
  UsdStageCache *result = 0 ;
  
  result = (UsdStageCache *)new UsdStageCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdStageCache__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdStageCache *arg1 = 0 ;
  UsdStageCache *result = 0 ;
  
  arg1 = (UsdStageCache *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCache const & type is null", 0);
    return 0;
  } 
  result = (UsdStageCache *)new UsdStageCache((UsdStageCache const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStageCache(void * jarg1) {
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  
  arg1 = (UsdStageCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageCache_swap(void * jarg1, void * jarg2) {
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageCache *arg2 = 0 ;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (UsdStageCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCache & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_GetAllStages(void * jarg1) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SwigValueWrapper< std::vector< TfRefPtr< UsdStage > > > result;
  
  arg1 = (UsdStageCache *)jarg1; 
  result = ((UsdStageCache const *)arg1)->GetAllStages();
  jresult = new std::vector< UsdStageRefPtr >((const std::vector< UsdStageRefPtr > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdStageCache_Size(void * jarg1) {
  unsigned long jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  size_t result;
  
  arg1 = (UsdStageCache *)jarg1; 
  result = ((UsdStageCache const *)arg1)->Size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCache_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  bool result;
  
  arg1 = (UsdStageCache *)jarg1; 
  result = (bool)((UsdStageCache const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_RequestStage(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageCacheRequest *arg2 = 0 ;
  std::pair< UsdStageRefPtr,bool > result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (UsdStageCacheRequest *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCacheRequest && type is null", 0);
    return 0;
  } 
  result = (arg1)->RequestStage((UsdStageCacheRequest &&)*arg2);
  jresult = new std::pair< UsdStageRefPtr,bool >((const std::pair< UsdStageRefPtr,bool > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_Find(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageCache::Id arg2 ;
  UsdStageCache::Id *argp2 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStageCache *)jarg1; 
  argp2 = (UsdStageCache::Id *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdStageCache::Id", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdStageCache const *)arg1)->Find(arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindOneMatching__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindOneMatching((SdfLayerHandle const &)*arg2);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindOneMatching__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindOneMatching((SdfLayerHandle const &)*arg2,(SdfLayerHandle const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindOneMatching__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindOneMatching((SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindOneMatching__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  ArResolverContext *arg4 = 0 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg4 = (ArResolverContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindOneMatching((SdfLayerHandle const &)*arg2,(SdfLayerHandle const &)*arg3,(ArResolverContext const &)*arg4);
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindAllMatching__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SwigValueWrapper< std::vector< TfRefPtr< UsdStage > > > result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindAllMatching((SdfLayerHandle const &)*arg2);
  jresult = new std::vector< UsdStageRefPtr >((const std::vector< UsdStageRefPtr > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindAllMatching__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  SwigValueWrapper< std::vector< TfRefPtr< UsdStage > > > result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindAllMatching((SdfLayerHandle const &)*arg2,(SdfLayerHandle const &)*arg3);
  jresult = new std::vector< UsdStageRefPtr >((const std::vector< UsdStageRefPtr > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindAllMatching__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  ArResolverContext *arg3 = 0 ;
  SwigValueWrapper< std::vector< TfRefPtr< UsdStage > > > result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (ArResolverContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindAllMatching((SdfLayerHandle const &)*arg2,(ArResolverContext const &)*arg3);
  jresult = new std::vector< UsdStageRefPtr >((const std::vector< UsdStageRefPtr > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_FindAllMatching__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  ArResolverContext *arg4 = 0 ;
  SwigValueWrapper< std::vector< TfRefPtr< UsdStage > > > result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg4 = (ArResolverContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = ((UsdStageCache const *)arg1)->FindAllMatching((SdfLayerHandle const &)*arg2,(SdfLayerHandle const &)*arg3,(ArResolverContext const &)*arg4);
  jresult = new std::vector< UsdStageRefPtr >((const std::vector< UsdStageRefPtr > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_GetId(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageRefPtr *arg2 = 0 ;
  UsdStageRefPtr tempnull2 ;
  UsdStageCache::Id result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = jarg2 ? (UsdStageRefPtr *)jarg2 : &tempnull2; 
  result = ((UsdStageCache const *)arg1)->GetId((UsdStageRefPtr const &)*arg2);
  jresult = new UsdStageCache::Id((const UsdStageCache::Id &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCache_Contains__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageRefPtr *arg2 = 0 ;
  UsdStageRefPtr tempnull2 ;
  bool result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = jarg2 ? (UsdStageRefPtr *)jarg2 : &tempnull2; 
  result = (bool)((UsdStageCache const *)arg1)->Contains((UsdStageRefPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCache_Contains__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageCache::Id arg2 ;
  UsdStageCache::Id *argp2 ;
  bool result;
  
  arg1 = (UsdStageCache *)jarg1; 
  argp2 = (UsdStageCache::Id *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdStageCache::Id", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((UsdStageCache const *)arg1)->Contains(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCache_Insert(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageRefPtr *arg2 = 0 ;
  UsdStageRefPtr tempnull2 ;
  UsdStageCache::Id result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = jarg2 ? (UsdStageRefPtr *)jarg2 : &tempnull2; 
  result = (arg1)->Insert((UsdStageRefPtr const &)*arg2);
  jresult = new UsdStageCache::Id((const UsdStageCache::Id &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCache_Erase__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageCache::Id arg2 ;
  UsdStageCache::Id *argp2 ;
  bool result;
  
  arg1 = (UsdStageCache *)jarg1; 
  argp2 = (UsdStageCache::Id *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdStageCache::Id", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->Erase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCache_Erase__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  UsdStageRefPtr *arg2 = 0 ;
  UsdStageRefPtr tempnull2 ;
  bool result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = jarg2 ? (UsdStageRefPtr *)jarg2 : &tempnull2; 
  result = (bool)(arg1)->Erase((UsdStageRefPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdStageCache_EraseAll__SWIG_0(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  size_t result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = (arg1)->EraseAll((SdfLayerHandle const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdStageCache_EraseAll__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned long jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  size_t result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = (arg1)->EraseAll((SdfLayerHandle const &)*arg2,(SdfLayerHandle const &)*arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdStageCache_EraseAll__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned long jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  ArResolverContext *arg4 = 0 ;
  size_t result;
  
  arg1 = (UsdStageCache *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg4 = (ArResolverContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ArResolverContext const & type is null", 0);
    return 0;
  } 
  result = (arg1)->EraseAll((SdfLayerHandle const &)*arg2,(SdfLayerHandle const &)*arg3,(ArResolverContext const &)*arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageCache_Clear(void * jarg1) {
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  
  arg1 = (UsdStageCache *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdStageCache_SetDebugName(void * jarg1, char * jarg2) {
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (UsdStageCache *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetDebugName((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdStageCache_GetDebugName(void * jarg1) {
  char * jresult ;
  UsdStageCache *arg1 = (UsdStageCache *) 0 ;
  std::string result;
  
  arg1 = (UsdStageCache *)jarg1; 
  result = ((UsdStageCache const *)arg1)->GetDebugName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_swap__SWIG_6(void * jarg1, void * jarg2) {
  UsdStageCache *arg1 = 0 ;
  UsdStageCache *arg2 = 0 ;
  
  arg1 = (UsdStageCache *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCache & type is null", 0);
    return ;
  } 
  arg2 = (UsdStageCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCache & type is null", 0);
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdStageCacheRequest(void * jarg1) {
  UsdStageCacheRequest *arg1 = (UsdStageCacheRequest *) 0 ;
  
  arg1 = (UsdStageCacheRequest *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCacheRequest_IsSatisfiedBy__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageCacheRequest *arg1 = (UsdStageCacheRequest *) 0 ;
  UsdStageRefPtr *arg2 = 0 ;
  UsdStageRefPtr tempnull2 ;
  bool result;
  
  arg1 = (UsdStageCacheRequest *)jarg1; 
  arg2 = jarg2 ? (UsdStageRefPtr *)jarg2 : &tempnull2; 
  result = (bool)((UsdStageCacheRequest const *)arg1)->IsSatisfiedBy((UsdStageRefPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdStageCacheRequest_IsSatisfiedBy__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdStageCacheRequest *arg1 = (UsdStageCacheRequest *) 0 ;
  UsdStageCacheRequest *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdStageCacheRequest *)jarg1; 
  arg2 = (UsdStageCacheRequest *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageCacheRequest const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdStageCacheRequest const *)arg1)->IsSatisfiedBy((UsdStageCacheRequest const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdStageCacheRequest_Manufacture(void * jarg1) {
  void * jresult ;
  UsdStageCacheRequest *arg1 = (UsdStageCacheRequest *) 0 ;
  UsdStageRefPtr result;
  
  arg1 = (UsdStageCacheRequest *)jarg1; 
  result = (arg1)->Manufacture();
  jresult = result ? new TfRefPtr< UsdStage>(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdResolveInfo() {
  void * jresult ;
  UsdResolveInfo *result = 0 ;
  
  result = (UsdResolveInfo *)new UsdResolveInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdResolveInfo_GetSource(void * jarg1) {
  int jresult ;
  UsdResolveInfo *arg1 = (UsdResolveInfo *) 0 ;
  UsdResolveInfoSource result;
  
  arg1 = (UsdResolveInfo *)jarg1; 
  result = (UsdResolveInfoSource)((UsdResolveInfo const *)arg1)->GetSource();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdResolveInfo_HasAuthoredValueOpinion(void * jarg1) {
  unsigned int jresult ;
  UsdResolveInfo *arg1 = (UsdResolveInfo *) 0 ;
  bool result;
  
  arg1 = (UsdResolveInfo *)jarg1; 
  result = (bool)((UsdResolveInfo const *)arg1)->HasAuthoredValueOpinion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdResolveInfo_GetNode(void * jarg1) {
  void * jresult ;
  UsdResolveInfo *arg1 = (UsdResolveInfo *) 0 ;
  PcpNodeRef result;
  
  arg1 = (UsdResolveInfo *)jarg1; 
  result = ((UsdResolveInfo const *)arg1)->GetNode();
  jresult = new PcpNodeRef((const PcpNodeRef &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdResolveInfo_ValueIsBlocked(void * jarg1) {
  unsigned int jresult ;
  UsdResolveInfo *arg1 = (UsdResolveInfo *) 0 ;
  bool result;
  
  arg1 = (UsdResolveInfo *)jarg1; 
  result = (bool)((UsdResolveInfo const *)arg1)->ValueIsBlocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdResolveInfo(void * jarg1) {
  UsdResolveInfo *arg1 = (UsdResolveInfo *) 0 ;
  
  arg1 = (UsdResolveInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdIsSubtype(int jarg1, int jarg2) {
  unsigned int jresult ;
  UsdObjType arg1 ;
  UsdObjType arg2 ;
  bool result;
  
  arg1 = (UsdObjType)jarg1; 
  arg2 = (UsdObjType)jarg2; 
  result = (bool)UsdIsSubtype(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdIsConvertible(int jarg1, int jarg2) {
  unsigned int jresult ;
  UsdObjType arg1 ;
  UsdObjType arg2 ;
  bool result;
  
  arg1 = (UsdObjType)jarg1; 
  arg2 = (UsdObjType)jarg2; 
  result = (bool)UsdIsConvertible(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdIsConcrete(int jarg1) {
  unsigned int jresult ;
  UsdObjType arg1 ;
  bool result;
  
  arg1 = (UsdObjType)jarg1; 
  result = (bool)UsdIsConcrete(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdObject() {
  void * jresult ;
  UsdObject *result = 0 ;
  
  result = (UsdObject *)new UsdObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_44(void * jarg1) {
  unsigned long jresult ;
  UsdObject *arg1 = 0 ;
  size_t result;
  
  arg1 = (UsdObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdObject const & type is null", 0);
    return 0;
  } 
  result = hash_value((UsdObject const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetStage(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  SwigValueWrapper< UsdStageWeakPtr > result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetStage();
  jresult = new UsdStageWeakPtr((const UsdStageWeakPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetPath(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  SdfPath result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetPrimPath(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  SdfPath *result = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  result = (SdfPath *) &((UsdObject const *)arg1)->GetPrimPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetPrim(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetName(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  result = (TfToken *) &((UsdObject const *)arg1)->GetName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdObject_GetDescription(void * jarg1) {
  char * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  std::string result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_SetMetadata(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->SetMetadata((TfToken const &)*arg2,(VtValue const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_ClearMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->ClearMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredMetadata(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredMetadata((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_SetMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtValue *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->SetMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3,(VtValue const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_ClearMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->ClearMetadataByDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasMetadataDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasMetadataDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredMetadataDictKey(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredMetadataDictKey((TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetAllMetadata(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  UsdMetadataValueMap result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetAllMetadata();
  jresult = new UsdMetadataValueMap((const UsdMetadataValueMap &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetAllAuthoredMetadata(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  UsdMetadataValueMap result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetAllAuthoredMetadata();
  jresult = new UsdMetadataValueMap((const UsdMetadataValueMap &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_IsHidden(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->IsHidden();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_SetHidden(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdObject const *)arg1)->SetHidden(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_ClearHidden(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->ClearHidden();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredHidden(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredHidden();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetCustomData(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  VtDictionary result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetCustomData();
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetCustomDataByKey(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdObject const *)arg1)->GetCustomDataByKey((TfToken const &)*arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_SetCustomData(void * jarg1, void * jarg2) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  VtDictionary *arg2 = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return ;
  } 
  ((UsdObject const *)arg1)->SetCustomData((VtDictionary const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_SetCustomDataByKey(void * jarg1, void * jarg2, void * jarg3) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  ((UsdObject const *)arg1)->SetCustomDataByKey((TfToken const &)*arg2,(VtValue const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_ClearCustomData(void * jarg1) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  ((UsdObject const *)arg1)->ClearCustomData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_ClearCustomDataByKey(void * jarg1, void * jarg2) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  ((UsdObject const *)arg1)->ClearCustomDataByKey((TfToken const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasCustomData(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->HasCustomData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasCustomDataKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasCustomDataKey((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredCustomData(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredCustomData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredCustomDataKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredCustomDataKey((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetAssetInfo(void * jarg1) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  VtDictionary result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetAssetInfo();
  jresult = new VtDictionary((const VtDictionary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetAssetInfoByKey(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdObject const *)arg1)->GetAssetInfoByKey((TfToken const &)*arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_SetAssetInfo(void * jarg1, void * jarg2) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  VtDictionary *arg2 = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (VtDictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtDictionary const & type is null", 0);
    return ;
  } 
  ((UsdObject const *)arg1)->SetAssetInfo((VtDictionary const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_SetAssetInfoByKey(void * jarg1, void * jarg2, void * jarg3) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  VtValue *arg3 = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  arg3 = (VtValue *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return ;
  } 
  ((UsdObject const *)arg1)->SetAssetInfoByKey((TfToken const &)*arg2,(VtValue const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_ClearAssetInfo(void * jarg1) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  ((UsdObject const *)arg1)->ClearAssetInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdObject_ClearAssetInfoByKey(void * jarg1, void * jarg2) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  ((UsdObject const *)arg1)->ClearAssetInfoByKey((TfToken const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAssetInfo(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->HasAssetInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAssetInfoKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasAssetInfoKey((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredAssetInfo(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredAssetInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredAssetInfoKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredAssetInfoKey((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdObject_GetDocumentation(void * jarg1) {
  char * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  std::string result;
  
  arg1 = (UsdObject *)jarg1; 
  result = ((UsdObject const *)arg1)->GetDocumentation();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_SetDocumentation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdObject const *)arg1)->SetDocumentation((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_ClearDocumentation(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->ClearDocumentation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_HasAuthoredDocumentation(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)((UsdObject const *)arg1)->HasAuthoredDocumentation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_pxr_UsdObject_GetNamespaceDelimiter() {
  char jresult ;
  char result;
  
  result = (char)UsdObject::GetNamespaceDelimiter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_Usd_GetObjType(void * jarg1) {
  int jresult ;
  UsdObject *arg1 = 0 ;
  UsdObjType result;
  
  arg1 = (UsdObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdObject const & type is null", 0);
    return 0;
  } 
  result = (UsdObjType)Usd_GetObjType((UsdObject const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdObject *arg1 = 0 ;
  UsdObject *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdObject const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdObject const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdObject_Equals((UsdObject const &)*arg1,(UsdObject const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdObject__IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  bool result;
  
  arg1 = (UsdObject *)jarg1; 
  result = (bool)UsdObject__IsValid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetMetadata(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken arg2 ;
  TfToken *argp2 ;
  VtValue result;
  
  arg1 = (UsdObject *)jarg1; 
  argp2 = (TfToken *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfToken", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = UsdObject_GetMetadata((UsdObject const *)arg1,arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdObject_GetMetadataByDictKey(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdObject *arg1 = (UsdObject *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  VtValue result;
  
  arg1 = (UsdObject *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = UsdObject_GetMetadataByDictKey((UsdObject const *)arg1,(TfToken const &)*arg2,(TfToken const &)*arg3);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdObject(void * jarg1) {
  UsdObject *arg1 = (UsdObject *) 0 ;
  
  arg1 = (UsdObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_GetPrimFromVector(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdPrim > *arg1 = 0 ;
  int arg2 ;
  UsdPrim *arg3 = (UsdPrim *) 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (UsdPrim *)jarg3; 
  GetPrimFromVector((std::vector< UsdPrim > const &)*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_Clear(void * jarg1) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  UsdPrim *arg2 = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdPrim const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdPrimVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  std::vector< UsdPrim >::size_type result;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  result = ((std::vector< UsdPrim > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdPrimVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  std::vector< UsdPrim >::size_type result;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  result = ((std::vector< UsdPrim > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  std::vector< UsdPrim >::size_type arg2 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (std::vector< UsdPrim >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdPrim > *result = 0 ;
  
  result = (std::vector< UsdPrim > *)new std::vector< UsdPrim >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdPrim > *arg1 = 0 ;
  std::vector< UsdPrim > *result = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdPrim > *)new std::vector< UsdPrim >((std::vector< UsdPrim > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdPrim > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdPrim > *)new_std_vector_Sl_UsdPrim_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  UsdPrim result;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdPrim_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  UsdPrim *result = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdPrim *) &std_vector_Sl_UsdPrim_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  UsdPrim *arg3 = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdPrim *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdPrim_Sg__setitem(arg1,arg2,(UsdPrim const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  std::vector< UsdPrim > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (std::vector< UsdPrim > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdPrim_Sg__AddRange(arg1,(std::vector< UsdPrim > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdPrim > *result = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdPrim > *)std_vector_Sl_UsdPrim_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  UsdPrim *arg3 = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdPrim *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdPrim_Sg__Insert(arg1,arg2,(UsdPrim const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  std::vector< UsdPrim > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdPrim > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdPrim_Sg__InsertRange(arg1,arg2,(std::vector< UsdPrim > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdPrim_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdPrim_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdPrim > *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdPrim > *)std_vector_Sl_UsdPrim_Sg__Repeat((UsdPrim const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  std_vector_Sl_UsdPrim_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdPrim_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  int arg2 ;
  std::vector< UsdPrim > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdPrim > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdPrim_Sg__SetRange(arg1,arg2,(std::vector< UsdPrim > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimVector(void * jarg1) {
  std::vector< UsdPrim > *arg1 = (std::vector< UsdPrim > *) 0 ;
  
  arg1 = (std::vector< UsdPrim > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimSiblingIterator_MoveNext(void * jarg1) {
  UsdPrimSiblingIterator *arg1 = (UsdPrimSiblingIterator *) 0 ;
  
  arg1 = (UsdPrimSiblingIterator *)jarg1; 
  UsdPrimSiblingIterator_MoveNext(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSiblingIterator_GetCurrent(void * jarg1) {
  void * jresult ;
  UsdPrimSiblingIterator *arg1 = (UsdPrimSiblingIterator *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrimSiblingIterator *)jarg1; 
  result = UsdPrimSiblingIterator_GetCurrent(arg1);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrimSiblingIterator_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrimSiblingIterator *arg1 = 0 ;
  UsdPrimSiblingIterator *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrimSiblingIterator *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimSiblingIterator const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdPrimSiblingIterator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimSiblingIterator const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdPrimSiblingIterator_Equals((UsdPrimSiblingIterator const &)*arg1,(UsdPrimSiblingIterator const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimSiblingIterator_GetHashCode(void * jarg1) {
  int jresult ;
  UsdPrimSiblingIterator *arg1 = (UsdPrimSiblingIterator *) 0 ;
  int result;
  
  arg1 = (UsdPrimSiblingIterator *)jarg1; 
  result = (int)UsdPrimSiblingIterator_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimSiblingIterator() {
  void * jresult ;
  UsdPrimSiblingIterator *result = 0 ;
  
  result = (UsdPrimSiblingIterator *)new UsdPrimSiblingIterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimSiblingIterator(void * jarg1) {
  UsdPrimSiblingIterator *arg1 = (UsdPrimSiblingIterator *) 0 ;
  
  arg1 = (UsdPrimSiblingIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeIterator_MoveNext(void * jarg1) {
  UsdPrimSubtreeIterator *arg1 = (UsdPrimSubtreeIterator *) 0 ;
  
  arg1 = (UsdPrimSubtreeIterator *)jarg1; 
  UsdPrimSubtreeIterator_MoveNext(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeIterator_GetCurrent(void * jarg1) {
  void * jresult ;
  UsdPrimSubtreeIterator *arg1 = (UsdPrimSubtreeIterator *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrimSubtreeIterator *)jarg1; 
  result = UsdPrimSubtreeIterator_GetCurrent(arg1);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeIterator_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrimSubtreeIterator *arg1 = 0 ;
  UsdPrimSubtreeIterator *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrimSubtreeIterator *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimSubtreeIterator const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdPrimSubtreeIterator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimSubtreeIterator const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdPrimSubtreeIterator_Equals((UsdPrimSubtreeIterator const &)*arg1,(UsdPrimSubtreeIterator const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeIterator_GetHashCode(void * jarg1) {
  int jresult ;
  UsdPrimSubtreeIterator *arg1 = (UsdPrimSubtreeIterator *) 0 ;
  int result;
  
  arg1 = (UsdPrimSubtreeIterator *)jarg1; 
  result = (int)UsdPrimSubtreeIterator_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimSubtreeIterator() {
  void * jresult ;
  UsdPrimSubtreeIterator *result = 0 ;
  
  result = (UsdPrimSubtreeIterator *)new UsdPrimSubtreeIterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimSubtreeIterator(void * jarg1) {
  UsdPrimSubtreeIterator *arg1 = (UsdPrimSubtreeIterator *) 0 ;
  
  arg1 = (UsdPrimSubtreeIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSiblingRange_begin(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSiblingIterator > *arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *) 0 ;
  UsdPrimSiblingIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *)jarg1; 
  result = ((boost::iterator_range< UsdPrimSiblingIterator > const *)arg1)->begin();
  jresult = new UsdPrimSiblingIterator((const UsdPrimSiblingIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSiblingRange_end(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSiblingIterator > *arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *) 0 ;
  UsdPrimSiblingIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *)jarg1; 
  result = ((boost::iterator_range< UsdPrimSiblingIterator > const *)arg1)->end();
  jresult = new UsdPrimSiblingIterator((const UsdPrimSiblingIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSiblingRange_GetStart(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSiblingIterator > *arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *) 0 ;
  UsdPrimSiblingIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *)jarg1; 
  result = boost_iterator_range_Sl_UsdPrimSiblingIterator_Sg__GetStart(arg1);
  jresult = new UsdPrimSiblingIterator((const UsdPrimSiblingIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSiblingRange_GetEnd(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSiblingIterator > *arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *) 0 ;
  UsdPrimSiblingIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *)jarg1; 
  result = boost_iterator_range_Sl_UsdPrimSiblingIterator_Sg__GetEnd(arg1);
  jresult = new UsdPrimSiblingIterator((const UsdPrimSiblingIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimSiblingRange() {
  void * jresult ;
  boost::iterator_range< UsdPrimSiblingIterator > *result = 0 ;
  
  result = (boost::iterator_range< UsdPrimSiblingIterator > *)new boost::iterator_range< UsdPrimSiblingIterator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimSiblingRange(void * jarg1) {
  boost::iterator_range< UsdPrimSiblingIterator > *arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *) 0 ;
  
  arg1 = (boost::iterator_range< UsdPrimSiblingIterator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeRange_begin(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSubtreeIterator > *arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *) 0 ;
  UsdPrimSubtreeIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *)jarg1; 
  result = ((boost::iterator_range< UsdPrimSubtreeIterator > const *)arg1)->begin();
  jresult = new UsdPrimSubtreeIterator((const UsdPrimSubtreeIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeRange_end(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSubtreeIterator > *arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *) 0 ;
  UsdPrimSubtreeIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *)jarg1; 
  result = ((boost::iterator_range< UsdPrimSubtreeIterator > const *)arg1)->end();
  jresult = new UsdPrimSubtreeIterator((const UsdPrimSubtreeIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeRange_GetStart(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSubtreeIterator > *arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *) 0 ;
  UsdPrimSubtreeIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *)jarg1; 
  result = boost_iterator_range_Sl_UsdPrimSubtreeIterator_Sg__GetStart(arg1);
  jresult = new UsdPrimSubtreeIterator((const UsdPrimSubtreeIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrimSubtreeRange_GetEnd(void * jarg1) {
  void * jresult ;
  boost::iterator_range< UsdPrimSubtreeIterator > *arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *) 0 ;
  UsdPrimSubtreeIterator result;
  
  arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *)jarg1; 
  result = boost_iterator_range_Sl_UsdPrimSubtreeIterator_Sg__GetEnd(arg1);
  jresult = new UsdPrimSubtreeIterator((const UsdPrimSubtreeIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrimSubtreeRange() {
  void * jresult ;
  boost::iterator_range< UsdPrimSubtreeIterator > *result = 0 ;
  
  result = (boost::iterator_range< UsdPrimSubtreeIterator > *)new boost::iterator_range< UsdPrimSubtreeIterator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrimSubtreeRange(void * jarg1) {
  boost::iterator_range< UsdPrimSubtreeIterator > *arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *) 0 ;
  
  arg1 = (boost::iterator_range< UsdPrimSubtreeIterator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPrim() {
  void * jresult ;
  UsdPrim *result = 0 ;
  
  result = (UsdPrim *)new UsdPrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPrimDefinition(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SdfPrimSpecHandle result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetPrimDefinition();
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdPrim_GetSpecifier(void * jarg1) {
  int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SdfSpecifier result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (SdfSpecifier)((UsdPrim const *)arg1)->GetSpecifier();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPrimStack(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SdfPrimSpecHandleVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetPrimStack();
  jresult = new SdfPrimSpecHandleVector((const SdfPrimSpecHandleVector &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetSpecifier(void * jarg1, int jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SdfSpecifier arg2 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (SdfSpecifier)jarg2; 
  result = (bool)((UsdPrim const *)arg1)->SetSpecifier(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetTypeName(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (TfToken *) &((UsdPrim const *)arg1)->GetTypeName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetTypeName(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->SetTypeName((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_ClearTypeName(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->ClearTypeName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAuthoredTypeName(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasAuthoredTypeName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsActive(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetActive(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdPrim const *)arg1)->SetActive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_ClearActive(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->ClearActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAuthoredActive(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasAuthoredActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsLoaded(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsModel(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsModel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsGroup(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsAbstract(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsAbstract();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasDefiningSpecifier(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasDefiningSpecifier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAppliedSchemas(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfTokenVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAppliedSchemas();
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPropertyNames__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::PropertyPredicateFunc *arg2 = 0 ;
  TfTokenVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (UsdPrim::PropertyPredicateFunc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim::PropertyPredicateFunc const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetPropertyNames((UsdPrim::PropertyPredicateFunc const &)*arg2);
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPropertyNames__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfTokenVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetPropertyNames();
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredPropertyNames__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::PropertyPredicateFunc *arg2 = 0 ;
  TfTokenVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (UsdPrim::PropertyPredicateFunc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim::PropertyPredicateFunc const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetAuthoredPropertyNames((UsdPrim::PropertyPredicateFunc const &)*arg2);
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredPropertyNames__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfTokenVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAuthoredPropertyNames();
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetProperties__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::PropertyPredicateFunc *arg2 = 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (UsdPrim::PropertyPredicateFunc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim::PropertyPredicateFunc const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetProperties((UsdPrim::PropertyPredicateFunc const &)*arg2);
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetProperties__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetProperties();
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredProperties__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::PropertyPredicateFunc *arg2 = 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (UsdPrim::PropertyPredicateFunc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim::PropertyPredicateFunc const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetAuthoredProperties((UsdPrim::PropertyPredicateFunc const &)*arg2);
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredProperties__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAuthoredProperties();
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPropertiesInNamespace__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetPropertiesInNamespace((std::vector< std::string > const &)*arg2);
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPropertiesInNamespace__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdPrim const *)arg1)->GetPropertiesInNamespace((std::string const &)*arg2);
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredPropertiesInNamespace__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetAuthoredPropertiesInNamespace((std::vector< std::string > const &)*arg2);
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredPropertiesInNamespace__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< UsdProperty > result;
  
  arg1 = (UsdPrim *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdPrim const *)arg1)->GetAuthoredPropertiesInNamespace((std::string const &)*arg2);
  jresult = new std::vector< UsdProperty >((const std::vector< UsdProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPropertyOrder(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfTokenVector result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetPropertyOrder();
  jresult = new TfTokenVector((const TfTokenVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrim_SetPropertyOrder(void * jarg1, void * jarg2) {
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfTokenVector *arg2 = 0 ;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfTokenVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfTokenVector const & type is null", 0);
    return ;
  } 
  ((UsdPrim const *)arg1)->SetPropertyOrder((TfTokenVector const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_RemoveProperty(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoveProperty((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetProperty(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdProperty result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetProperty((TfToken const &)*arg2);
  jresult = new UsdProperty((const UsdProperty &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasProperty(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->HasProperty((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetChild(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetChild((TfToken const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetChildren(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::SiblingRange result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetChildren();
  jresult = new UsdPrim::SiblingRange((const UsdPrim::SiblingRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAllChildren(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::SiblingRange result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAllChildren();
  jresult = new UsdPrim::SiblingRange((const UsdPrim::SiblingRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetFilteredChildren(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  UsdPrim::SiblingRange result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetFilteredChildren((Usd_PrimFlagsPredicate const &)*arg2);
  jresult = new UsdPrim::SiblingRange((const UsdPrim::SiblingRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetDescendants(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::SubtreeRange result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetDescendants();
  jresult = new UsdPrim::SubtreeRange((const UsdPrim::SubtreeRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAllDescendants(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim::SubtreeRange result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAllDescendants();
  jresult = new UsdPrim::SubtreeRange((const UsdPrim::SubtreeRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetFilteredDescendants(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  UsdPrim::SubtreeRange result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetFilteredDescendants((Usd_PrimFlagsPredicate const &)*arg2);
  jresult = new UsdPrim::SubtreeRange((const UsdPrim::SubtreeRange &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetParent(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetParent();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetNextSibling(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetNextSibling();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetFilteredNextSibling(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  Usd_PrimFlagsPredicate *arg2 = 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (Usd_PrimFlagsPredicate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Usd_PrimFlagsPredicate const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetFilteredNextSibling((Usd_PrimFlagsPredicate const &)*arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsPseudoRoot(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsPseudoRoot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetVariantSets(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SwigValueWrapper< UsdVariantSets > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetVariantSets();
  jresult = new UsdVariantSets((const UsdVariantSets &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetVariantSet(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< UsdVariantSet > result;
  
  arg1 = (UsdPrim *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdPrim const *)arg1)->GetVariantSet((std::string const &)*arg2);
  jresult = new UsdVariantSet((const UsdVariantSet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasVariantSets(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasVariantSets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  bool arg4 ;
  SdfVariability arg5 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (SdfVariability)jarg5; 
  result = ((UsdPrim const *)arg1)->CreateAttribute((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3,arg4,arg5);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  bool arg4 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdPrim const *)arg1)->CreateAttribute((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3,arg4);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  SdfVariability arg4 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = (SdfVariability)jarg4; 
  result = ((UsdPrim const *)arg1)->CreateAttribute((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3,arg4);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->CreateAttribute((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  bool arg4 ;
  SdfVariability arg5 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (SdfVariability)jarg5; 
  result = ((UsdPrim const *)arg1)->CreateAttribute((std::vector< std::string > const &)*arg2,(SdfValueTypeName const &)*arg3,arg4,arg5);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_5(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  bool arg4 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdPrim const *)arg1)->CreateAttribute((std::vector< std::string > const &)*arg2,(SdfValueTypeName const &)*arg3,arg4);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_6(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  SdfVariability arg4 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = (SdfVariability)jarg4; 
  result = ((UsdPrim const *)arg1)->CreateAttribute((std::vector< std::string > const &)*arg2,(SdfValueTypeName const &)*arg3,arg4);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateAttribute__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->CreateAttribute((std::vector< std::string > const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAttributes(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< UsdAttribute > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAttributes();
  jresult = new std::vector< UsdAttribute >((const std::vector< UsdAttribute > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredAttributes(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< UsdAttribute > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAuthoredAttributes();
  jresult = new std::vector< UsdAttribute >((const std::vector< UsdAttribute > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAttribute(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetAttribute((TfToken const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAttribute(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->HasAttribute((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateRelationship__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  bool arg3 ;
  UsdRelationship result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdPrim const *)arg1)->CreateRelationship((TfToken const &)*arg2,arg3);
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateRelationship__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdRelationship result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->CreateRelationship((TfToken const &)*arg2);
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateRelationship__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool arg3 ;
  UsdRelationship result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdPrim const *)arg1)->CreateRelationship((std::vector< std::string > const &)*arg2,arg3);
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_CreateRelationship__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  UsdRelationship result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->CreateRelationship((std::vector< std::string > const &)*arg2);
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetRelationships(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< UsdRelationship > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetRelationships();
  jresult = new std::vector< UsdRelationship >((const std::vector< UsdRelationship > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetAuthoredRelationships(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::vector< UsdRelationship > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetAuthoredRelationships();
  jresult = new std::vector< UsdRelationship >((const std::vector< UsdRelationship > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetRelationship(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdRelationship result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdPrim const *)arg1)->GetRelationship((TfToken const &)*arg2);
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasRelationship(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->HasRelationship((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_ClearPayload(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->ClearPayload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasPayload(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasPayload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetPayload__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SdfPayload *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (SdfPayload *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPayload const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->SetPayload((SdfPayload const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetPayload__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  std::string *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->SetPayload((std::string const &)*arg2,(SdfPath const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetPayload__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdPrim const *)arg1)->SetPayload((SdfLayerHandle const &)*arg2,(SdfPath const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrim_Load__SWIG_0(void * jarg1, int jarg2) {
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdLoadPolicy arg2 ;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = (UsdLoadPolicy)jarg2; 
  ((UsdPrim const *)arg1)->Load(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrim_Load__SWIG_1(void * jarg1) {
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  
  arg1 = (UsdPrim *)jarg1; 
  ((UsdPrim const *)arg1)->Load();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPrim_Unload(void * jarg1) {
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  
  arg1 = (UsdPrim *)jarg1; 
  ((UsdPrim const *)arg1)->Unload();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetReferences(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SwigValueWrapper< UsdReferences > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetReferences();
  jresult = new UsdReferences((const UsdReferences &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAuthoredReferences(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasAuthoredReferences();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetInherits(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SwigValueWrapper< UsdInherits > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetInherits();
  jresult = new UsdInherits((const UsdInherits &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAuthoredInherits(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasAuthoredInherits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetSpecializes(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  SwigValueWrapper< UsdSpecializes > result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetSpecializes();
  jresult = new UsdSpecializes((const UsdSpecializes &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAuthoredSpecializes(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasAuthoredSpecializes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsInstanceable(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsInstanceable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_SetInstanceable(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdPrim const *)arg1)->SetInstanceable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_ClearInstanceable(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->ClearInstanceable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_HasAuthoredInstanceable(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->HasAuthoredInstanceable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsInstance(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsInstanceProxy(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsInstanceProxy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsMaster(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsMaster();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_IsInMaster(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (bool)((UsdPrim const *)arg1)->IsInMaster();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetMaster(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetMaster();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPrimInMaster(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->GetPrimInMaster();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_GetPrimIndex(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  PcpPrimIndex *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1; 
  result = (PcpPrimIndex *) &((UsdPrim const *)arg1)->GetPrimIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPrim_ComputeExpandedPrimIndex(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  PcpPrimIndex result;
  
  arg1 = (UsdPrim *)jarg1; 
  result = ((UsdPrim const *)arg1)->ComputeExpandedPrimIndex();
  jresult = new PcpPrimIndex((const PcpPrimIndex &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdPrim_GetAttributeValue(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  TfToken arg2 ;
  VtValue *arg3 = (VtValue *) 0 ;
  UsdTimeCode arg4 ;
  TfToken *argp2 ;
  UsdTimeCode *argp4 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1; 
  argp2 = (TfToken *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfToken", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (VtValue *)jarg3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)UsdPrim_GetAttributeValue(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPrim(void * jarg1) {
  UsdPrim *arg1 = (UsdPrim *) 0 ;
  
  arg1 = (UsdPrim *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_Clear(void * jarg1) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  UsdProperty *arg2 = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (UsdProperty *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdProperty const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdPropertyVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  std::vector< UsdProperty >::size_type result;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  result = ((std::vector< UsdProperty > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdPropertyVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  std::vector< UsdProperty >::size_type result;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  result = ((std::vector< UsdProperty > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  std::vector< UsdProperty >::size_type arg2 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (std::vector< UsdProperty >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPropertyVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdProperty > *result = 0 ;
  
  result = (std::vector< UsdProperty > *)new std::vector< UsdProperty >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPropertyVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdProperty > *arg1 = 0 ;
  std::vector< UsdProperty > *result = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdProperty > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdProperty > *)new std::vector< UsdProperty >((std::vector< UsdProperty > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdPropertyVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdProperty > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdProperty > *)new_std_vector_Sl_UsdProperty_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPropertyVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  UsdProperty result;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdProperty_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdProperty((const UsdProperty &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPropertyVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  UsdProperty *result = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdProperty *) &std_vector_Sl_UsdProperty_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  UsdProperty *arg3 = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdProperty *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdProperty_Sg__setitem(arg1,arg2,(UsdProperty const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  std::vector< UsdProperty > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (std::vector< UsdProperty > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdProperty > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdProperty_Sg__AddRange(arg1,(std::vector< UsdProperty > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPropertyVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdProperty > *result = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdProperty > *)std_vector_Sl_UsdProperty_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  UsdProperty *arg3 = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdProperty *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdProperty_Sg__Insert(arg1,arg2,(UsdProperty const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  std::vector< UsdProperty > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdProperty > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdProperty > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdProperty_Sg__InsertRange(arg1,arg2,(std::vector< UsdProperty > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdProperty_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdProperty_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdPropertyVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdProperty *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdProperty > *result = 0 ;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdProperty > *)std_vector_Sl_UsdProperty_Sg__Repeat((UsdProperty const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  std_vector_Sl_UsdProperty_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdProperty_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdPropertyVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  int arg2 ;
  std::vector< UsdProperty > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdProperty > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdProperty > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdProperty_Sg__SetRange(arg1,arg2,(std::vector< UsdProperty > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdPropertyVector(void * jarg1) {
  std::vector< UsdProperty > *arg1 = (std::vector< UsdProperty > *) 0 ;
  
  arg1 = (std::vector< UsdProperty > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdProperty() {
  void * jresult ;
  UsdProperty *result = 0 ;
  
  result = (UsdProperty *)new UsdProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_GetPropertyStack__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  SdfPropertySpecHandleVector result;
  
  arg1 = (UsdProperty *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdProperty const *)arg1)->GetPropertyStack(arg2);
  jresult = new SdfPropertySpecHandleVector((const SdfPropertySpecHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_GetPropertyStack__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  SdfPropertySpecHandleVector result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->GetPropertyStack();
  jresult = new SdfPropertySpecHandleVector((const SdfPropertySpecHandleVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_GetBaseName(void * jarg1) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  TfToken result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->GetBaseName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_GetNamespace(void * jarg1) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  TfToken result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->GetNamespace();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_SplitName(void * jarg1) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->SplitName();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdProperty_GetDisplayGroup(void * jarg1) {
  char * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::string result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->GetDisplayGroup();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_SetDisplayGroup(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdProperty const *)arg1)->SetDisplayGroup((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_ClearDisplayGroup(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->ClearDisplayGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_HasAuthoredDisplayGroup(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->HasAuthoredDisplayGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_GetNestedDisplayGroups(void * jarg1) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->GetNestedDisplayGroups();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_SetNestedDisplayGroups(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdProperty const *)arg1)->SetNestedDisplayGroups((std::vector< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdProperty_GetDisplayName(void * jarg1) {
  char * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::string result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = ((UsdProperty const *)arg1)->GetDisplayName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_SetDisplayName(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdProperty const *)arg1)->SetDisplayName((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_ClearDisplayName(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->ClearDisplayName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_HasAuthoredDisplayName(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->HasAuthoredDisplayName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_IsCustom(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->IsCustom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_SetCustom(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdProperty const *)arg1)->SetCustom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_IsAuthored(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  result = (bool)((UsdProperty const *)arg1)->IsAuthored();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdProperty_IsAuthoredAt(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  UsdEditTarget *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1; 
  arg2 = (UsdEditTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdEditTarget const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdProperty const *)arg1)->IsAuthoredAt((UsdEditTarget const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_FlattenTo__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  UsdPrim *arg2 = 0 ;
  UsdProperty result;
  
  arg1 = (UsdProperty *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = ((UsdProperty const *)arg1)->FlattenTo((UsdPrim const &)*arg2);
  jresult = new UsdProperty((const UsdProperty &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_FlattenTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  UsdPrim *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdProperty result;
  
  arg1 = (UsdProperty *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdProperty const *)arg1)->FlattenTo((UsdPrim const &)*arg2,(TfToken const &)*arg3);
  jresult = new UsdProperty((const UsdProperty &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdProperty_FlattenTo__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  UsdProperty *arg2 = 0 ;
  UsdProperty result;
  
  arg1 = (UsdProperty *)jarg1; 
  arg2 = (UsdProperty *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  result = ((UsdProperty const *)arg1)->FlattenTo((UsdProperty const &)*arg2);
  jresult = new UsdProperty((const UsdProperty &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdProperty(void * jarg1) {
  UsdProperty *arg1 = (UsdProperty *) 0 ;
  
  arg1 = (UsdProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_Clear(void * jarg1) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  UsdRelationship *arg2 = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (UsdRelationship *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdRelationship const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdRelationship const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  std::vector< UsdRelationship >::size_type result;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  result = ((std::vector< UsdRelationship > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  std::vector< UsdRelationship >::size_type result;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  result = ((std::vector< UsdRelationship > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  std::vector< UsdRelationship >::size_type arg2 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (std::vector< UsdRelationship >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdRelationshipVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdRelationship > *result = 0 ;
  
  result = (std::vector< UsdRelationship > *)new std::vector< UsdRelationship >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdRelationshipVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdRelationship > *arg1 = 0 ;
  std::vector< UsdRelationship > *result = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdRelationship > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdRelationship > *)new std::vector< UsdRelationship >((std::vector< UsdRelationship > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdRelationshipVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdRelationship > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdRelationship > *)new_std_vector_Sl_UsdRelationship_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  UsdRelationship result;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdRelationship_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  UsdRelationship *result = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdRelationship *) &std_vector_Sl_UsdRelationship_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  UsdRelationship *arg3 = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdRelationship *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdRelationship const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdRelationship_Sg__setitem(arg1,arg2,(UsdRelationship const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  std::vector< UsdRelationship > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (std::vector< UsdRelationship > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdRelationship > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdRelationship_Sg__AddRange(arg1,(std::vector< UsdRelationship > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdRelationship > *result = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdRelationship > *)std_vector_Sl_UsdRelationship_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  UsdRelationship *arg3 = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdRelationship *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdRelationship const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdRelationship_Sg__Insert(arg1,arg2,(UsdRelationship const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  std::vector< UsdRelationship > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdRelationship > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdRelationship > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdRelationship_Sg__InsertRange(arg1,arg2,(std::vector< UsdRelationship > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdRelationship_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdRelationship_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdRelationship *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdRelationship > *result = 0 ;
  
  arg1 = (UsdRelationship *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdRelationship const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdRelationship > *)std_vector_Sl_UsdRelationship_Sg__Repeat((UsdRelationship const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  std_vector_Sl_UsdRelationship_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdRelationship_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdRelationshipVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  int arg2 ;
  std::vector< UsdRelationship > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdRelationship > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdRelationship > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdRelationship_Sg__SetRange(arg1,arg2,(std::vector< UsdRelationship > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdRelationshipVector(void * jarg1) {
  std::vector< UsdRelationship > *arg1 = (std::vector< UsdRelationship > *) 0 ;
  
  arg1 = (std::vector< UsdRelationship > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdRelationship() {
  void * jresult ;
  UsdRelationship *result = 0 ;
  
  result = (UsdRelationship *)new UsdRelationship();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_AddTarget__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdListPosition arg3 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdListPosition)jarg3; 
  result = (bool)((UsdRelationship const *)arg1)->AddTarget((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_AddTarget__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdRelationship const *)arg1)->AddTarget((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_RemoveTarget(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdRelationship const *)arg1)->RemoveTarget((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_BlockTargets(void * jarg1) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  result = (bool)((UsdRelationship const *)arg1)->BlockTargets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_SetTargets(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  SdfPathVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  arg2 = (SdfPathVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdRelationship const *)arg1)->SetTargets((SdfPathVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_ClearTargets(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdRelationship const *)arg1)->ClearTargets(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdRelationship_HasAuthoredTargets(void * jarg1) {
  unsigned int jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  bool result;
  
  arg1 = (UsdRelationship *)jarg1; 
  result = (bool)((UsdRelationship const *)arg1)->HasAuthoredTargets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdRelationship_GetTargets(void * jarg1) {
  void * jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  SdfPathVector result;
  
  arg1 = (UsdRelationship *)jarg1; 
  result = UsdRelationship_GetTargets(arg1);
  jresult = new SdfPathVector((const SdfPathVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdRelationship_GetForwardedTargets(void * jarg1) {
  void * jresult ;
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  SdfPathVector result;
  
  arg1 = (UsdRelationship *)jarg1; 
  result = UsdRelationship_GetForwardedTargets((UsdRelationship const *)arg1);
  jresult = new SdfPathVector((const SdfPathVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdRelationship(void * jarg1) {
  UsdRelationship *arg1 = (UsdRelationship *) 0 ;
  
  arg1 = (UsdRelationship *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_Clear(void * jarg1) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  UsdAttribute *arg2 = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (UsdAttribute *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdAttribute const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdAttributeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  std::vector< UsdAttribute >::size_type result;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  result = ((std::vector< UsdAttribute > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdAttributeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  std::vector< UsdAttribute >::size_type result;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  result = ((std::vector< UsdAttribute > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  std::vector< UsdAttribute >::size_type arg2 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (std::vector< UsdAttribute >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdAttributeVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdAttribute > *result = 0 ;
  
  result = (std::vector< UsdAttribute > *)new std::vector< UsdAttribute >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdAttributeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdAttribute > *arg1 = 0 ;
  std::vector< UsdAttribute > *result = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdAttribute > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdAttribute > *)new std::vector< UsdAttribute >((std::vector< UsdAttribute > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdAttributeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdAttribute > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdAttribute > *)new_std_vector_Sl_UsdAttribute_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttributeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  UsdAttribute result;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdAttribute_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttributeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdAttribute *) &std_vector_Sl_UsdAttribute_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  UsdAttribute *arg3 = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdAttribute *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdAttribute_Sg__setitem(arg1,arg2,(UsdAttribute const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  std::vector< UsdAttribute > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (std::vector< UsdAttribute > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdAttribute > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdAttribute_Sg__AddRange(arg1,(std::vector< UsdAttribute > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttributeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdAttribute > *result = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdAttribute > *)std_vector_Sl_UsdAttribute_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  UsdAttribute *arg3 = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdAttribute *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdAttribute_Sg__Insert(arg1,arg2,(UsdAttribute const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  std::vector< UsdAttribute > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdAttribute > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdAttribute > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdAttribute_Sg__InsertRange(arg1,arg2,(std::vector< UsdAttribute > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdAttribute_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdAttribute_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttributeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdAttribute > *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdAttribute > *)std_vector_Sl_UsdAttribute_Sg__Repeat((UsdAttribute const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  std_vector_Sl_UsdAttribute_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdAttribute_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttributeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  int arg2 ;
  std::vector< UsdAttribute > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdAttribute > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdAttribute > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdAttribute_Sg__SetRange(arg1,arg2,(std::vector< UsdAttribute > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdAttributeVector(void * jarg1) {
  std::vector< UsdAttribute > *arg1 = (std::vector< UsdAttribute > *) 0 ;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdAttribute() {
  void * jresult ;
  UsdAttribute *result = 0 ;
  
  result = (UsdAttribute *)new UsdAttribute();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdAttribute_GetVariability(void * jarg1) {
  int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfVariability result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (SdfVariability)((UsdAttribute const *)arg1)->GetVariability();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_SetVariability(void * jarg1, int jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfVariability arg2 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfVariability)jarg2; 
  result = (bool)((UsdAttribute const *)arg1)->SetVariability(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetTypeName(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = ((UsdAttribute const *)arg1)->GetTypeName();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_SetTypeName(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfValueTypeName *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfValueTypeName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdAttribute const *)arg1)->SetTypeName((SdfValueTypeName const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetRoleName(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  TfToken result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = ((UsdAttribute const *)arg1)->GetRoleName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_GetUnionedTimeSamples(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< UsdAttribute > *arg1 = 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdAttribute > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)UsdAttribute::GetUnionedTimeSamples((std::vector< UsdAttribute > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_GetUnionedTimeSamplesInInterval(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::vector< UsdAttribute > *arg1 = 0 ;
  GfInterval *arg2 = 0 ;
  std::vector< double > *arg3 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< UsdAttribute > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdAttribute > const & type is null", 0);
    return 0;
  } 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< double > *)jarg3; 
  result = (bool)UsdAttribute::GetUnionedTimeSamplesInInterval((std::vector< UsdAttribute > const &)*arg1,(GfInterval const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdAttribute_GetNumTimeSamples(void * jarg1) {
  unsigned long jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  size_t result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = ((UsdAttribute const *)arg1)->GetNumTimeSamples();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_GetBracketingTimeSamples(void * jarg1, double jarg2, double * jarg3, double * jarg4, double * jarg5) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  bool *arg5 = (bool *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (bool *)jarg5; 
  result = (bool)((UsdAttribute const *)arg1)->GetBracketingTimeSamples(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_HasValue(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->HasValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_HasAuthoredValueOpinion(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->HasAuthoredValueOpinion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_HasFallbackValue(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->HasFallbackValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_ValueMightBeTimeVarying(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->ValueMightBeTimeVarying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_Get__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  VtValue *arg2 = (VtValue *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (VtValue *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdAttribute const *)arg1)->Get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetResolveInfo__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  UsdResolveInfo result;
  
  arg1 = (UsdAttribute *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdAttribute const *)arg1)->GetResolveInfo(arg2);
  jresult = new UsdResolveInfo((const UsdResolveInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetResolveInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  UsdResolveInfo result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = ((UsdAttribute const *)arg1)->GetResolveInfo();
  jresult = new UsdResolveInfo((const UsdResolveInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_Set__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  VtValue *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdAttribute const *)arg1)->Set((VtValue const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_Set__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  VtValue *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdAttribute const *)arg1)->Set((VtValue const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_Clear(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->Clear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_ClearAtTime(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((UsdAttribute const *)arg1)->ClearAtTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_ClearDefault(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->ClearDefault();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttribute_Block(void * jarg1) {
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  
  arg1 = (UsdAttribute *)jarg1; 
  ((UsdAttribute const *)arg1)->Block();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_AddConnection__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdListPosition arg3 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdListPosition)jarg3; 
  result = (bool)((UsdAttribute const *)arg1)->AddConnection((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_AddConnection__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdAttribute const *)arg1)->AddConnection((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_RemoveConnection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdAttribute const *)arg1)->RemoveConnection((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_BlockConnections(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->BlockConnections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_SetConnections(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfPathVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfPathVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdAttribute const *)arg1)->SetConnections((SdfPathVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_ClearConnections(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->ClearConnections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_GetConnections(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)((UsdAttribute const *)arg1)->GetConnections(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_HasAuthoredConnections(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->HasAuthoredConnections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetColorSpace(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  TfToken result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = ((UsdAttribute const *)arg1)->GetColorSpace();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdAttribute_SetColorSpace(void * jarg1, void * jarg2) {
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  ((UsdAttribute const *)arg1)->SetColorSpace((TfToken const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_HasColorSpace(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->HasColorSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdAttribute_ClearColorSpace(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = (bool)((UsdAttribute const *)arg1)->ClearColorSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetTimeSamples(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  std::vector< double > result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = UsdAttribute_GetTimeSamples((UsdAttribute const *)arg1);
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_GetTimeSamplesInInterval(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  GfInterval *arg2 = 0 ;
  std::vector< double > result;
  
  arg1 = (UsdAttribute *)jarg1; 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = UsdAttribute_GetTimeSamplesInInterval((UsdAttribute const *)arg1,(GfInterval const &)*arg2);
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_Get__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  VtValue result;
  
  arg1 = (UsdAttribute *)jarg1; 
  result = UsdAttribute_Get__SWIG_3((UsdAttribute const *)arg1);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdAttribute_Get__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  VtValue result;
  
  arg1 = (UsdAttribute *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = UsdAttribute_Get__SWIG_4((UsdAttribute const *)arg1,arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdAttribute(void * jarg1) {
  UsdAttribute *arg1 = (UsdAttribute *) 0 ;
  
  arg1 = (UsdAttribute *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_AddVariant__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string *arg2 = 0 ;
  UsdListPosition arg3 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (UsdListPosition)jarg3; 
  result = (bool)(arg1)->AddVariant((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_AddVariant__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->AddVariant((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetVariantNames(void * jarg1) {
  void * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = ((UsdVariantSet const *)arg1)->GetVariantNames();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_HasAuthoredVariant(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdVariantSet const *)arg1)->HasAuthoredVariant((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetVariantSelection(void * jarg1) {
  char * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = ((UsdVariantSet const *)arg1)->GetVariantSelection();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_HasAuthoredVariantSelection__SWIG_0(void * jarg1, char** jarg2) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  result = (bool)((UsdVariantSet const *)arg1)->HasAuthoredVariantSelection(arg2);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_HasAuthoredVariantSelection__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = (bool)((UsdVariantSet const *)arg1)->HasAuthoredVariantSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_SetVariantSelection(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->SetVariantSelection((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_ClearVariantSelection(void * jarg1) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = (bool)(arg1)->ClearVariantSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetVariantEditTarget__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  UsdEditTarget result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdVariantSet const *)arg1)->GetVariantEditTarget((SdfLayerHandle const &)*arg2);
  jresult = new UsdEditTarget((const UsdEditTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetVariantEditTarget__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  UsdEditTarget result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = ((UsdVariantSet const *)arg1)->GetVariantEditTarget();
  jresult = new UsdEditTarget((const UsdEditTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetVariantEditContext__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  SdfLayerHandle *arg2 = 0 ;
  std::pair< UsdStagePtr,UsdEditTarget > result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  arg2 = (SdfLayerHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdVariantSet const *)arg1)->GetVariantEditContext((SdfLayerHandle const &)*arg2);
  jresult = new std::pair< UsdStagePtr,UsdEditTarget >((const std::pair< UsdStagePtr,UsdEditTarget > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetVariantEditContext__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::pair< UsdStagePtr,UsdEditTarget > result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = ((UsdVariantSet const *)arg1)->GetVariantEditContext();
  jresult = new std::pair< UsdStagePtr,UsdEditTarget >((const std::pair< UsdStagePtr,UsdEditTarget > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetPrim(void * jarg1) {
  void * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  UsdPrim *result = 0 ;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = (UsdPrim *) &((UsdVariantSet const *)arg1)->GetPrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdVariantSet_GetName(void * jarg1) {
  char * jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = (std::string *) &((UsdVariantSet const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSet_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  bool result;
  
  arg1 = (UsdVariantSet *)jarg1; 
  result = (bool)((UsdVariantSet const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdVariantSet(void * jarg1) {
  UsdVariantSet *arg1 = (UsdVariantSet *) 0 ;
  
  arg1 = (UsdVariantSet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSets_AddVariantSet__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::string *arg2 = 0 ;
  UsdListPosition arg3 ;
  SwigValueWrapper< UsdVariantSet > result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (UsdListPosition)jarg3; 
  result = (arg1)->AddVariantSet((std::string const &)*arg2,arg3);
  jresult = new UsdVariantSet((const UsdVariantSet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSets_AddVariantSet__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< UsdVariantSet > result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->AddVariantSet((std::string const &)*arg2);
  jresult = new UsdVariantSet((const UsdVariantSet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSets_GetNames__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  result = (bool)((UsdVariantSets const *)arg1)->GetNames(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSets_GetNames__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  result = ((UsdVariantSets const *)arg1)->GetNames();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdVariantSets_GetVariantSet(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< UsdVariantSet > result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdVariantSets const *)arg1)->GetVariantSet((std::string const &)*arg2);
  jresult = new UsdVariantSet((const UsdVariantSet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSets_HasVariantSet(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdVariantSets const *)arg1)->HasVariantSet((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdVariantSets_GetVariantSelection(void * jarg1, char * jarg2) {
  char * jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdVariantSets const *)arg1)->GetVariantSelection((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdVariantSets_SetSelection(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdVariantSets *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->SetSelection((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdVariantSets(void * jarg1) {
  UsdVariantSets *arg1 = (UsdVariantSets *) 0 ;
  
  arg1 = (UsdVariantSets *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdInherits_AddInherit__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdListPosition arg3 ;
  bool result;
  
  arg1 = (UsdInherits *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdListPosition)jarg3; 
  result = (bool)(arg1)->AddInherit((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdInherits_AddInherit__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdInherits *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddInherit((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdInherits_RemoveInherit(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdInherits *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoveInherit((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdInherits_ClearInherits(void * jarg1) {
  unsigned int jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  bool result;
  
  arg1 = (UsdInherits *)jarg1; 
  result = (bool)(arg1)->ClearInherits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdInherits_SetInherits(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  SdfPathVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdInherits *)jarg1; 
  arg2 = (SdfPathVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetInherits((SdfPathVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdInherits_GetAllDirectInherits(void * jarg1) {
  void * jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  SdfPathVector result;
  
  arg1 = (UsdInherits *)jarg1; 
  result = ((UsdInherits const *)arg1)->GetAllDirectInherits();
  jresult = new SdfPathVector((const SdfPathVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdInherits_GetPrim__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  UsdPrim *result = 0 ;
  
  arg1 = (UsdInherits *)jarg1; 
  result = (UsdPrim *) &((UsdInherits const *)arg1)->GetPrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdInherits(void * jarg1) {
  UsdInherits *arg1 = (UsdInherits *) 0 ;
  
  arg1 = (UsdInherits *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfReference *arg2 = 0 ;
  UsdListPosition arg3 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfReference const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdListPosition)jarg3; 
  result = (bool)(arg1)->AddReference((SdfReference const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfReference *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfReference const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddReference((SdfReference const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  std::string *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  SdfLayerOffset *arg4 = 0 ;
  UsdListPosition arg5 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg4 = (SdfLayerOffset *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  arg5 = (UsdListPosition)jarg5; 
  result = (bool)(arg1)->AddReference((std::string const &)*arg2,(SdfPath const &)*arg3,(SdfLayerOffset const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  std::string *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  SdfLayerOffset *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg4 = (SdfLayerOffset *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddReference((std::string const &)*arg2,(SdfPath const &)*arg3,(SdfLayerOffset const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  std::string *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddReference((std::string const &)*arg2,(SdfPath const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_5(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayerOffset *arg3 = 0 ;
  UsdListPosition arg4 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayerOffset *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdListPosition)jarg4; 
  result = (bool)(arg1)->AddReference((std::string const &)*arg2,(SdfLayerOffset const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  std::string *arg2 = 0 ;
  SdfLayerOffset *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SdfLayerOffset *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddReference((std::string const &)*arg2,(SdfLayerOffset const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddReference__SWIG_7(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->AddReference((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddInternalReference__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfLayerOffset *arg3 = 0 ;
  UsdListPosition arg4 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerOffset *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdListPosition)jarg4; 
  result = (bool)(arg1)->AddInternalReference((SdfPath const &)*arg2,(SdfLayerOffset const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddInternalReference__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfPath *arg2 = 0 ;
  SdfLayerOffset *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerOffset *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerOffset const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddInternalReference((SdfPath const &)*arg2,(SdfLayerOffset const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_AddInternalReference__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddInternalReference((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_RemoveReference(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfReference *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfReference *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfReference const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoveReference((SdfReference const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_ClearReferences(void * jarg1) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  result = (bool)(arg1)->ClearReferences();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdReferences_SetReferences(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  SdfReferenceVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdReferences *)jarg1; 
  arg2 = (SdfReferenceVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfReferenceVector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetReferences((SdfReferenceVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdReferences_GetPrim__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  UsdPrim *result = 0 ;
  
  arg1 = (UsdReferences *)jarg1; 
  result = (UsdPrim *) &((UsdReferences const *)arg1)->GetPrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdReferences(void * jarg1) {
  UsdReferences *arg1 = (UsdReferences *) 0 ;
  
  arg1 = (UsdReferences *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSpecializes_AddSpecialize__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  SdfPath *arg2 = 0 ;
  UsdListPosition arg3 ;
  bool result;
  
  arg1 = (UsdSpecializes *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdListPosition)jarg3; 
  result = (bool)(arg1)->AddSpecialize((SdfPath const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSpecializes_AddSpecialize__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSpecializes *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddSpecialize((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSpecializes_RemoveSpecialize(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSpecializes *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoveSpecialize((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSpecializes_ClearSpecializes(void * jarg1) {
  unsigned int jresult ;
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  bool result;
  
  arg1 = (UsdSpecializes *)jarg1; 
  result = (bool)(arg1)->ClearSpecializes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSpecializes_SetSpecializes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  SdfPathVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSpecializes *)jarg1; 
  arg2 = (SdfPathVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetSpecializes((SdfPathVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSpecializes_GetPrim__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  UsdPrim *result = 0 ;
  
  arg1 = (UsdSpecializes *)jarg1; 
  result = (UsdPrim *) &((UsdSpecializes const *)arg1)->GetPrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSpecializes(void * jarg1) {
  UsdSpecializes *arg1 = (UsdSpecializes *) 0 ;
  
  arg1 = (UsdSpecializes *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_IsConcrete(void * jarg1) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (bool)((UsdSchemaBase const *)arg1)->IsConcrete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_IsTyped(void * jarg1) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (bool)((UsdSchemaBase const *)arg1)->IsTyped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_IsAPISchema(void * jarg1) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (bool)((UsdSchemaBase const *)arg1)->IsAPISchema();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_IsAppliedAPISchema(void * jarg1) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (bool)((UsdSchemaBase const *)arg1)->IsAppliedAPISchema();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_IsMultipleApplyAPISchema(void * jarg1) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (bool)((UsdSchemaBase const *)arg1)->IsMultipleApplyAPISchema();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetSchemaType(void * jarg1) {
  int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  UsdSchemaType result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (UsdSchemaType)((UsdSchemaBase const *)arg1)->GetSchemaType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSchemaBase__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSchemaBase *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdSchemaBase *)new UsdSchemaBase((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSchemaBase__SWIG_1() {
  void * jresult ;
  UsdSchemaBase *result = 0 ;
  
  result = (UsdSchemaBase *)new UsdSchemaBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSchemaBase__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSchemaBase *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdSchemaBase *)new UsdSchemaBase((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSchemaBase(void * jarg1) {
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetPrim(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = ((UsdSchemaBase const *)arg1)->GetPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetPath(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  SdfPath result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = ((UsdSchemaBase const *)arg1)->GetPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetSchemaClassPrimDefinition(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  SdfPrimSpecHandle result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = ((UsdSchemaBase const *)arg1)->GetSchemaClassPrimDefinition();
  jresult = new SdfPrimSpecHandle((const SdfPrimSpecHandle &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdSchemaBase::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdSchemaBase::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_Equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSchemaBase *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdSchemaBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSchemaBase_Equals((UsdSchemaBase const &)*arg1,(UsdSchemaBase const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdSchemaBase_GetHashCode(void * jarg1) {
  int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  int result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (int)UsdSchemaBase_GetHashCode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSchemaBase__IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdSchemaBase *arg1 = (UsdSchemaBase *) 0 ;
  bool result;
  
  arg1 = (UsdSchemaBase *)jarg1; 
  result = (bool)UsdSchemaBase__IsValid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdTyped__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdTyped *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdTyped *)new UsdTyped((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdTyped__SWIG_1() {
  void * jresult ;
  UsdTyped *result = 0 ;
  
  result = (UsdTyped *)new UsdTyped();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdTyped__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdTyped *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdTyped *)new UsdTyped((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdTyped(void * jarg1) {
  UsdTyped *arg1 = (UsdTyped *) 0 ;
  
  arg1 = (UsdTyped *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTyped_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdTyped::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTyped_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdTyped::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdTyped_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdTyped result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdTyped::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdTyped((const UsdTyped &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPI__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomFaceSetAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomFaceSetAPI *)new UsdGeomFaceSetAPI((UsdPrim const &)*arg1,(TfToken const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPI__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomFaceSetAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomFaceSetAPI *)new UsdGeomFaceSetAPI((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPI__SWIG_2() {
  void * jresult ;
  UsdGeomFaceSetAPI *result = 0 ;
  
  result = (UsdGeomFaceSetAPI *)new UsdGeomFaceSetAPI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPI__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomFaceSetAPI *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomFaceSetAPI *)new UsdGeomFaceSetAPI((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomFaceSetAPI(void * jarg1) {
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceSetName(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->GetFaceSetName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SetIsPartition(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->SetIsPartition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetIsPartition(void * jarg1) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->GetIsPartition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SetFaceCounts__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->SetFaceCounts((VtIntArray const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SetFaceCounts__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->SetFaceCounts((VtIntArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceCounts__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->GetFaceCounts(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceCounts__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->GetFaceCounts(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SetFaceIndices__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->SetFaceIndices((VtIntArray const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SetFaceIndices__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->SetFaceIndices((VtIntArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceIndices__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->GetFaceIndices(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceIndices__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->GetFaceIndices(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SetBindingTargets(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  SdfPathVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (SdfPathVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->SetBindingTargets((SdfPathVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetBindingTargets(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->GetBindingTargets(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_AppendFaceGroup__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  UsdTimeCode *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdTimeCode *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->AppendFaceGroup((VtIntArray const &)*arg2,(SdfPath const &)*arg3,(UsdTimeCode const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_AppendFaceGroup__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  SdfPath *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->AppendFaceGroup((VtIntArray const &)*arg2,(SdfPath const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_AppendFaceGroup__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->AppendFaceGroup((VtIntArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetIsPartitionAttr(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->GetIsPartitionAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateIsPartitionAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateIsPartitionAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateIsPartitionAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateIsPartitionAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateIsPartitionAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateIsPartitionAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceCountsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->GetFaceCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateFaceCountsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateFaceCountsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateFaceCountsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateFaceCountsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateFaceCountsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateFaceCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->GetFaceIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateFaceIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateFaceIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateFaceIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateFaceIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateFaceIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateFaceIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetBindingTargetsRel(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->GetBindingTargetsRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_CreateBindingTargetsRel(void * jarg1) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  result = ((UsdGeomFaceSetAPI const *)arg1)->CreateBindingTargetsRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_Create__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool arg3 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = UsdGeomFaceSetAPI::Create((UsdPrim const &)*arg1,(TfToken const &)*arg2,arg3);
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_Create__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = UsdGeomFaceSetAPI::Create((UsdPrim const &)*arg1,(TfToken const &)*arg2);
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_Create__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool arg3 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = UsdGeomFaceSetAPI::Create((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2,arg3);
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_Create__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = UsdGeomFaceSetAPI::Create((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2);
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceSets__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  std::vector< UsdGeomFaceSetAPI > result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdGeomFaceSetAPI::GetFaceSets((UsdPrim const &)*arg1);
  jresult = new std::vector< UsdGeomFaceSetAPI >((const std::vector< UsdGeomFaceSetAPI > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_GetFaceSets__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  std::vector< UsdGeomFaceSetAPI > result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = UsdGeomFaceSetAPI::GetFaceSets((UsdSchemaBase const &)*arg1);
  jresult = new std::vector< UsdGeomFaceSetAPI >((const std::vector< UsdGeomFaceSetAPI > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_Validate(void * jarg1, char** jarg2) {
  unsigned int jresult ;
  UsdGeomFaceSetAPI *arg1 = (UsdGeomFaceSetAPI *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1; 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  result = (bool)((UsdGeomFaceSetAPI const *)arg1)->Validate(arg2);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_Clear(void * jarg1) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  UsdGeomFaceSetAPI *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (UsdGeomFaceSetAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomFaceSetAPI const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdGeomFaceSetAPI const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  std::vector< UsdGeomFaceSetAPI >::size_type result;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  result = ((std::vector< UsdGeomFaceSetAPI > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  std::vector< UsdGeomFaceSetAPI >::size_type result;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  result = ((std::vector< UsdGeomFaceSetAPI > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  std::vector< UsdGeomFaceSetAPI >::size_type arg2 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (std::vector< UsdGeomFaceSetAPI >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPIVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdGeomFaceSetAPI > *result = 0 ;
  
  result = (std::vector< UsdGeomFaceSetAPI > *)new std::vector< UsdGeomFaceSetAPI >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPIVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdGeomFaceSetAPI > *arg1 = 0 ;
  std::vector< UsdGeomFaceSetAPI > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomFaceSetAPI > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdGeomFaceSetAPI > *)new std::vector< UsdGeomFaceSetAPI >((std::vector< UsdGeomFaceSetAPI > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomFaceSetAPIVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdGeomFaceSetAPI > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdGeomFaceSetAPI > *)new_std_vector_Sl_UsdGeomFaceSetAPI_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdGeomFaceSetAPI_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  UsdGeomFaceSetAPI *result = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdGeomFaceSetAPI *) &std_vector_Sl_UsdGeomFaceSetAPI_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  UsdGeomFaceSetAPI *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomFaceSetAPI *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomFaceSetAPI const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__setitem(arg1,arg2,(UsdGeomFaceSetAPI const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  std::vector< UsdGeomFaceSetAPI > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (std::vector< UsdGeomFaceSetAPI > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomFaceSetAPI > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdGeomFaceSetAPI_Sg__AddRange(arg1,(std::vector< UsdGeomFaceSetAPI > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdGeomFaceSetAPI > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdGeomFaceSetAPI > *)std_vector_Sl_UsdGeomFaceSetAPI_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  UsdGeomFaceSetAPI *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomFaceSetAPI *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomFaceSetAPI const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__Insert(arg1,arg2,(UsdGeomFaceSetAPI const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomFaceSetAPI > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomFaceSetAPI > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomFaceSetAPI > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__InsertRange(arg1,arg2,(std::vector< UsdGeomFaceSetAPI > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomFaceSetAPI *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdGeomFaceSetAPI > *result = 0 ;
  
  arg1 = (UsdGeomFaceSetAPI *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomFaceSetAPI const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdGeomFaceSetAPI > *)std_vector_Sl_UsdGeomFaceSetAPI_Sg__Repeat((UsdGeomFaceSetAPI const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  std_vector_Sl_UsdGeomFaceSetAPI_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPIVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomFaceSetAPI > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomFaceSetAPI > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomFaceSetAPI > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomFaceSetAPI_Sg__SetRange(arg1,arg2,(std::vector< UsdGeomFaceSetAPI > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomFaceSetAPIVector(void * jarg1) {
  std::vector< UsdGeomFaceSetAPI > *arg1 = (std::vector< UsdGeomFaceSetAPI > *) 0 ;
  
  arg1 = (std::vector< UsdGeomFaceSetAPI > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomMotionAPI__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomMotionAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomMotionAPI *)new UsdGeomMotionAPI((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomMotionAPI__SWIG_1() {
  void * jresult ;
  UsdGeomMotionAPI *result = 0 ;
  
  result = (UsdGeomMotionAPI *)new UsdGeomMotionAPI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomMotionAPI__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomMotionAPI *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomMotionAPI *)new UsdGeomMotionAPI((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomMotionAPI(void * jarg1) {
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomMotionAPI::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomMotionAPI::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomMotionAPI result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomMotionAPI::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomMotionAPI((const UsdGeomMotionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_Apply(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomMotionAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdGeomMotionAPI::Apply((UsdPrim const &)*arg1);
  jresult = new UsdGeomMotionAPI((const UsdGeomMotionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_GetVelocityScaleAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  result = ((UsdGeomMotionAPI const *)arg1)->GetVelocityScaleAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_CreateVelocityScaleAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMotionAPI const *)arg1)->CreateVelocityScaleAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_CreateVelocityScaleAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMotionAPI const *)arg1)->CreateVelocityScaleAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_CreateVelocityScaleAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  result = ((UsdGeomMotionAPI const *)arg1)->CreateVelocityScaleAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_ComputeVelocityScale__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  float result;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float)((UsdGeomMotionAPI const *)arg1)->ComputeVelocityScale(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_UsdGeomMotionAPI_ComputeVelocityScale__SWIG_1(void * jarg1) {
  float jresult ;
  UsdGeomMotionAPI *arg1 = (UsdGeomMotionAPI *) 0 ;
  float result;
  
  arg1 = (UsdGeomMotionAPI *)jarg1; 
  result = (float)((UsdGeomMotionAPI const *)arg1)->ComputeVelocityScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPI__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomCollectionAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCollectionAPI *)new UsdGeomCollectionAPI((UsdPrim const &)*arg1,(TfToken const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPI__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCollectionAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCollectionAPI *)new UsdGeomCollectionAPI((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPI__SWIG_2() {
  void * jresult ;
  UsdGeomCollectionAPI *result = 0 ;
  
  result = (UsdGeomCollectionAPI *)new UsdGeomCollectionAPI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPI__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomCollectionAPI *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCollectionAPI *)new UsdGeomCollectionAPI((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCollectionAPI(void * jarg1) {
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetCollectionName(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->GetCollectionName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_SetTargets(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  SdfPathVector *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (SdfPathVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->SetTargets((SdfPathVector const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_SetTargetFaceCounts__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->SetTargetFaceCounts((VtIntArray const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_SetTargetFaceCounts__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->SetTargetFaceCounts((VtIntArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetFaceCounts__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->GetTargetFaceCounts(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetFaceCounts__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->GetTargetFaceCounts(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_SetTargetFaceIndices__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->SetTargetFaceIndices((VtIntArray const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_SetTargetFaceIndices__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->SetTargetFaceIndices((VtIntArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetFaceIndices__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->GetTargetFaceIndices(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetFaceIndices__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->GetTargetFaceIndices(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_AddTarget__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  SdfPath *arg2 = 0 ;
  VtIntArray *arg3 = 0 ;
  UsdTimeCode *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (VtIntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdTimeCode *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->AddTarget((SdfPath const &)*arg2,(VtIntArray const &)*arg3,(UsdTimeCode const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_AddTarget__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  SdfPath *arg2 = 0 ;
  VtIntArray *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  arg3 = (VtIntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->AddTarget((SdfPath const &)*arg2,(VtIntArray const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_AddTarget__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->AddTarget((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetFaceCountsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->GetTargetFaceCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetFaceCountsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetFaceCountsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetFaceCountsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetFaceCountsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetFaceCountsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetFaceCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetFaceIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->GetTargetFaceIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetFaceIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetFaceIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetFaceIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetFaceIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetFaceIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetFaceIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetTargetsRel(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->GetTargetsRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_CreateTargetsRel(void * jarg1) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  result = ((UsdGeomCollectionAPI const *)arg1)->CreateTargetsRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfPathVector *arg3 = 0 ;
  VtIntArray *arg4 = 0 ;
  VtIntArray *arg5 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  arg4 = (VtIntArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg5 = (VtIntArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdPrim const &)*arg1,(TfToken const &)*arg2,(std::vector< SdfPath > const &)*arg3,(VtArray< int > const &)*arg4,(VtArray< int > const &)*arg5);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfPathVector *arg3 = 0 ;
  VtIntArray *arg4 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  arg4 = (VtIntArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdPrim const &)*arg1,(TfToken const &)*arg2,(std::vector< SdfPath > const &)*arg3,(VtArray< int > const &)*arg4);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfPathVector *arg3 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdPrim const &)*arg1,(TfToken const &)*arg2,(std::vector< SdfPath > const &)*arg3);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdPrim const &)*arg1,(TfToken const &)*arg2);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfPathVector *arg3 = 0 ;
  VtIntArray *arg4 = 0 ;
  VtIntArray *arg5 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  arg4 = (VtIntArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg5 = (VtIntArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2,(std::vector< SdfPath > const &)*arg3,(VtArray< int > const &)*arg4,(VtArray< int > const &)*arg5);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfPathVector *arg3 = 0 ;
  VtIntArray *arg4 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  arg4 = (VtIntArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2,(std::vector< SdfPath > const &)*arg3,(VtArray< int > const &)*arg4);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  SdfPathVector *arg3 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2,(std::vector< SdfPath > const &)*arg3);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Create__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::Create((UsdSchemaBase const &)*arg1,(TfToken const &)*arg2);
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetCollections__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  std::vector< UsdGeomCollectionAPI > result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::GetCollections((UsdPrim const &)*arg1);
  jresult = new std::vector< UsdGeomCollectionAPI >((const std::vector< UsdGeomCollectionAPI > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_GetCollections__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  std::vector< UsdGeomCollectionAPI > result;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCollectionAPI::GetCollections((UsdSchemaBase const &)*arg1);
  jresult = new std::vector< UsdGeomCollectionAPI >((const std::vector< UsdGeomCollectionAPI > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_Validate(void * jarg1, char** jarg2) {
  unsigned int jresult ;
  UsdGeomCollectionAPI *arg1 = (UsdGeomCollectionAPI *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1; 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  result = (bool)((UsdGeomCollectionAPI const *)arg1)->Validate(arg2);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_Clear(void * jarg1) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  UsdGeomCollectionAPI *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (UsdGeomCollectionAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomCollectionAPI const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdGeomCollectionAPI const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  std::vector< UsdGeomCollectionAPI >::size_type result;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  result = ((std::vector< UsdGeomCollectionAPI > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  std::vector< UsdGeomCollectionAPI >::size_type result;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  result = ((std::vector< UsdGeomCollectionAPI > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  std::vector< UsdGeomCollectionAPI >::size_type arg2 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (std::vector< UsdGeomCollectionAPI >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPIVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdGeomCollectionAPI > *result = 0 ;
  
  result = (std::vector< UsdGeomCollectionAPI > *)new std::vector< UsdGeomCollectionAPI >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPIVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdGeomCollectionAPI > *arg1 = 0 ;
  std::vector< UsdGeomCollectionAPI > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomCollectionAPI > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdGeomCollectionAPI > *)new std::vector< UsdGeomCollectionAPI >((std::vector< UsdGeomCollectionAPI > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCollectionAPIVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdGeomCollectionAPI > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdGeomCollectionAPI > *)new_std_vector_Sl_UsdGeomCollectionAPI_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  UsdGeomCollectionAPI result;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdGeomCollectionAPI_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdGeomCollectionAPI((const UsdGeomCollectionAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  UsdGeomCollectionAPI *result = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdGeomCollectionAPI *) &std_vector_Sl_UsdGeomCollectionAPI_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  UsdGeomCollectionAPI *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomCollectionAPI *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomCollectionAPI const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__setitem(arg1,arg2,(UsdGeomCollectionAPI const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  std::vector< UsdGeomCollectionAPI > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (std::vector< UsdGeomCollectionAPI > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomCollectionAPI > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdGeomCollectionAPI_Sg__AddRange(arg1,(std::vector< UsdGeomCollectionAPI > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdGeomCollectionAPI > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdGeomCollectionAPI > *)std_vector_Sl_UsdGeomCollectionAPI_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  UsdGeomCollectionAPI *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomCollectionAPI *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomCollectionAPI const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__Insert(arg1,arg2,(UsdGeomCollectionAPI const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomCollectionAPI > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomCollectionAPI > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomCollectionAPI > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__InsertRange(arg1,arg2,(std::vector< UsdGeomCollectionAPI > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomCollectionAPI *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdGeomCollectionAPI > *result = 0 ;
  
  arg1 = (UsdGeomCollectionAPI *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomCollectionAPI const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdGeomCollectionAPI > *)std_vector_Sl_UsdGeomCollectionAPI_Sg__Repeat((UsdGeomCollectionAPI const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  std_vector_Sl_UsdGeomCollectionAPI_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPIVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomCollectionAPI > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomCollectionAPI > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomCollectionAPI > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomCollectionAPI_Sg__SetRange(arg1,arg2,(std::vector< UsdGeomCollectionAPI > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCollectionAPIVector(void * jarg1) {
  std::vector< UsdGeomCollectionAPI > *arg1 = (std::vector< UsdGeomCollectionAPI > *) 0 ;
  
  arg1 = (std::vector< UsdGeomCollectionAPI > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_Clear(void * jarg1) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  UsdGeomPrimvar *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (UsdGeomPrimvar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPrimvar const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdGeomPrimvar const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  std::vector< UsdGeomPrimvar >::size_type result;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  result = ((std::vector< UsdGeomPrimvar > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  std::vector< UsdGeomPrimvar >::size_type result;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  result = ((std::vector< UsdGeomPrimvar > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  std::vector< UsdGeomPrimvar >::size_type arg2 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (std::vector< UsdGeomPrimvar >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPrimvarVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdGeomPrimvar > *result = 0 ;
  
  result = (std::vector< UsdGeomPrimvar > *)new std::vector< UsdGeomPrimvar >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPrimvarVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdGeomPrimvar > *arg1 = 0 ;
  std::vector< UsdGeomPrimvar > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomPrimvar > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdGeomPrimvar > *)new std::vector< UsdGeomPrimvar >((std::vector< UsdGeomPrimvar > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPrimvarVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdGeomPrimvar > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdGeomPrimvar > *)new_std_vector_Sl_UsdGeomPrimvar_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  UsdGeomPrimvar result;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdGeomPrimvar_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  UsdGeomPrimvar *result = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdGeomPrimvar *) &std_vector_Sl_UsdGeomPrimvar_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  UsdGeomPrimvar *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomPrimvar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPrimvar const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__setitem(arg1,arg2,(UsdGeomPrimvar const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  std::vector< UsdGeomPrimvar > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (std::vector< UsdGeomPrimvar > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomPrimvar > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdGeomPrimvar_Sg__AddRange(arg1,(std::vector< UsdGeomPrimvar > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdGeomPrimvar > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdGeomPrimvar > *)std_vector_Sl_UsdGeomPrimvar_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  UsdGeomPrimvar *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomPrimvar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPrimvar const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__Insert(arg1,arg2,(UsdGeomPrimvar const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomPrimvar > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomPrimvar > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomPrimvar > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__InsertRange(arg1,arg2,(std::vector< UsdGeomPrimvar > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdGeomPrimvar > *result = 0 ;
  
  arg1 = (UsdGeomPrimvar *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPrimvar const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdGeomPrimvar > *)std_vector_Sl_UsdGeomPrimvar_Sg__Repeat((UsdGeomPrimvar const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  std_vector_Sl_UsdGeomPrimvar_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvarVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomPrimvar > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomPrimvar > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomPrimvar > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomPrimvar_Sg__SetRange(arg1,arg2,(std::vector< UsdGeomPrimvar > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomPrimvarVector(void * jarg1) {
  std::vector< UsdGeomPrimvar > *arg1 = (std::vector< UsdGeomPrimvar > *) 0 ;
  
  arg1 = (std::vector< UsdGeomPrimvar > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPrimvar__SWIG_0() {
  void * jresult ;
  UsdGeomPrimvar *result = 0 ;
  
  result = (UsdGeomPrimvar *)new UsdGeomPrimvar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPrimvar__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  UsdGeomPrimvar *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPrimvar *)new UsdGeomPrimvar((UsdAttribute const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetInterpolation(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->GetInterpolation();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SetInterpolation(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetInterpolation((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_HasAuthoredInterpolation(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->HasAuthoredInterpolation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetElementSize(void * jarg1) {
  int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  int result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (int)((UsdGeomPrimvar const *)arg1)->GetElementSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SetElementSize(void * jarg1, int jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetElementSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_HasAuthoredElementSize(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->HasAuthoredElementSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_IsPrimvar(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomPrimvar::IsPrimvar((UsdAttribute const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_IsValidInterpolation(void * jarg1) {
  unsigned int jresult ;
  TfToken *arg1 = 0 ;
  bool result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomPrimvar::IsValidInterpolation((TfToken const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetDeclarationInfo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int * jarg5) {
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  SdfValueTypeName *arg3 = (SdfValueTypeName *) 0 ;
  TfToken *arg4 = (TfToken *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (TfToken *)jarg2; 
  arg3 = (SdfValueTypeName *)jarg3; 
  arg4 = (TfToken *)jarg4; 
  arg5 = (int *)jarg5; 
  ((UsdGeomPrimvar const *)arg1)->GetDeclarationInfo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (UsdAttribute *) &((UsdGeomPrimvar const *)arg1)->GetAttr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetName(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (TfToken *) &((UsdGeomPrimvar const *)arg1)->GetName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetPrimvarName(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->GetPrimvarName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_NameContainsNamespaces(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->NameContainsNamespaces();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetBaseName(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->GetBaseName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetNamespace(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->GetNamespace();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SplitName(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->SplitName();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetTypeName(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->GetTypeName();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetTimeSamples(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->GetTimeSamples(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_ValueMightBeTimeVarying(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->ValueMightBeTimeVarying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SetIndices__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  VtIntArray *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->SetIndices((VtIntArray const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SetIndices__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  VtIntArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPrimvar const *)arg1)->SetIndices((VtIntArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetIndices__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->GetIndices(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetIndices__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->GetIndices(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_BlockIndices(void * jarg1) {
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  ((UsdGeomPrimvar const *)arg1)->BlockIndices();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_IsIndexed(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->IsIndexed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->GetIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_CreateIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = ((UsdGeomPrimvar const *)arg1)->CreateIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SetUnauthoredValuesIndex(void * jarg1, int jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->SetUnauthoredValuesIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_GetUnauthoredValuesIndex(void * jarg1) {
  int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  int result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (int)((UsdGeomPrimvar const *)arg1)->GetUnauthoredValuesIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_ComputeFlattened__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  VtValue *arg2 = (VtValue *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (VtValue *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->ComputeFlattened(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_ComputeFlattened__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  VtValue *arg2 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (VtValue *)jarg2; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->ComputeFlattened(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_IsIdTarget(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  result = (bool)((UsdGeomPrimvar const *)arg1)->IsIdTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPrimvar_SetIdTarget(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPrimvar const *)arg1)->SetIdTarget((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomPrimvar(void * jarg1) {
  UsdGeomPrimvar *arg1 = (UsdGeomPrimvar *) 0 ;
  
  arg1 = (UsdGeomPrimvar *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomScope__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomScope *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomScope *)new UsdGeomScope((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomScope__SWIG_1() {
  void * jresult ;
  UsdGeomScope *result = 0 ;
  
  result = (UsdGeomScope *)new UsdGeomScope();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomScope__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomScope *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomScope *)new UsdGeomScope((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomScope(void * jarg1) {
  UsdGeomScope *arg1 = (UsdGeomScope *) 0 ;
  
  arg1 = (UsdGeomScope *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomScope_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomScope::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomScope_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomScope::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomScope_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomScope result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomScope::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomScope((const UsdGeomScope &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomScope_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomScope result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomScope::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomScope((const UsdGeomScope &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomImageable__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomImageable *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomImageable *)new UsdGeomImageable((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomImageable__SWIG_1() {
  void * jresult ;
  UsdGeomImageable *result = 0 ;
  
  result = (UsdGeomImageable *)new UsdGeomImageable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomImageable__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomImageable *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomImageable *)new UsdGeomImageable((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomImageable(void * jarg1) {
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomImageable::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomImageable::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomImageable result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomImageable::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomImageable((const UsdGeomImageable &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetVisibilityAttr(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->GetVisibilityAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreateVisibilityAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomImageable const *)arg1)->CreateVisibilityAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreateVisibilityAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->CreateVisibilityAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreateVisibilityAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->CreateVisibilityAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetPurposeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->GetPurposeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreatePurposeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomImageable const *)arg1)->CreatePurposeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreatePurposeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->CreatePurposeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreatePurposeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->CreatePurposeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetProxyPrimRel(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->GetProxyPrimRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreateProxyPrimRel(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->CreateProxyPrimRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreatePrimvar__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  int arg5 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = ((UsdGeomImageable const *)arg1)->CreatePrimvar((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3,(TfToken const &)*arg4,arg5);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreatePrimvar__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->CreatePrimvar((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3,(TfToken const &)*arg4);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_CreatePrimvar__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->CreatePrimvar((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetPrimvar(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->GetPrimvar((TfToken const &)*arg2);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetPrimvars(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  std::vector< UsdGeomPrimvar > result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->GetPrimvars();
  jresult = new std::vector< UsdGeomPrimvar >((const std::vector< UsdGeomPrimvar > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetAuthoredPrimvars(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  std::vector< UsdGeomPrimvar > result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->GetAuthoredPrimvars();
  jresult = new std::vector< UsdGeomPrimvar >((const std::vector< UsdGeomPrimvar > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_FindInheritedPrimvars(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  std::vector< UsdGeomPrimvar > result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->FindInheritedPrimvars();
  jresult = new std::vector< UsdGeomPrimvar >((const std::vector< UsdGeomPrimvar > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_FindInheritedPrimvar(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->FindInheritedPrimvar((TfToken const &)*arg2);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomImageable_HasPrimvar(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomImageable const *)arg1)->HasPrimvar((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomImageable_HasInheritedPrimvar(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomImageable const *)arg1)->HasInheritedPrimvar((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_GetOrderedPurposeTokens() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomImageable::GetOrderedPurposeTokens();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomImageable_MakeVisible__SWIG_0(void * jarg1, void * jarg2) {
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return ;
  } 
  ((UsdGeomImageable const *)arg1)->MakeVisible((UsdTimeCode const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomImageable_MakeVisible__SWIG_1(void * jarg1) {
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  ((UsdGeomImageable const *)arg1)->MakeVisible();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomImageable_MakeInvisible__SWIG_0(void * jarg1, void * jarg2) {
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return ;
  } 
  ((UsdGeomImageable const *)arg1)->MakeInvisible((UsdTimeCode const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomImageable_MakeInvisible__SWIG_1(void * jarg1) {
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  ((UsdGeomImageable const *)arg1)->MakeInvisible();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeVisibility__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeVisibility((UsdTimeCode const &)*arg2);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeVisibility__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->ComputeVisibility();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputePurpose(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->ComputePurpose();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeProxyPrim__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdPrim *arg2 = (UsdPrim *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdPrim *)jarg2; 
  result = ((UsdGeomImageable const *)arg1)->ComputeProxyPrim(arg2);
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeProxyPrim__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  result = ((UsdGeomImageable const *)arg1)->ComputeProxyPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomImageable_SetProxyPrim__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdPrim *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomImageable const *)arg1)->SetProxyPrim((UsdPrim const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomImageable_SetProxyPrim__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdSchemaBase *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdSchemaBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomImageable const *)arg1)->SetProxyPrim((UsdSchemaBase const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeWorldBound__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfToken *arg5 = 0 ;
  TfToken *arg6 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (TfToken *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg6 = (TfToken *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeWorldBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4,(TfToken const &)*arg5,(TfToken const &)*arg6);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeWorldBound__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfToken *arg5 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (TfToken *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeWorldBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4,(TfToken const &)*arg5);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeWorldBound__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeWorldBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeWorldBound__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeWorldBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeWorldBound__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeWorldBound((UsdTimeCode const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeLocalBound__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfToken *arg5 = 0 ;
  TfToken *arg6 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (TfToken *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg6 = (TfToken *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeLocalBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4,(TfToken const &)*arg5,(TfToken const &)*arg6);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeLocalBound__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfToken *arg5 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (TfToken *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeLocalBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4,(TfToken const &)*arg5);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeLocalBound__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeLocalBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeLocalBound__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeLocalBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeLocalBound__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeLocalBound((UsdTimeCode const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeUntransformedBound__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfToken *arg5 = 0 ;
  TfToken *arg6 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (TfToken *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg6 = (TfToken *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeUntransformedBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4,(TfToken const &)*arg5,(TfToken const &)*arg6);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeUntransformedBound__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  TfToken *arg5 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = (TfToken *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeUntransformedBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4,(TfToken const &)*arg5);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeUntransformedBound__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeUntransformedBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3,(TfToken const &)*arg4);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeUntransformedBound__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeUntransformedBound((UsdTimeCode const &)*arg2,(TfToken const &)*arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeUntransformedBound__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeUntransformedBound((UsdTimeCode const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeLocalToWorldTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeLocalToWorldTransform((UsdTimeCode const &)*arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_ComputeParentToWorldTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomImageable *arg1 = (UsdGeomImageable *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomImageable *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomImageable const *)arg1)->ComputeParentToWorldTransform((UsdTimeCode const &)*arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_Clear(void * jarg1) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  UsdGeomXformOp *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (UsdGeomXformOp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomXformOp const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdGeomXformOp const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  std::vector< UsdGeomXformOp >::size_type result;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  result = ((std::vector< UsdGeomXformOp > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  std::vector< UsdGeomXformOp >::size_type result;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  result = ((std::vector< UsdGeomXformOp > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  std::vector< UsdGeomXformOp >::size_type arg2 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (std::vector< UsdGeomXformOp >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformOpVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdGeomXformOp > *result = 0 ;
  
  result = (std::vector< UsdGeomXformOp > *)new std::vector< UsdGeomXformOp >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformOpVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdGeomXformOp > *arg1 = 0 ;
  std::vector< UsdGeomXformOp > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdGeomXformOp > *)new std::vector< UsdGeomXformOp >((std::vector< UsdGeomXformOp > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformOpVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdGeomXformOp > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdGeomXformOp > *)new_std_vector_Sl_UsdGeomXformOp_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdGeomXformOp_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  UsdGeomXformOp *result = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdGeomXformOp *) &std_vector_Sl_UsdGeomXformOp_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  UsdGeomXformOp *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomXformOp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomXformOp const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__setitem(arg1,arg2,(UsdGeomXformOp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  std::vector< UsdGeomXformOp > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (std::vector< UsdGeomXformOp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdGeomXformOp_Sg__AddRange(arg1,(std::vector< UsdGeomXformOp > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdGeomXformOp > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdGeomXformOp > *)std_vector_Sl_UsdGeomXformOp_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  UsdGeomXformOp *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomXformOp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomXformOp const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__Insert(arg1,arg2,(UsdGeomXformOp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomXformOp > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomXformOp > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__InsertRange(arg1,arg2,(std::vector< UsdGeomXformOp > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformOp *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdGeomXformOp > *result = 0 ;
  
  arg1 = (UsdGeomXformOp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomXformOp const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdGeomXformOp > *)std_vector_Sl_UsdGeomXformOp_Sg__Repeat((UsdGeomXformOp const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  std_vector_Sl_UsdGeomXformOp_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformOpVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomXformOp > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomXformOp > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomXformOp_Sg__SetRange(arg1,arg2,(std::vector< UsdGeomXformOp > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomXformOpVector(void * jarg1) {
  std::vector< UsdGeomXformOp > *arg1 = (std::vector< UsdGeomXformOp > *) 0 ;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformOp__SWIG_0() {
  void * jresult ;
  UsdGeomXformOp *result = 0 ;
  
  result = (UsdGeomXformOp *)new UsdGeomXformOp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformOp__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  bool arg2 ;
  UsdGeomXformOp *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (UsdGeomXformOp *)new UsdGeomXformOp((UsdAttribute const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformOp__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  UsdGeomXformOp *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXformOp *)new UsdGeomXformOp((UsdAttribute const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_IsXformOp__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomXformOp::IsXformOp((UsdAttribute const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_IsXformOp__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  TfToken *arg1 = 0 ;
  bool result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomXformOp::IsXformOp((TfToken const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpTypeToken(int jarg1) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  result = (TfToken *) &UsdGeomXformOp::GetOpTypeToken(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpTypeEnum(void * jarg1) {
  int jresult ;
  TfToken *arg1 = 0 ;
  UsdGeomXformOp::Type result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXformOp::Type)UsdGeomXformOp::GetOpTypeEnum((TfToken const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetPrecisionFromValueTypeName(void * jarg1) {
  int jresult ;
  SdfValueTypeName *arg1 = 0 ;
  UsdGeomXformOp::Precision result;
  
  arg1 = (SdfValueTypeName *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXformOp::Precision)UsdGeomXformOp::GetPrecisionFromValueTypeName((SdfValueTypeName const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetValueTypeName(int jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  UsdGeomXformOp::Precision arg2 ;
  SdfValueTypeName *result = 0 ;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = (SdfValueTypeName *) &UsdGeomXformOp::GetValueTypeName(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpName__SWIG_0(int jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  TfToken *arg2 = 0 ;
  bool arg3 ;
  TfToken result;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = UsdGeomXformOp::GetOpName(arg1,(TfToken const &)*arg2,arg3);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpName__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  TfToken *arg2 = 0 ;
  TfToken result;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = UsdGeomXformOp::GetOpName(arg1,(TfToken const &)*arg2);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpName__SWIG_2(int jarg1) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  TfToken result;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  result = UsdGeomXformOp::GetOpName(arg1);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpType(void * jarg1) {
  int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  UsdGeomXformOp::Type result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (UsdGeomXformOp::Type)((UsdGeomXformOp const *)arg1)->GetOpType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetPrecision(void * jarg1) {
  int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  UsdGeomXformOp::Precision result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (UsdGeomXformOp::Precision)((UsdGeomXformOp const *)arg1)->GetPrecision();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_IsInverseOp(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (bool)((UsdGeomXformOp const *)arg1)->IsInverseOp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpName__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = ((UsdGeomXformOp const *)arg1)->GetOpName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_HasSuffix(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomXformOp const *)arg1)->HasSuffix((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpTransform__SWIG_0(int jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = UsdGeomXformOp::GetOpTransform(arg1,(VtValue const &)*arg2,arg3);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpTransform__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomXformOp::Type arg1 ;
  VtValue *arg2 = 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformOp::Type)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = UsdGeomXformOp::GetOpTransform(arg1,(VtValue const &)*arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetOpTransform__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdGeomXformOp const *)arg1)->GetOpTransform(arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_MightBeTimeVarying(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (bool)((UsdGeomXformOp const *)arg1)->MightBeTimeVarying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetAttr(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (UsdAttribute *) &((UsdGeomXformOp const *)arg1)->GetAttr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (bool)((UsdGeomXformOp const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetName(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = (TfToken *) &((UsdGeomXformOp const *)arg1)->GetName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetBaseName(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = ((UsdGeomXformOp const *)arg1)->GetBaseName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetNamespace(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = ((UsdGeomXformOp const *)arg1)->GetNamespace();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_SplitName(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = ((UsdGeomXformOp const *)arg1)->SplitName();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetTypeName(void * jarg1) {
  void * jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = ((UsdGeomXformOp const *)arg1)->GetTypeName();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetTimeSamples(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)((UsdGeomXformOp const *)arg1)->GetTimeSamples(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_GetNumTimeSamples(void * jarg1) {
  unsigned long jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  size_t result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  result = ((UsdGeomXformOp const *)arg1)->GetNumTimeSamples();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_Set__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)UsdGeomXformOp_Set__SWIG_2((UsdGeomXformOp const *)arg1,(GfMatrix4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformOp_Set__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomXformOp_Set__SWIG_2((UsdGeomXformOp const *)arg1,(GfMatrix4d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomXformOp(void * jarg1) {
  UsdGeomXformOp *arg1 = (UsdGeomXformOp *) 0 ;
  
  arg1 = (UsdGeomXformOp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformable__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomXformable *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXformable *)new UsdGeomXformable((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformable__SWIG_1() {
  void * jresult ;
  UsdGeomXformable *result = 0 ;
  
  result = (UsdGeomXformable *)new UsdGeomXformable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformable__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomXformable *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXformable *)new UsdGeomXformable((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomXformable(void * jarg1) {
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomXformable::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomXformable::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomXformable result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomXformable::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomXformable((const UsdGeomXformable &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetXformOpOrderAttr(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->GetXformOpOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_CreateXformOpOrderAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->CreateXformOpOrderAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_CreateXformOpOrderAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->CreateXformOpOrderAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_CreateXformOpOrderAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->CreateXformOpOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformable_XformQuery__SWIG_0() {
  void * jresult ;
  UsdGeomXformable::XformQuery *result = 0 ;
  
  result = (UsdGeomXformable::XformQuery *)new UsdGeomXformable::XformQuery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformable_XformQuery__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = 0 ;
  UsdGeomXformable::XformQuery *result = 0 ;
  
  arg1 = (UsdGeomXformable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomXformable const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXformable::XformQuery *)new UsdGeomXformable::XformQuery((UsdGeomXformable const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_XformQuery_GetLocalTransformation(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomXformable::XformQuery *arg1 = (UsdGeomXformable::XformQuery *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode const *argp3 ;
  bool result;
  
  arg1 = (UsdGeomXformable::XformQuery *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdGeomXformable::XformQuery const *)arg1)->GetLocalTransformation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_XformQuery_GetResetXformStack(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformable::XformQuery *arg1 = (UsdGeomXformable::XformQuery *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable::XformQuery *)jarg1; 
  result = (bool)((UsdGeomXformable::XformQuery const *)arg1)->GetResetXformStack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_XformQuery_TransformMightBeTimeVarying(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformable::XformQuery *arg1 = (UsdGeomXformable::XformQuery *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable::XformQuery *)jarg1; 
  result = (bool)((UsdGeomXformable::XformQuery const *)arg1)->TransformMightBeTimeVarying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_XformQuery_GetTimeSamples(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformable::XformQuery *arg1 = (UsdGeomXformable::XformQuery *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable::XformQuery *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)((UsdGeomXformable::XformQuery const *)arg1)->GetTimeSamples(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_XformQuery_IsAttributeIncludedInLocalTransform(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformable::XformQuery *arg1 = (UsdGeomXformable::XformQuery *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable::XformQuery *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomXformable::XformQuery const *)arg1)->IsAttributeIncludedInLocalTransform((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomXformable_XformQuery(void * jarg1) {
  UsdGeomXformable::XformQuery *arg1 = (UsdGeomXformable::XformQuery *) 0 ;
  
  arg1 = (UsdGeomXformable::XformQuery *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddXformOp__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Type arg2 ;
  UsdGeomXformOp::Precision arg3 ;
  TfToken *arg4 = 0 ;
  bool arg5 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Type)jarg2; 
  arg3 = (UsdGeomXformOp::Precision)jarg3; 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddXformOp(arg2,arg3,(TfToken const &)*arg4,arg5);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddXformOp__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Type arg2 ;
  UsdGeomXformOp::Precision arg3 ;
  TfToken *arg4 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Type)jarg2; 
  arg3 = (UsdGeomXformOp::Precision)jarg3; 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddXformOp(arg2,arg3,(TfToken const &)*arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddXformOp__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Type arg2 ;
  UsdGeomXformOp::Precision arg3 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Type)jarg2; 
  arg3 = (UsdGeomXformOp::Precision)jarg3; 
  result = ((UsdGeomXformable const *)arg1)->AddXformOp(arg2,arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddXformOp__SWIG_3(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Type arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Type)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddXformOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTranslateOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddTranslateOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTranslateOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddTranslateOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTranslateOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddTranslateOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTranslateOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddTranslateOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddScaleOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddScaleOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddScaleOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddScaleOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddScaleOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddScaleOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddScaleOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddScaleOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXYZOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXYZOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXYZOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXYZOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXYZOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXYZOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXYZOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXYZOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXZYOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXZYOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXZYOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXZYOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXZYOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXZYOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateXZYOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateXZYOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYXZOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYXZOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYXZOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYXZOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYXZOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYXZOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYXZOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYXZOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYZXOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYZXOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYZXOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYZXOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYZXOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYZXOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateYZXOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateYZXOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZXYOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZXYOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZXYOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZXYOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZXYOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZXYOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZXYOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZXYOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZYXOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZYXOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZYXOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZYXOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZYXOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZYXOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddRotateZYXOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddRotateZYXOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddOrientOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddOrientOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddOrientOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddOrientOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddOrientOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddOrientOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddOrientOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddOrientOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTransformOp__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  bool arg4 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((UsdGeomXformable const *)arg1)->AddTransformOp(arg2,(TfToken const &)*arg3,arg4);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTransformOp__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  TfToken *arg3 = 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomXformable const *)arg1)->AddTransformOp(arg2,(TfToken const &)*arg3);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTransformOp__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp::Precision arg2 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (UsdGeomXformOp::Precision)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->AddTransformOp(arg2);
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_AddTransformOp__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->AddTransformOp();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_SetResetXformStack(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((UsdGeomXformable const *)arg1)->SetResetXformStack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetResetXformStack(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = (bool)((UsdGeomXformable const *)arg1)->GetResetXformStack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_SetXformOpOrder__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  std::vector< UsdGeomXformOp > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (std::vector< UsdGeomXformOp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((UsdGeomXformable const *)arg1)->SetXformOpOrder((std::vector< UsdGeomXformOp > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_SetXformOpOrder__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  std::vector< UsdGeomXformOp > *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (std::vector< UsdGeomXformOp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomXformable const *)arg1)->SetXformOpOrder((std::vector< UsdGeomXformOp > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetOrderedXformOps(void * jarg1, unsigned int * jarg2) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::vector< UsdGeomXformOp > result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  *jarg2 = 0; 
  arg2 = (bool *)jarg2; 
  result = ((UsdGeomXformable const *)arg1)->GetOrderedXformOps(arg2);
  jresult = new std::vector< UsdGeomXformOp >((const std::vector< UsdGeomXformOp > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_ClearXformOpOrder(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = (bool)((UsdGeomXformable const *)arg1)->ClearXformOpOrder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_MakeMatrixXform(void * jarg1) {
  void * jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  UsdGeomXformOp result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = ((UsdGeomXformable const *)arg1)->MakeMatrixXform();
  jresult = new UsdGeomXformOp((const UsdGeomXformOp &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_TransformMightBeTimeVarying__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  result = (bool)((UsdGeomXformable const *)arg1)->TransformMightBeTimeVarying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_TransformMightBeTimeVarying__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  std::vector< UsdGeomXformOp > *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (std::vector< UsdGeomXformOp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomXformable const *)arg1)->TransformMightBeTimeVarying((std::vector< UsdGeomXformOp > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetTimeSamples__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)((UsdGeomXformable const *)arg1)->GetTimeSamples(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetTimeSamples__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< UsdGeomXformOp > *arg1 = 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)UsdGeomXformable::GetTimeSamples((std::vector< UsdGeomXformOp > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetTimeSamplesInInterval(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::vector< UsdGeomXformOp > *arg1 = 0 ;
  GfInterval *arg2 = 0 ;
  std::vector< double > *arg3 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< UsdGeomXformOp > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< double > *)jarg3; 
  result = (bool)UsdGeomXformable::GetTimeSamplesInInterval((std::vector< UsdGeomXformOp > const &)*arg1,(GfInterval const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetLocalTransformation__SWIG_0(void * jarg1, void * jarg2, unsigned int * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  bool *arg3 = (bool *) 0 ;
  UsdTimeCode arg4 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  *jarg3 = 0; 
  arg3 = (bool *)jarg3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdGeomXformable const *)arg1)->GetLocalTransformation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetLocalTransformation__SWIG_1(void * jarg1, void * jarg2, unsigned int * jarg3) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  *jarg3 = 0; 
  arg3 = (bool *)jarg3; 
  result = (bool)((UsdGeomXformable const *)arg1)->GetLocalTransformation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetLocalTransformation__SWIG_2(void * jarg1, void * jarg2, unsigned int * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  bool *arg3 = (bool *) 0 ;
  std::vector< UsdGeomXformOp > *arg4 = 0 ;
  UsdTimeCode arg5 ;
  UsdTimeCode const *argp5 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  *jarg3 = 0; 
  arg3 = (bool *)jarg3; 
  arg4 = (std::vector< UsdGeomXformOp > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  argp5 = (UsdTimeCode *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((UsdGeomXformable const *)arg1)->GetLocalTransformation(arg2,arg3,(std::vector< UsdGeomXformOp > const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetLocalTransformation__SWIG_3(void * jarg1, void * jarg2, unsigned int * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomXformable *arg1 = (UsdGeomXformable *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  bool *arg3 = (bool *) 0 ;
  std::vector< UsdGeomXformOp > *arg4 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformable *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  *jarg3 = 0; 
  arg3 = (bool *)jarg3; 
  arg4 = (std::vector< UsdGeomXformOp > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomXformable const *)arg1)->GetLocalTransformation(arg2,arg3,(std::vector< UsdGeomXformOp > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_GetLocalTransformation__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  std::vector< UsdGeomXformOp > *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode const *argp3 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (std::vector< UsdGeomXformOp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomXformOp > const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)UsdGeomXformable::GetLocalTransformation(arg1,(std::vector< UsdGeomXformOp > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformable_IsTransformationAffectedByAttrNamed(void * jarg1) {
  unsigned int jresult ;
  TfToken *arg1 = 0 ;
  bool result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomXformable::IsTransformationAffectedByAttrNamed((TfToken const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXform__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomXform *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXform *)new UsdGeomXform((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXform__SWIG_1() {
  void * jresult ;
  UsdGeomXform *result = 0 ;
  
  result = (UsdGeomXform *)new UsdGeomXform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXform__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomXform *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomXform *)new UsdGeomXform((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomXform(void * jarg1) {
  UsdGeomXform *arg1 = (UsdGeomXform *) 0 ;
  
  arg1 = (UsdGeomXform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXform_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomXform::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXform_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomXform::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXform_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomXform result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomXform::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomXform((const UsdGeomXform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXform_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomXform result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomXform::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomXform((const UsdGeomXform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCamera__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCamera *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCamera *)new UsdGeomCamera((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCamera__SWIG_1() {
  void * jresult ;
  UsdGeomCamera *result = 0 ;
  
  result = (UsdGeomCamera *)new UsdGeomCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCamera__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomCamera *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCamera *)new UsdGeomCamera((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCamera(void * jarg1) {
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomCamera::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomCamera::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCamera result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCamera::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCamera((const UsdGeomCamera &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCamera result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCamera::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCamera((const UsdGeomCamera &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetProjectionAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetProjectionAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateProjectionAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateProjectionAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateProjectionAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateProjectionAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateProjectionAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateProjectionAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetHorizontalApertureAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetHorizontalApertureAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateHorizontalApertureAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateHorizontalApertureAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateHorizontalApertureAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateHorizontalApertureAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateHorizontalApertureAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateHorizontalApertureAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetVerticalApertureAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetVerticalApertureAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateVerticalApertureAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateVerticalApertureAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateVerticalApertureAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateVerticalApertureAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateVerticalApertureAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateVerticalApertureAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetHorizontalApertureOffsetAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetHorizontalApertureOffsetAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateHorizontalApertureOffsetAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateHorizontalApertureOffsetAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateHorizontalApertureOffsetAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateHorizontalApertureOffsetAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateHorizontalApertureOffsetAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateHorizontalApertureOffsetAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetVerticalApertureOffsetAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetVerticalApertureOffsetAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateVerticalApertureOffsetAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateVerticalApertureOffsetAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateVerticalApertureOffsetAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateVerticalApertureOffsetAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateVerticalApertureOffsetAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateVerticalApertureOffsetAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetFocalLengthAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetFocalLengthAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFocalLengthAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateFocalLengthAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFocalLengthAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateFocalLengthAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFocalLengthAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateFocalLengthAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetClippingRangeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetClippingRangeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateClippingRangeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateClippingRangeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateClippingRangeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateClippingRangeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateClippingRangeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateClippingRangeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetClippingPlanesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetClippingPlanesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateClippingPlanesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateClippingPlanesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateClippingPlanesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateClippingPlanesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateClippingPlanesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateClippingPlanesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetFStopAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetFStopAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFStopAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateFStopAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFStopAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateFStopAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFStopAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateFStopAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetFocusDistanceAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetFocusDistanceAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFocusDistanceAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateFocusDistanceAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFocusDistanceAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateFocusDistanceAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateFocusDistanceAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateFocusDistanceAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetStereoRoleAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetStereoRoleAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateStereoRoleAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateStereoRoleAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateStereoRoleAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateStereoRoleAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateStereoRoleAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateStereoRoleAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetShutterOpenAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetShutterOpenAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateShutterOpenAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateShutterOpenAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateShutterOpenAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateShutterOpenAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateShutterOpenAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateShutterOpenAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetShutterCloseAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->GetShutterCloseAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateShutterCloseAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCamera const *)arg1)->CreateShutterCloseAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateShutterCloseAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->CreateShutterCloseAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_CreateShutterCloseAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  result = ((UsdGeomCamera const *)arg1)->CreateShutterCloseAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_GetCamera(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfCamera result;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCamera const *)arg1)->GetCamera((UsdTimeCode const &)*arg2);
  jresult = new GfCamera((const GfCamera &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomCamera_SetFromCamera(void * jarg1, void * jarg2, void * jarg3) {
  UsdGeomCamera *arg1 = (UsdGeomCamera *) 0 ;
  GfCamera *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  
  arg1 = (UsdGeomCamera *)jarg1; 
  arg2 = (GfCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfCamera const & type is null", 0);
    return ;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return ;
  } 
  (arg1)->SetFromCamera((GfCamera const &)*arg2,(UsdTimeCode const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBoundable__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomBoundable *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomBoundable *)new UsdGeomBoundable((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBoundable__SWIG_1() {
  void * jresult ;
  UsdGeomBoundable *result = 0 ;
  
  result = (UsdGeomBoundable *)new UsdGeomBoundable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBoundable__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomBoundable *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomBoundable *)new UsdGeomBoundable((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomBoundable(void * jarg1) {
  UsdGeomBoundable *arg1 = (UsdGeomBoundable *) 0 ;
  
  arg1 = (UsdGeomBoundable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomBoundable::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomBoundable::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomBoundable result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomBoundable::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomBoundable((const UsdGeomBoundable &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_GetExtentAttr(void * jarg1) {
  void * jresult ;
  UsdGeomBoundable *arg1 = (UsdGeomBoundable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBoundable *)jarg1; 
  result = ((UsdGeomBoundable const *)arg1)->GetExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_CreateExtentAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomBoundable *arg1 = (UsdGeomBoundable *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBoundable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomBoundable const *)arg1)->CreateExtentAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_CreateExtentAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBoundable *arg1 = (UsdGeomBoundable *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBoundable *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBoundable const *)arg1)->CreateExtentAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_CreateExtentAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomBoundable *arg1 = (UsdGeomBoundable *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBoundable *)jarg1; 
  result = ((UsdGeomBoundable const *)arg1)->CreateExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_ComputeExtentFromPlugins__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomBoundable *arg1 = 0 ;
  UsdTimeCode *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBoundable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomBoundable const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)UsdGeomBoundable::ComputeExtentFromPlugins((UsdGeomBoundable const &)*arg1,(UsdTimeCode const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_ComputeExtentFromPlugins__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomBoundable *arg1 = 0 ;
  UsdTimeCode *arg2 = 0 ;
  GfMatrix4d *arg3 = 0 ;
  VtVec3fArray *arg4 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBoundable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomBoundable const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg3 = (GfMatrix4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg4 = (VtVec3fArray *)jarg4; 
  result = (bool)UsdGeomBoundable::ComputeExtentFromPlugins((UsdGeomBoundable const &)*arg1,(UsdTimeCode const &)*arg2,(GfMatrix4d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Clear(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Add(void * jarg1, unsigned int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((bool const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBoolVector__SWIG_0() {
  void * jresult ;
  std::vector< bool > *result = 0 ;
  
  result = (std::vector< bool > *)new std::vector< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBoolVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBoolVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< bool > *)new_std_vector_Sl_bool_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__setitem(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_bool_Sg__AddRange(arg1,(std::vector< bool > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__Insert(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__InsertRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_bool_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  int arg2 ;
  bool temp1 ;
  std::vector< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__Repeat((bool const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  std_vector_Sl_bool_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__SetRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Contains(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__IndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__LastIndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBoolVector_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Remove(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomBoolVector(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Clear(void * jarg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Add(void * jarg1, long long jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((long long const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  result = ((std::vector< int64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  result = ((std::vector< int64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomLongVector__SWIG_0() {
  void * jresult ;
  std::vector< int64_t > *result = 0 ;
  
  result = (std::vector< int64_t > *)new std::vector< int64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomLongVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int64_t > *arg1 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int64_t > *)new std::vector< int64_t >((std::vector< int64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomLongVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int64_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int64_t > *)new_std_vector_Sl_int64_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_getitemcopy(void * jarg1, int jarg2) {
  long long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (long long)std_vector_Sl_int64_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_getitem(void * jarg1, int jarg2) {
  long long jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (long long *) &std_vector_Sl_int64_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_setitem(void * jarg1, int jarg2, long long jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int64_t_Sg__setitem(arg1,arg2,(long long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  std::vector< long long > *arg2 = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (std::vector< long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< long long > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int64_t_Sg__AddRange(arg1,(std::vector< long long > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< long long > *result = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< long long > *)std_vector_Sl_int64_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Insert(void * jarg1, int jarg2, long long jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int64_t_Sg__Insert(arg1,arg2,(long long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long > *arg3 = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int64_t_Sg__InsertRange(arg1,arg2,(std::vector< long long > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int64_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int64_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Repeat(long long jarg1, int jarg2) {
  void * jresult ;
  long long *arg1 = 0 ;
  int arg2 ;
  long long temp1 ;
  std::vector< long long > *result = 0 ;
  
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long long > *)std_vector_Sl_int64_t_Sg__Repeat((long long const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  std_vector_Sl_int64_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int64_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  int arg2 ;
  std::vector< long long > *arg3 = 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int64_t_Sg__SetRange(arg1,arg2,(std::vector< long long > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Contains(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  bool result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int64_t_Sg__Contains(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_IndexOf(void * jarg1, long long jarg2) {
  int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  int result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int64_t_Sg__IndexOf(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_LastIndexOf(void * jarg1, long long jarg2) {
  int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  int result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int64_t_Sg__LastIndexOf(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomLongVector_Remove(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  bool result;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int64_t_Sg__Remove(arg1,(long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomLongVector(void * jarg1) {
  std::vector< int64_t > *arg1 = (std::vector< int64_t > *) 0 ;
  
  arg1 = (std::vector< int64_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPointInstancer__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomPointInstancer *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPointInstancer *)new UsdGeomPointInstancer((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPointInstancer__SWIG_1() {
  void * jresult ;
  UsdGeomPointInstancer *result = 0 ;
  
  result = (UsdGeomPointInstancer *)new UsdGeomPointInstancer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPointInstancer__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomPointInstancer *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPointInstancer *)new UsdGeomPointInstancer((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomPointInstancer(void * jarg1) {
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomPointInstancer::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomPointInstancer::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomPointInstancer result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomPointInstancer::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomPointInstancer((const UsdGeomPointInstancer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomPointInstancer result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomPointInstancer::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomPointInstancer((const UsdGeomPointInstancer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetProtoIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetProtoIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateProtoIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateProtoIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateProtoIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateProtoIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateProtoIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateProtoIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetIdsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetIdsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateIdsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateIdsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateIdsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateIdsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateIdsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateIdsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetPositionsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetPositionsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreatePositionsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreatePositionsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreatePositionsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreatePositionsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreatePositionsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreatePositionsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetOrientationsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetOrientationsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateOrientationsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateOrientationsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateOrientationsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateOrientationsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateOrientationsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateOrientationsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetScalesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetScalesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateScalesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateScalesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateScalesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateScalesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateScalesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateScalesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetVelocitiesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetVelocitiesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateVelocitiesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateVelocitiesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateVelocitiesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateVelocitiesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateVelocitiesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateVelocitiesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetAngularVelocitiesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetAngularVelocitiesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateAngularVelocitiesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateAngularVelocitiesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateAngularVelocitiesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateAngularVelocitiesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateAngularVelocitiesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateAngularVelocitiesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetInvisibleIdsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetInvisibleIdsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateInvisibleIdsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateInvisibleIdsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateInvisibleIdsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateInvisibleIdsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreateInvisibleIdsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreateInvisibleIdsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_GetPrototypesRel(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->GetPrototypesRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_CreatePrototypesRel(void * jarg1) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = ((UsdGeomPointInstancer const *)arg1)->CreatePrototypesRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ActivateId(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  int64_t arg2 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ActivateId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ActivateIds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtInt64Array *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtInt64Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtInt64Array const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ActivateIds((VtInt64Array const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ActivateAllIds(void * jarg1) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ActivateAllIds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_DeactivateId(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  int64_t arg2 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->DeactivateId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_DeactivateIds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtInt64Array *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtInt64Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtInt64Array const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->DeactivateIds((VtInt64Array const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_VisId(void * jarg1, long long jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  int64_t arg2 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->VisId(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_VisIds(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtInt64Array *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtInt64Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtInt64Array const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->VisIds((VtInt64Array const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_VisAllIds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->VisAllIds((UsdTimeCode const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_InvisId(void * jarg1, long long jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  int64_t arg2 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->InvisId(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_InvisIds(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtInt64Array *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtInt64Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtInt64Array const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->InvisIds((VtInt64Array const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeMaskAtTime__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdTimeCode arg2 ;
  VtInt64Array *arg3 = (VtInt64Array *) 0 ;
  UsdTimeCode *argp2 ;
  std::vector< bool > result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (VtInt64Array *)jarg3; 
  result = ((UsdGeomPointInstancer const *)arg1)->ComputeMaskAtTime(arg2,(VtInt64Array const *)arg3);
  jresult = new std::vector< bool >((const std::vector< bool > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeMaskAtTime__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  std::vector< bool > result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdGeomPointInstancer const *)arg1)->ComputeMaskAtTime(arg2);
  jresult = new std::vector< bool >((const std::vector< bool > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTime__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtArray< GfMatrix4d > *arg2 = (VtArray< GfMatrix4d > *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode arg4 ;
  UsdGeomPointInstancer::ProtoXformInclusion arg5 ;
  UsdGeomPointInstancer::MaskApplication arg6 ;
  UsdTimeCode const *argp3 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtArray< GfMatrix4d > *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (UsdGeomPointInstancer::ProtoXformInclusion)jarg5; 
  arg6 = (UsdGeomPointInstancer::MaskApplication)jarg6; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeInstanceTransformsAtTime(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTime__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtArray< GfMatrix4d > *arg2 = (VtArray< GfMatrix4d > *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode arg4 ;
  UsdGeomPointInstancer::ProtoXformInclusion arg5 ;
  UsdTimeCode const *argp3 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtArray< GfMatrix4d > *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (UsdGeomPointInstancer::ProtoXformInclusion)jarg5; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeInstanceTransformsAtTime(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTime__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtArray< GfMatrix4d > *arg2 = (VtArray< GfMatrix4d > *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode arg4 ;
  UsdTimeCode const *argp3 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtArray< GfMatrix4d > *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeInstanceTransformsAtTime(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTimes__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  std::vector< VtArray< GfMatrix4d > > *arg2 = (std::vector< VtArray< GfMatrix4d > > *) 0 ;
  std::vector< UsdTimeCode > *arg3 = 0 ;
  UsdTimeCode arg4 ;
  UsdGeomPointInstancer::ProtoXformInclusion arg5 ;
  UsdGeomPointInstancer::MaskApplication arg6 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (std::vector< VtArray< GfMatrix4d > > *)jarg2; 
  arg3 = (std::vector< UsdTimeCode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdTimeCode > const & type is null", 0);
    return 0;
  } 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (UsdGeomPointInstancer::ProtoXformInclusion)jarg5; 
  arg6 = (UsdGeomPointInstancer::MaskApplication)jarg6; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeInstanceTransformsAtTimes(arg2,(std::vector< UsdTimeCode > const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTimes__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  std::vector< VtArray< GfMatrix4d > > *arg2 = (std::vector< VtArray< GfMatrix4d > > *) 0 ;
  std::vector< UsdTimeCode > *arg3 = 0 ;
  UsdTimeCode arg4 ;
  UsdGeomPointInstancer::ProtoXformInclusion arg5 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (std::vector< VtArray< GfMatrix4d > > *)jarg2; 
  arg3 = (std::vector< UsdTimeCode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdTimeCode > const & type is null", 0);
    return 0;
  } 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (UsdGeomPointInstancer::ProtoXformInclusion)jarg5; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeInstanceTransformsAtTimes(arg2,(std::vector< UsdTimeCode > const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTimes__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  std::vector< VtArray< GfMatrix4d > > *arg2 = (std::vector< VtArray< GfMatrix4d > > *) 0 ;
  std::vector< UsdTimeCode > *arg3 = 0 ;
  UsdTimeCode arg4 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (std::vector< VtArray< GfMatrix4d > > *)jarg2; 
  arg3 = (std::vector< UsdTimeCode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdTimeCode > const & type is null", 0);
    return 0;
  } 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeInstanceTransformsAtTimes(arg2,(std::vector< UsdTimeCode > const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTime__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, float jarg14) {
  unsigned int jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  UsdStageWeakPtr *arg2 = 0 ;
  UsdTimeCode arg3 ;
  VtIntArray *arg4 = 0 ;
  VtVec3fArray *arg5 = 0 ;
  VtVec3fArray *arg6 = 0 ;
  UsdTimeCode arg7 ;
  VtVec3fArray *arg8 = 0 ;
  VtQuathArray *arg9 = 0 ;
  VtVec3fArray *arg10 = 0 ;
  UsdTimeCode arg11 ;
  SdfPathVector *arg12 = 0 ;
  std::vector< bool > *arg13 = 0 ;
  float arg14 ;
  UsdTimeCode *argp3 ;
  UsdTimeCode *argp7 ;
  UsdTimeCode *argp11 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (UsdStageWeakPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageWeakPtr & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (VtIntArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg5 = (VtVec3fArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg6 = (VtVec3fArray *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  argp7 = (UsdTimeCode *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (VtVec3fArray *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg9 = (VtQuathArray *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtQuathArray const & type is null", 0);
    return 0;
  } 
  arg10 = (VtVec3fArray *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  argp11 = (UsdTimeCode *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg11 = *argp11; 
  arg12 = (SdfPathVector *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  arg13 = (std::vector< bool > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  arg14 = (float)jarg14; 
  result = (bool)UsdGeomPointInstancer::ComputeInstanceTransformsAtTime(arg1,*arg2,arg3,(VtArray< int > const &)*arg4,(VtArray< GfVec3f > const &)*arg5,(VtArray< GfVec3f > const &)*arg6,arg7,(VtArray< GfVec3f > const &)*arg8,(VtArray< GfQuath > const &)*arg9,(VtArray< GfVec3f > const &)*arg10,arg11,(std::vector< SdfPath > const &)*arg12,(std::vector< bool > const &)*arg13,arg14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeInstanceTransformsAtTime__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13) {
  unsigned int jresult ;
  VtArray< GfMatrix4d > *arg1 = (VtArray< GfMatrix4d > *) 0 ;
  UsdStageWeakPtr *arg2 = 0 ;
  UsdTimeCode arg3 ;
  VtIntArray *arg4 = 0 ;
  VtVec3fArray *arg5 = 0 ;
  VtVec3fArray *arg6 = 0 ;
  UsdTimeCode arg7 ;
  VtVec3fArray *arg8 = 0 ;
  VtQuathArray *arg9 = 0 ;
  VtVec3fArray *arg10 = 0 ;
  UsdTimeCode arg11 ;
  SdfPathVector *arg12 = 0 ;
  std::vector< bool > *arg13 = 0 ;
  UsdTimeCode *argp3 ;
  UsdTimeCode *argp7 ;
  UsdTimeCode *argp11 ;
  bool result;
  
  arg1 = (VtArray< GfMatrix4d > *)jarg1; 
  arg2 = (UsdStageWeakPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStageWeakPtr & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (VtIntArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg5 = (VtVec3fArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg6 = (VtVec3fArray *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  argp7 = (UsdTimeCode *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (VtVec3fArray *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg9 = (VtQuathArray *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtQuathArray const & type is null", 0);
    return 0;
  } 
  arg10 = (VtVec3fArray *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  argp11 = (UsdTimeCode *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg11 = *argp11; 
  arg12 = (SdfPathVector *)jarg12;
  if (!arg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  arg13 = (std::vector< bool > *)jarg13;
  if (!arg13) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomPointInstancer::ComputeInstanceTransformsAtTime(arg1,*arg2,arg3,(VtArray< int > const &)*arg4,(VtArray< GfVec3f > const &)*arg5,(VtArray< GfVec3f > const &)*arg6,arg7,(VtArray< GfVec3f > const &)*arg8,(VtArray< GfQuath > const &)*arg9,(VtArray< GfVec3f > const &)*arg10,arg11,(std::vector< SdfPath > const &)*arg12,(std::vector< bool > const &)*arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeExtentAtTime__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode arg4 ;
  UsdTimeCode const *argp3 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeExtentAtTime(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeExtentAtTime__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode arg4 ;
  GfMatrix4d *arg5 = 0 ;
  UsdTimeCode const *argp3 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (GfMatrix4d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeExtentAtTime(arg2,arg3,arg4,(GfMatrix4d const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeExtentAtTimes__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  std::vector< VtVec3fArray > *arg2 = (std::vector< VtVec3fArray > *) 0 ;
  std::vector< UsdTimeCode > *arg3 = 0 ;
  UsdTimeCode arg4 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (std::vector< VtVec3fArray > *)jarg2; 
  arg3 = (std::vector< UsdTimeCode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdTimeCode > const & type is null", 0);
    return 0;
  } 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeExtentAtTimes(arg2,(std::vector< UsdTimeCode > const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_ComputeExtentAtTimes__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdGeomPointInstancer *arg1 = (UsdGeomPointInstancer *) 0 ;
  std::vector< VtVec3fArray > *arg2 = (std::vector< VtVec3fArray > *) 0 ;
  std::vector< UsdTimeCode > *arg3 = 0 ;
  UsdTimeCode arg4 ;
  GfMatrix4d *arg5 = 0 ;
  UsdTimeCode const *argp4 ;
  bool result;
  
  arg1 = (UsdGeomPointInstancer *)jarg1; 
  arg2 = (std::vector< VtVec3fArray > *)jarg2; 
  arg3 = (std::vector< UsdTimeCode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdTimeCode > const & type is null", 0);
    return 0;
  } 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (GfMatrix4d *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomPointInstancer const *)arg1)->ComputeExtentAtTimes(arg2,(std::vector< UsdTimeCode > const &)*arg3,arg4,(GfMatrix4d const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancerApplyNewStyleListOps() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)UsdGeomPointInstancerApplyNewStyleListOps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancerSetOrMergeOverOp(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  std::vector< int64_t > *arg1 = 0 ;
  SdfListOpType arg2 ;
  UsdPrim *arg3 = 0 ;
  TfToken *arg4 = 0 ;
  bool result;
  
  arg1 = (std::vector< int64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int64_t > const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfListOpType)jarg2; 
  arg3 = (UsdPrim *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg4 = (TfToken *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomPointInstancerSetOrMergeOverOp((std::vector< long long > const &)*arg1,arg2,(UsdPrim const &)*arg3,(TfToken const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomGprim__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomGprim *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomGprim *)new UsdGeomGprim((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomGprim__SWIG_1() {
  void * jresult ;
  UsdGeomGprim *result = 0 ;
  
  result = (UsdGeomGprim *)new UsdGeomGprim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomGprim__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomGprim *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomGprim *)new UsdGeomGprim((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomGprim(void * jarg1) {
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomGprim::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomGprim::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomGprim result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomGprim::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomGprim((const UsdGeomGprim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetDisplayColorAttr(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->GetDisplayColorAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayColorAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayColorAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayColorAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayColorAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayColorAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayColorAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetDisplayOpacityAttr(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->GetDisplayOpacityAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayOpacityAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayOpacityAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayOpacityAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayOpacityAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayOpacityAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayOpacityAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetDoubleSidedAttr(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->GetDoubleSidedAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDoubleSidedAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomGprim const *)arg1)->CreateDoubleSidedAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDoubleSidedAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomGprim const *)arg1)->CreateDoubleSidedAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDoubleSidedAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->CreateDoubleSidedAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetOrientationAttr(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->GetOrientationAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateOrientationAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomGprim const *)arg1)->CreateOrientationAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateOrientationAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomGprim const *)arg1)->CreateOrientationAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateOrientationAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->CreateOrientationAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetDisplayColorPrimvar(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->GetDisplayColorPrimvar();
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayColorPrimvar__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  TfToken *arg2 = 0 ;
  int arg3 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayColorPrimvar((TfToken const &)*arg2,arg3);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayColorPrimvar__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayColorPrimvar((TfToken const &)*arg2);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayColorPrimvar__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayColorPrimvar();
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_GetDisplayOpacityPrimvar(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->GetDisplayOpacityPrimvar();
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayOpacityPrimvar__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  TfToken *arg2 = 0 ;
  int arg3 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayOpacityPrimvar((TfToken const &)*arg2,arg3);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayOpacityPrimvar__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  TfToken *arg2 = 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayOpacityPrimvar((TfToken const &)*arg2);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_CreateDisplayOpacityPrimvar__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomGprim *arg1 = (UsdGeomGprim *) 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdGeomGprim *)jarg1; 
  result = ((UsdGeomGprim const *)arg1)->CreateDisplayOpacityPrimvar();
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCapsule__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCapsule *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCapsule *)new UsdGeomCapsule((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCapsule__SWIG_1() {
  void * jresult ;
  UsdGeomCapsule *result = 0 ;
  
  result = (UsdGeomCapsule *)new UsdGeomCapsule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCapsule__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomCapsule *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCapsule *)new UsdGeomCapsule((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCapsule(void * jarg1) {
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomCapsule::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomCapsule::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCapsule result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCapsule::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCapsule((const UsdGeomCapsule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCapsule result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCapsule::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCapsule((const UsdGeomCapsule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_GetHeightAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->GetHeightAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateHeightAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCapsule const *)arg1)->CreateHeightAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateHeightAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCapsule const *)arg1)->CreateHeightAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateHeightAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->CreateHeightAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_GetRadiusAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->GetRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateRadiusAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCapsule const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateRadiusAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCapsule const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateRadiusAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->CreateRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_GetAxisAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->GetAxisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateAxisAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCapsule const *)arg1)->CreateAxisAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateAxisAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCapsule const *)arg1)->CreateAxisAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateAxisAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->CreateAxisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_GetExtentAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->GetExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateExtentAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCapsule const *)arg1)->CreateExtentAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateExtentAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCapsule const *)arg1)->CreateExtentAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_CreateExtentAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCapsule *arg1 = (UsdGeomCapsule *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCapsule *)jarg1; 
  result = ((UsdGeomCapsule const *)arg1)->CreateExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_ComputeExtent__SWIG_0(double jarg1, double jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  TfToken *arg3 = 0 ;
  VtVec3fArray *arg4 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtVec3fArray *)jarg4; 
  result = (bool)UsdGeomCapsule::ComputeExtent(arg1,arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_ComputeExtent__SWIG_1(double jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  TfToken *arg3 = 0 ;
  GfMatrix4d *arg4 = 0 ;
  VtVec3fArray *arg5 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (GfMatrix4d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg5 = (VtVec3fArray *)jarg5; 
  result = (bool)UsdGeomCapsule::ComputeExtent(arg1,arg2,(TfToken const &)*arg3,(GfMatrix4d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCone__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCone *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCone *)new UsdGeomCone((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCone__SWIG_1() {
  void * jresult ;
  UsdGeomCone *result = 0 ;
  
  result = (UsdGeomCone *)new UsdGeomCone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCone__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomCone *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCone *)new UsdGeomCone((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCone(void * jarg1) {
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  
  arg1 = (UsdGeomCone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomCone::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomCone::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCone result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCone::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCone((const UsdGeomCone &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCone result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCone::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCone((const UsdGeomCone &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_GetHeightAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->GetHeightAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateHeightAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCone const *)arg1)->CreateHeightAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateHeightAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCone const *)arg1)->CreateHeightAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateHeightAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->CreateHeightAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_GetRadiusAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->GetRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateRadiusAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCone const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateRadiusAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCone const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateRadiusAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->CreateRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_GetAxisAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->GetAxisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateAxisAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCone const *)arg1)->CreateAxisAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateAxisAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCone const *)arg1)->CreateAxisAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateAxisAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->CreateAxisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_GetExtentAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->GetExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateExtentAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCone const *)arg1)->CreateExtentAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateExtentAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCone const *)arg1)->CreateExtentAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCone_CreateExtentAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCone *arg1 = (UsdGeomCone *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCone *)jarg1; 
  result = ((UsdGeomCone const *)arg1)->CreateExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCone_ComputeExtent__SWIG_0(double jarg1, double jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  TfToken *arg3 = 0 ;
  VtVec3fArray *arg4 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtVec3fArray *)jarg4; 
  result = (bool)UsdGeomCone::ComputeExtent(arg1,arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCone_ComputeExtent__SWIG_1(double jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  TfToken *arg3 = 0 ;
  GfMatrix4d *arg4 = 0 ;
  VtVec3fArray *arg5 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (GfMatrix4d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg5 = (VtVec3fArray *)jarg5; 
  result = (bool)UsdGeomCone::ComputeExtent(arg1,arg2,(TfToken const &)*arg3,(GfMatrix4d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCube__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCube *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCube *)new UsdGeomCube((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCube__SWIG_1() {
  void * jresult ;
  UsdGeomCube *result = 0 ;
  
  result = (UsdGeomCube *)new UsdGeomCube();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCube__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomCube *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCube *)new UsdGeomCube((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCube(void * jarg1) {
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  
  arg1 = (UsdGeomCube *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomCube::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomCube::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCube result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCube::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCube((const UsdGeomCube &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCube result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCube::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCube((const UsdGeomCube &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_GetSizeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  result = ((UsdGeomCube const *)arg1)->GetSizeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_CreateSizeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCube const *)arg1)->CreateSizeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_CreateSizeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCube const *)arg1)->CreateSizeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_CreateSizeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  result = ((UsdGeomCube const *)arg1)->CreateSizeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_GetExtentAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  result = ((UsdGeomCube const *)arg1)->GetExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_CreateExtentAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCube const *)arg1)->CreateExtentAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_CreateExtentAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCube const *)arg1)->CreateExtentAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCube_CreateExtentAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCube *arg1 = (UsdGeomCube *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCube *)jarg1; 
  result = ((UsdGeomCube const *)arg1)->CreateExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCube_ComputeExtent__SWIG_0(double jarg1, void * jarg2) {
  unsigned int jresult ;
  double arg1 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  result = (bool)UsdGeomCube::ComputeExtent(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCube_ComputeExtent__SWIG_1(double jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  double arg1 ;
  GfMatrix4d *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)UsdGeomCube::ComputeExtent(arg1,(GfMatrix4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCylinder__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCylinder *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCylinder *)new UsdGeomCylinder((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCylinder__SWIG_1() {
  void * jresult ;
  UsdGeomCylinder *result = 0 ;
  
  result = (UsdGeomCylinder *)new UsdGeomCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCylinder__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomCylinder *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCylinder *)new UsdGeomCylinder((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCylinder(void * jarg1) {
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomCylinder::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomCylinder::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCylinder result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCylinder::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCylinder((const UsdGeomCylinder &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCylinder result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCylinder::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCylinder((const UsdGeomCylinder &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_GetHeightAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->GetHeightAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateHeightAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCylinder const *)arg1)->CreateHeightAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateHeightAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCylinder const *)arg1)->CreateHeightAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateHeightAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->CreateHeightAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_GetRadiusAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->GetRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateRadiusAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCylinder const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateRadiusAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCylinder const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateRadiusAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->CreateRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_GetAxisAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->GetAxisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateAxisAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCylinder const *)arg1)->CreateAxisAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateAxisAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCylinder const *)arg1)->CreateAxisAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateAxisAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->CreateAxisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_GetExtentAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->GetExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateExtentAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCylinder const *)arg1)->CreateExtentAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateExtentAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCylinder const *)arg1)->CreateExtentAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_CreateExtentAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCylinder *arg1 = (UsdGeomCylinder *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCylinder *)jarg1; 
  result = ((UsdGeomCylinder const *)arg1)->CreateExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_ComputeExtent__SWIG_0(double jarg1, double jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  TfToken *arg3 = 0 ;
  VtVec3fArray *arg4 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (VtVec3fArray *)jarg4; 
  result = (bool)UsdGeomCylinder::ComputeExtent(arg1,arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_ComputeExtent__SWIG_1(double jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  double arg1 ;
  double arg2 ;
  TfToken *arg3 = 0 ;
  GfMatrix4d *arg4 = 0 ;
  VtVec3fArray *arg5 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (GfMatrix4d *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg5 = (VtVec3fArray *)jarg5; 
  result = (bool)UsdGeomCylinder::ComputeExtent(arg1,arg2,(TfToken const &)*arg3,(GfMatrix4d const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_USDGEOM_CYLINDER_API_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomSphere__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomSphere *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomSphere *)new UsdGeomSphere((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomSphere__SWIG_1() {
  void * jresult ;
  UsdGeomSphere *result = 0 ;
  
  result = (UsdGeomSphere *)new UsdGeomSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomSphere__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomSphere *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomSphere *)new UsdGeomSphere((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomSphere(void * jarg1) {
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomSphere::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomSphere::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomSphere result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomSphere::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomSphere((const UsdGeomSphere &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomSphere result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomSphere::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomSphere((const UsdGeomSphere &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_GetRadiusAttr(void * jarg1) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  result = ((UsdGeomSphere const *)arg1)->GetRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_CreateRadiusAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomSphere const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_CreateRadiusAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomSphere const *)arg1)->CreateRadiusAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_CreateRadiusAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  result = ((UsdGeomSphere const *)arg1)->CreateRadiusAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_GetExtentAttr(void * jarg1) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  result = ((UsdGeomSphere const *)arg1)->GetExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_CreateExtentAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomSphere const *)arg1)->CreateExtentAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_CreateExtentAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomSphere const *)arg1)->CreateExtentAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_CreateExtentAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomSphere *arg1 = (UsdGeomSphere *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomSphere *)jarg1; 
  result = ((UsdGeomSphere const *)arg1)->CreateExtentAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomSphere_ComputeExtent__SWIG_0(double jarg1, void * jarg2) {
  unsigned int jresult ;
  double arg1 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  result = (bool)UsdGeomSphere::ComputeExtent(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomSphere_ComputeExtent__SWIG_1(double jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  double arg1 ;
  GfMatrix4d *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (double)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)UsdGeomSphere::ComputeExtent(arg1,(GfMatrix4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPointBased__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomPointBased *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPointBased *)new UsdGeomPointBased((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPointBased__SWIG_1() {
  void * jresult ;
  UsdGeomPointBased *result = 0 ;
  
  result = (UsdGeomPointBased *)new UsdGeomPointBased();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPointBased__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomPointBased *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPointBased *)new UsdGeomPointBased((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomPointBased(void * jarg1) {
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomPointBased::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomPointBased::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomPointBased result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomPointBased::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomPointBased((const UsdGeomPointBased &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_GetPointsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->GetPointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreatePointsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointBased const *)arg1)->CreatePointsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreatePointsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointBased const *)arg1)->CreatePointsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreatePointsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->CreatePointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_GetVelocitiesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->GetVelocitiesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreateVelocitiesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointBased const *)arg1)->CreateVelocitiesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreateVelocitiesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointBased const *)arg1)->CreateVelocitiesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreateVelocitiesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->CreateVelocitiesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_GetNormalsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->GetNormalsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreateNormalsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPointBased const *)arg1)->CreateNormalsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreateNormalsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPointBased const *)arg1)->CreateNormalsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_CreateNormalsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->CreateNormalsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_GetNormalsInterpolation(void * jarg1) {
  void * jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  result = ((UsdGeomPointBased const *)arg1)->GetNormalsInterpolation();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_SetNormalsInterpolation(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPointBased *arg1 = (UsdGeomPointBased *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPointBased *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetNormalsInterpolation((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_ComputeExtent__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtVec3fArray *)jarg2; 
  result = (bool)UsdGeomPointBased::ComputeExtent((VtArray< GfVec3f > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_ComputeExtent__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  GfMatrix4d *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)UsdGeomPointBased::ComputeExtent((VtArray< GfVec3f > const &)*arg1,(GfMatrix4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPoints__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomPoints *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPoints *)new UsdGeomPoints((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPoints__SWIG_1() {
  void * jresult ;
  UsdGeomPoints *result = 0 ;
  
  result = (UsdGeomPoints *)new UsdGeomPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomPoints__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomPoints *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomPoints *)new UsdGeomPoints((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomPoints(void * jarg1) {
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomPoints::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomPoints::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomPoints result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomPoints::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomPoints((const UsdGeomPoints &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomPoints result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomPoints::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomPoints((const UsdGeomPoints &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_GetWidthsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  result = ((UsdGeomPoints const *)arg1)->GetWidthsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_CreateWidthsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPoints const *)arg1)->CreateWidthsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_CreateWidthsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPoints const *)arg1)->CreateWidthsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_CreateWidthsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  result = ((UsdGeomPoints const *)arg1)->CreateWidthsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_GetIdsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  result = ((UsdGeomPoints const *)arg1)->GetIdsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_CreateIdsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomPoints const *)arg1)->CreateIdsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_CreateIdsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomPoints const *)arg1)->CreateIdsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_CreateIdsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  result = ((UsdGeomPoints const *)arg1)->CreateIdsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_GetWidthsInterpolation(void * jarg1) {
  void * jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  result = ((UsdGeomPoints const *)arg1)->GetWidthsInterpolation();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPoints_SetWidthsInterpolation(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomPoints *arg1 = (UsdGeomPoints *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomPoints *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetWidthsInterpolation((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPoints_ComputeExtent__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  VtFloatArray *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtFloatArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtFloatArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)UsdGeomPoints::ComputeExtent((VtArray< GfVec3f > const &)*arg1,(VtArray< float > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomPoints_ComputeExtent__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  VtFloatArray *arg2 = 0 ;
  GfMatrix4d *arg3 = 0 ;
  VtVec3fArray *arg4 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtFloatArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtFloatArray const & type is null", 0);
    return 0;
  } 
  arg3 = (GfMatrix4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg4 = (VtVec3fArray *)jarg4; 
  result = (bool)UsdGeomPoints::ComputeExtent((VtArray< GfVec3f > const &)*arg1,(VtArray< float > const &)*arg2,(GfMatrix4d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCurves__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomCurves *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCurves *)new UsdGeomCurves((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCurves__SWIG_1() {
  void * jresult ;
  UsdGeomCurves *result = 0 ;
  
  result = (UsdGeomCurves *)new UsdGeomCurves();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomCurves__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomCurves *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomCurves *)new UsdGeomCurves((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomCurves(void * jarg1) {
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomCurves::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomCurves::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomCurves result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomCurves::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomCurves((const UsdGeomCurves &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_GetCurveVertexCountsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  result = ((UsdGeomCurves const *)arg1)->GetCurveVertexCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_CreateCurveVertexCountsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCurves const *)arg1)->CreateCurveVertexCountsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_CreateCurveVertexCountsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCurves const *)arg1)->CreateCurveVertexCountsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_CreateCurveVertexCountsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  result = ((UsdGeomCurves const *)arg1)->CreateCurveVertexCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_GetWidthsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  result = ((UsdGeomCurves const *)arg1)->GetWidthsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_CreateWidthsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomCurves const *)arg1)->CreateWidthsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_CreateWidthsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomCurves const *)arg1)->CreateWidthsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_CreateWidthsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  result = ((UsdGeomCurves const *)arg1)->CreateWidthsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_GetWidthsInterpolation(void * jarg1) {
  void * jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  result = ((UsdGeomCurves const *)arg1)->GetWidthsInterpolation();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCurves_SetWidthsInterpolation(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomCurves *arg1 = (UsdGeomCurves *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomCurves *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetWidthsInterpolation((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCurves_ComputeExtent__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  VtFloatArray *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtFloatArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtFloatArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)UsdGeomCurves::ComputeExtent((VtArray< GfVec3f > const &)*arg1,(VtArray< float > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomCurves_ComputeExtent__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  VtFloatArray *arg2 = 0 ;
  GfMatrix4d *arg3 = 0 ;
  VtVec3fArray *arg4 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtFloatArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtFloatArray const & type is null", 0);
    return 0;
  } 
  arg3 = (GfMatrix4d *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg4 = (VtVec3fArray *)jarg4; 
  result = (bool)UsdGeomCurves::ComputeExtent((VtArray< GfVec3f > const &)*arg1,(VtArray< float > const &)*arg2,(GfMatrix4d const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurves__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomBasisCurves *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomBasisCurves *)new UsdGeomBasisCurves((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurves__SWIG_1() {
  void * jresult ;
  UsdGeomBasisCurves *result = 0 ;
  
  result = (UsdGeomBasisCurves *)new UsdGeomBasisCurves();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurves__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomBasisCurves *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomBasisCurves *)new UsdGeomBasisCurves((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomBasisCurves(void * jarg1) {
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomBasisCurves::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomBasisCurves::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomBasisCurves result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomBasisCurves::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomBasisCurves((const UsdGeomBasisCurves &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomBasisCurves result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomBasisCurves::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomBasisCurves((const UsdGeomBasisCurves &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_GetTypeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  result = ((UsdGeomBasisCurves const *)arg1)->GetTypeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateTypeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateTypeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateTypeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateTypeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateTypeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateTypeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_GetBasisAttr(void * jarg1) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  result = ((UsdGeomBasisCurves const *)arg1)->GetBasisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateBasisAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateBasisAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateBasisAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateBasisAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateBasisAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateBasisAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_GetWrapAttr(void * jarg1) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  result = ((UsdGeomBasisCurves const *)arg1)->GetWrapAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateWrapAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateWrapAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateWrapAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateWrapAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_CreateWrapAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  result = ((UsdGeomBasisCurves const *)arg1)->CreateWrapAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_ComputeInterpolationForSize__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  size_t arg2 ;
  UsdTimeCode *arg3 = 0 ;
  UsdGeomBasisCurves::ComputeInterpolationInfo *arg4 = (UsdGeomBasisCurves::ComputeInterpolationInfo *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdGeomBasisCurves::ComputeInterpolationInfo *)jarg4; 
  result = ((UsdGeomBasisCurves const *)arg1)->ComputeInterpolationForSize(arg2,(UsdTimeCode const &)*arg3,arg4);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_ComputeInterpolationForSize__SWIG_1(void * jarg1, unsigned long jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  size_t arg2 ;
  UsdTimeCode *arg3 = 0 ;
  TfToken result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->ComputeInterpolationForSize(arg2,(UsdTimeCode const &)*arg3);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_ComputeUniformDataSize(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  size_t result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->ComputeUniformDataSize((UsdTimeCode const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_ComputeVaryingDataSize(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  size_t result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->ComputeVaryingDataSize((UsdTimeCode const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_ComputeVertexDataSize(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  UsdGeomBasisCurves *arg1 = (UsdGeomBasisCurves *) 0 ;
  UsdTimeCode *arg2 = 0 ;
  size_t result;
  
  arg1 = (UsdGeomBasisCurves *)jarg1; 
  arg2 = (UsdTimeCode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomBasisCurves const *)arg1)->ComputeVertexDataSize((UsdTimeCode const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurvesComputeInterpolationInfoPair__SWIG_0() {
  void * jresult ;
  std::pair< TfToken,size_t > *result = 0 ;
  
  result = (std::pair< TfToken,size_t > *)new std::pair< TfToken,size_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurvesComputeInterpolationInfoPair__SWIG_1(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  TfToken arg1 ;
  size_t arg2 ;
  TfToken *argp1 ;
  std::pair< TfToken,size_t > *result = 0 ;
  
  argp1 = (TfToken *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfToken", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (size_t)jarg2; 
  result = (std::pair< TfToken,size_t > *)new std::pair< TfToken,size_t >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurvesComputeInterpolationInfoPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< TfToken,size_t > *arg1 = 0 ;
  std::pair< TfToken,size_t > *result = 0 ;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< TfToken,size_t > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< TfToken,size_t > *)new std::pair< TfToken,size_t >((std::pair< TfToken,size_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfoPair_first_set(void * jarg1, void * jarg2) {
  std::pair< TfToken,size_t > *arg1 = (std::pair< TfToken,size_t > *) 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1; 
  arg2 = (TfToken *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfoPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< TfToken,size_t > *arg1 = (std::pair< TfToken,size_t > *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1; 
  result = (TfToken *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfoPair_second_set(void * jarg1, unsigned long jarg2) {
  std::pair< TfToken,size_t > *arg1 = (std::pair< TfToken,size_t > *) 0 ;
  size_t arg2 ;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfoPair_second_get(void * jarg1) {
  unsigned long jresult ;
  std::pair< TfToken,size_t > *arg1 = (std::pair< TfToken,size_t > *) 0 ;
  size_t result;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1; 
  result =  ((arg1)->second);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomBasisCurvesComputeInterpolationInfoPair(void * jarg1) {
  std::pair< TfToken,size_t > *arg1 = (std::pair< TfToken,size_t > *) 0 ;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_Clear(void * jarg1) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_Add(void * jarg1, void * jarg2) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  std::pair< TfToken,size_t > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (std::pair< TfToken,size_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< TfToken,size_t > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::pair< TfToken,size_t > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  std::vector< std::pair< TfToken,size_t > >::size_type result;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  result = ((std::vector< std::pair< TfToken,size_t > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  std::vector< std::pair< TfToken,size_t > >::size_type result;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  result = ((std::vector< std::pair< TfToken,size_t > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  std::vector< std::pair< TfToken,size_t > >::size_type arg2 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (std::vector< std::pair< TfToken,size_t > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurvesComputeInterpolationInfo__SWIG_0() {
  void * jresult ;
  std::vector< std::pair< TfToken,size_t > > *result = 0 ;
  
  result = (std::vector< std::pair< TfToken,size_t > > *)new std::vector< std::pair< TfToken,size_t > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurvesComputeInterpolationInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< TfToken,size_t > > *arg1 = 0 ;
  std::vector< std::pair< TfToken,size_t > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< TfToken,size_t > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::pair< TfToken,size_t > > *)new std::vector< std::pair< TfToken,size_t > >((std::vector< std::pair< TfToken,size_t > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBasisCurvesComputeInterpolationInfo__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::pair< TfToken,size_t > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::pair< TfToken,size_t > > *)new_std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  std::pair< TfToken,size_t > result;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::pair< TfToken,size_t >((const std::pair< TfToken,size_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  std::pair< TfToken,size_t > *result = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::pair< TfToken,size_t > *) &std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  std::pair< TfToken,size_t > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< TfToken,size_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< TfToken,size_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__setitem(arg1,arg2,(std::pair< TfToken,size_t > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  std::vector< std::pair< TfToken,size_t > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (std::vector< std::pair< TfToken,size_t > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< TfToken,size_t > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__AddRange(arg1,(std::vector< std::pair< TfToken,size_t > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::pair< TfToken,size_t > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::pair< TfToken,size_t > > *)std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  std::pair< TfToken,size_t > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< TfToken,size_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< TfToken,size_t > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Insert(arg1,arg2,(std::pair< TfToken,size_t > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< TfToken,size_t > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< TfToken,size_t > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< TfToken,size_t > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::pair< TfToken,size_t > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::pair< TfToken,size_t > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::pair< TfToken,size_t > > *result = 0 ;
  
  arg1 = (std::pair< TfToken,size_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< TfToken,size_t > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< TfToken,size_t > > *)std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Repeat((std::pair< TfToken,size_t > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurvesComputeInterpolationInfo_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< TfToken,size_t > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< TfToken,size_t > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< TfToken,size_t > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_TfToken_Sc_size_t_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::pair< TfToken,size_t > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomBasisCurvesComputeInterpolationInfo(void * jarg1) {
  std::vector< std::pair< TfToken,size_t > > *arg1 = (std::vector< std::pair< TfToken,size_t > > *) 0 ;
  
  arg1 = (std::vector< std::pair< TfToken,size_t > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomNurbsCurves__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomNurbsCurves *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomNurbsCurves *)new UsdGeomNurbsCurves((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomNurbsCurves__SWIG_1() {
  void * jresult ;
  UsdGeomNurbsCurves *result = 0 ;
  
  result = (UsdGeomNurbsCurves *)new UsdGeomNurbsCurves();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomNurbsCurves__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomNurbsCurves *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomNurbsCurves *)new UsdGeomNurbsCurves((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomNurbsCurves(void * jarg1) {
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomNurbsCurves::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomNurbsCurves::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomNurbsCurves result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomNurbsCurves::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomNurbsCurves((const UsdGeomNurbsCurves &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomNurbsCurves result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomNurbsCurves::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomNurbsCurves((const UsdGeomNurbsCurves &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_GetOrderAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  result = ((UsdGeomNurbsCurves const *)arg1)->GetOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateOrderAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateOrderAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateOrderAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateOrderAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateOrderAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_GetKnotsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  result = ((UsdGeomNurbsCurves const *)arg1)->GetKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateKnotsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateKnotsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateKnotsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateKnotsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateKnotsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_GetRangesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  result = ((UsdGeomNurbsCurves const *)arg1)->GetRangesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateRangesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateRangesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateRangesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateRangesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_CreateRangesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsCurves *arg1 = (UsdGeomNurbsCurves *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsCurves *)jarg1; 
  result = ((UsdGeomNurbsCurves const *)arg1)->CreateRangesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomNurbsPatch__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomNurbsPatch *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomNurbsPatch *)new UsdGeomNurbsPatch((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomNurbsPatch__SWIG_1() {
  void * jresult ;
  UsdGeomNurbsPatch *result = 0 ;
  
  result = (UsdGeomNurbsPatch *)new UsdGeomNurbsPatch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomNurbsPatch__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomNurbsPatch *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomNurbsPatch *)new UsdGeomNurbsPatch((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomNurbsPatch(void * jarg1) {
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomNurbsPatch::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomNurbsPatch::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomNurbsPatch result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomNurbsPatch::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomNurbsPatch((const UsdGeomNurbsPatch &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomNurbsPatch result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomNurbsPatch::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomNurbsPatch((const UsdGeomNurbsPatch &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetUVertexCountAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetUVertexCountAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUVertexCountAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUVertexCountAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUVertexCountAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUVertexCountAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUVertexCountAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUVertexCountAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetVVertexCountAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetVVertexCountAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVVertexCountAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVVertexCountAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVVertexCountAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVVertexCountAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVVertexCountAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVVertexCountAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetUOrderAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetUOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUOrderAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUOrderAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUOrderAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUOrderAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUOrderAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetVOrderAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetVOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVOrderAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVOrderAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVOrderAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVOrderAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVOrderAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVOrderAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetUKnotsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetUKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUKnotsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUKnotsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUKnotsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUKnotsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUKnotsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetVKnotsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetVKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVKnotsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVKnotsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVKnotsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVKnotsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVKnotsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetUFormAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetUFormAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUFormAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUFormAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUFormAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUFormAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateUFormAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateUFormAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetVFormAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetVFormAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVFormAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVFormAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVFormAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVFormAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVFormAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVFormAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetURangeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetURangeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateURangeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateURangeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateURangeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateURangeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateURangeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateURangeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetVRangeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetVRangeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVRangeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVRangeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVRangeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVRangeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateVRangeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateVRangeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetPointWeightsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetPointWeightsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreatePointWeightsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreatePointWeightsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreatePointWeightsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreatePointWeightsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreatePointWeightsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreatePointWeightsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetTrimCurveCountsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetTrimCurveCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveCountsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveCountsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveCountsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveCountsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveCountsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetTrimCurveOrdersAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetTrimCurveOrdersAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveOrdersAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveOrdersAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveOrdersAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveOrdersAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveOrdersAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveOrdersAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetTrimCurveVertexCountsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetTrimCurveVertexCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveVertexCountsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveVertexCountsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveVertexCountsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveVertexCountsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveVertexCountsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveVertexCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetTrimCurveKnotsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetTrimCurveKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveKnotsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveKnotsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveKnotsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveKnotsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveKnotsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveKnotsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetTrimCurveRangesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetTrimCurveRangesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveRangesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveRangesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveRangesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveRangesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurveRangesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurveRangesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_GetTrimCurvePointsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->GetTrimCurvePointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurvePointsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurvePointsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurvePointsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurvePointsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_CreateTrimCurvePointsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomNurbsPatch *arg1 = (UsdGeomNurbsPatch *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomNurbsPatch *)jarg1; 
  result = ((UsdGeomNurbsPatch const *)arg1)->CreateTrimCurvePointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomMesh__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomMesh *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomMesh *)new UsdGeomMesh((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomMesh__SWIG_1() {
  void * jresult ;
  UsdGeomMesh *result = 0 ;
  
  result = (UsdGeomMesh *)new UsdGeomMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomMesh__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomMesh *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomMesh *)new UsdGeomMesh((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomMesh(void * jarg1) {
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomMesh::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomMesh::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomMesh result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomMesh::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomMesh((const UsdGeomMesh &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomMesh result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomMesh::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomMesh((const UsdGeomMesh &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetFaceVertexIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetFaceVertexIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVertexIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVertexIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVertexIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVertexIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVertexIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVertexIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetFaceVertexCountsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetFaceVertexCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVertexCountsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVertexCountsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVertexCountsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVertexCountsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVertexCountsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVertexCountsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetSubdivisionSchemeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetSubdivisionSchemeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateSubdivisionSchemeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateSubdivisionSchemeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateSubdivisionSchemeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateSubdivisionSchemeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateSubdivisionSchemeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateSubdivisionSchemeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetInterpolateBoundaryAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetInterpolateBoundaryAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateInterpolateBoundaryAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateInterpolateBoundaryAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateInterpolateBoundaryAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateInterpolateBoundaryAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateInterpolateBoundaryAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateInterpolateBoundaryAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetFaceVaryingLinearInterpolationAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetFaceVaryingLinearInterpolationAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVaryingLinearInterpolationAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVaryingLinearInterpolationAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVaryingLinearInterpolationAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVaryingLinearInterpolationAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateFaceVaryingLinearInterpolationAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateFaceVaryingLinearInterpolationAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetTriangleSubdivisionRuleAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetTriangleSubdivisionRuleAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateTriangleSubdivisionRuleAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateTriangleSubdivisionRuleAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateTriangleSubdivisionRuleAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateTriangleSubdivisionRuleAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateTriangleSubdivisionRuleAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateTriangleSubdivisionRuleAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetHoleIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetHoleIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateHoleIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateHoleIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateHoleIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateHoleIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateHoleIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateHoleIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetCornerIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetCornerIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCornerIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateCornerIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCornerIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateCornerIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCornerIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateCornerIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetCornerSharpnessesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetCornerSharpnessesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCornerSharpnessesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateCornerSharpnessesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCornerSharpnessesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateCornerSharpnessesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCornerSharpnessesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateCornerSharpnessesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetCreaseIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetCreaseIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetCreaseLengthsAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetCreaseLengthsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseLengthsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseLengthsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseLengthsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseLengthsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseLengthsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseLengthsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_GetCreaseSharpnessesAttr(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->GetCreaseSharpnessesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseSharpnessesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseSharpnessesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseSharpnessesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseSharpnessesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_CreateCreaseSharpnessesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomMesh *arg1 = (UsdGeomMesh *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomMesh *)jarg1; 
  result = ((UsdGeomMesh const *)arg1)->CreateCreaseSharpnessesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomMesh_ValidateTopology__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, char** jarg4) {
  unsigned int jresult ;
  VtIntArray *arg1 = 0 ;
  VtIntArray *arg2 = 0 ;
  size_t arg3 ;
  std::string *arg4 = (std::string *) 0 ;
  bool result;
  
  arg1 = (VtIntArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  //typemap in
  std::string temp;
  arg4 = &temp; 
  
  result = (bool)UsdGeomMesh::ValidateTopology((VtArray< int > const &)*arg1,(VtArray< int > const &)*arg2,arg3,arg4);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg4 = SWIG_csharp_string_callback(arg4->c_str());
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomMesh_ValidateTopology__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  VtIntArray *arg1 = 0 ;
  VtIntArray *arg2 = 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (VtIntArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (bool)UsdGeomMesh::ValidateTopology((VtArray< int > const &)*arg1,(VtArray< int > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_UsdGeomMesh_SHARPNESS_INFINITE_get() {
  float jresult ;
  float result;
  
  result = (float)(float)UsdGeomMesh::SHARPNESS_INFINITE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomMesh_Triangulate(void * jarg1, void * jarg2) {
  VtIntArray *arg1 = 0 ;
  VtIntArray *arg2 = 0 ;
  
  arg1 = (VtIntArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray & type is null", 0);
    return ;
  } 
  arg2 = (VtIntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray & type is null", 0);
    return ;
  } 
  UsdGeomMesh_Triangulate(*arg1,*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomConstraintTarget__SWIG_0() {
  void * jresult ;
  UsdGeomConstraintTarget *result = 0 ;
  
  result = (UsdGeomConstraintTarget *)new UsdGeomConstraintTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomConstraintTarget__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  UsdGeomConstraintTarget *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomConstraintTarget *)new UsdGeomConstraintTarget((UsdAttribute const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdGeomConstraintTarget::IsValid((UsdAttribute const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_GetAttr(void * jarg1) {
  void * jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  result = (UsdAttribute *) &((UsdGeomConstraintTarget const *)arg1)->GetAttr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  bool result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  result = (bool)((UsdGeomConstraintTarget const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_Get__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdGeomConstraintTarget const *)arg1)->Get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_Get__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2; 
  result = (bool)((UsdGeomConstraintTarget const *)arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_Set__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdGeomConstraintTarget const *)arg1)->Set((GfMatrix4d const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_Set__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  GfMatrix4d *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  arg2 = (GfMatrix4d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomConstraintTarget const *)arg1)->Set((GfMatrix4d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_GetIdentifier(void * jarg1) {
  void * jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  result = ((UsdGeomConstraintTarget const *)arg1)->GetIdentifier();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_SetIdentifier(void * jarg1, void * jarg2) {
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  (arg1)->SetIdentifier((TfToken const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_GetConstraintAttrName(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  TfToken result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = UsdGeomConstraintTarget::GetConstraintAttrName((std::string const &)*arg1);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_ComputeInWorldSpace__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  UsdTimeCode arg2 ;
  UsdGeomXformCache *arg3 = (UsdGeomXformCache *) 0 ;
  UsdTimeCode *argp2 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (UsdGeomXformCache *)jarg3; 
  result = ((UsdGeomConstraintTarget const *)arg1)->ComputeInWorldSpace(arg2,arg3);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_ComputeInWorldSpace__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdGeomConstraintTarget const *)arg1)->ComputeInWorldSpace(arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTarget_ComputeInWorldSpace__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  result = ((UsdGeomConstraintTarget const *)arg1)->ComputeInWorldSpace();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomConstraintTarget(void * jarg1) {
  UsdGeomConstraintTarget *arg1 = (UsdGeomConstraintTarget *) 0 ;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformCache__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdTimeCode arg1 ;
  UsdTimeCode const *argp1 ;
  UsdGeomXformCache *result = 0 ;
  
  argp1 = (UsdTimeCode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode const", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (UsdGeomXformCache *)new UsdGeomXformCache(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomXformCache__SWIG_1() {
  void * jresult ;
  UsdGeomXformCache *result = 0 ;
  
  result = (UsdGeomXformCache *)new UsdGeomXformCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_GetLocalToWorldTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetLocalToWorldTransform((UsdPrim const &)*arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_GetParentToWorldTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetParentToWorldTransform((UsdPrim const &)*arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_GetLocalTransformation(void * jarg1, void * jarg2, unsigned int * jarg3) {
  void * jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  *jarg3 = 0; 
  arg3 = (bool *)jarg3; 
  result = (arg1)->GetLocalTransformation((UsdPrim const &)*arg2,arg3);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_ComputeRelativeTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  UsdPrim *arg3 = 0 ;
  bool *arg4 = (bool *) 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdPrim *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg4 = (bool *)jarg4; 
  result = (arg1)->ComputeRelativeTransform((UsdPrim const &)*arg2,(UsdPrim const &)*arg3,arg4);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_IsAttributeIncludedInLocalTransform(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsAttributeIncludedInLocalTransform((UsdPrim const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_TransformMightBeTimeVarying(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->TransformMightBeTimeVarying((UsdPrim const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_GetResetXformStack(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetResetXformStack((UsdPrim const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_Clear(void * jarg1) {
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_SetTime(void * jarg1, void * jarg2) {
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_GetTime(void * jarg1) {
  void * jresult ;
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdTimeCode result;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  result = (arg1)->GetTime();
  jresult = new UsdTimeCode((const UsdTimeCode &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomXformCache_Swap(void * jarg1, void * jarg2) {
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  UsdGeomXformCache *arg2 = 0 ;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  arg2 = (UsdGeomXformCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomXformCache & type is null", 0);
    return ;
  } 
  (arg1)->Swap(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomXformCache(void * jarg1) {
  UsdGeomXformCache *arg1 = (UsdGeomXformCache *) 0 ;
  
  arg1 = (UsdGeomXformCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_USDGEOM_XFORM_CACHE_API_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBBoxCache__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdTimeCode arg1 ;
  TfTokenVector arg2 ;
  bool arg3 ;
  UsdTimeCode *argp1 ;
  TfTokenVector *argp2 ;
  UsdGeomBBoxCache *result = 0 ;
  
  argp1 = (UsdTimeCode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (TfTokenVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfTokenVector", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (UsdGeomBBoxCache *)new UsdGeomBBoxCache(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBBoxCache__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdTimeCode arg1 ;
  TfTokenVector arg2 ;
  UsdTimeCode *argp1 ;
  TfTokenVector *argp2 ;
  UsdGeomBBoxCache *result = 0 ;
  
  argp1 = (UsdTimeCode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (TfTokenVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TfTokenVector", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (UsdGeomBBoxCache *)new UsdGeomBBoxCache(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomBBoxCache__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = 0 ;
  UsdGeomBBoxCache *result = 0 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomBBoxCache const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomBBoxCache *)new UsdGeomBBoxCache((UsdGeomBBoxCache const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputeWorldBound(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ComputeWorldBound((UsdPrim const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputeRelativeBound(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  UsdPrim *arg3 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdPrim *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ComputeRelativeBound((UsdPrim const &)*arg2,(UsdPrim const &)*arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputeLocalBound(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ComputeLocalBound((UsdPrim const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputeUntransformedBound__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ComputeUntransformedBound((UsdPrim const &)*arg2);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputeUntransformedBound__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  SdfPathSet *arg3 = 0 ;
  TfHashMap< SdfPath,GfMatrix4d,SdfPath::Hash > *arg4 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfPathSet *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathSet const & type is null", 0);
    return 0;
  } 
  arg4 = (TfHashMap< SdfPath,GfMatrix4d,SdfPath::Hash > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfHashMap< SdfPath,GfMatrix4d,SdfPath::Hash > const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ComputeUntransformedBound((UsdPrim const &)*arg2,(SdfPathSet const &)*arg3,(TfHashMap< SdfPath,GfMatrix4d,SdfPath::Hash > const &)*arg4);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceWorldBounds(void * jarg1, void * jarg2, int64_t* jarg3, unsigned long jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  GfBBox3d *arg5 = (GfBBox3d *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  arg5 = (GfBBox3d *)jarg5; 
  result = (bool)(arg1)->ComputePointInstanceWorldBounds((UsdGeomPointInstancer const &)*arg2,(int64_t const *)arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceWorldBound(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t arg3 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (arg1)->ComputePointInstanceWorldBound((UsdGeomPointInstancer const &)*arg2,arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceRelativeBounds(void * jarg1, void * jarg2, int64_t* jarg3, unsigned long jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  UsdPrim *arg5 = 0 ;
  GfBBox3d *arg6 = (GfBBox3d *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  arg5 = (UsdPrim *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg6 = (GfBBox3d *)jarg6; 
  result = (bool)(arg1)->ComputePointInstanceRelativeBounds((UsdGeomPointInstancer const &)*arg2,(int64_t const *)arg3,arg4,(UsdPrim const &)*arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceRelativeBound(void * jarg1, void * jarg2, long long jarg3, void * jarg4) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t arg3 ;
  UsdPrim *arg4 = 0 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  arg4 = (UsdPrim *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ComputePointInstanceRelativeBound((UsdGeomPointInstancer const &)*arg2,arg3,(UsdPrim const &)*arg4);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceLocalBounds(void * jarg1, void * jarg2, int64_t* jarg3, unsigned long jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  GfBBox3d *arg5 = (GfBBox3d *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  arg5 = (GfBBox3d *)jarg5; 
  result = (bool)(arg1)->ComputePointInstanceLocalBounds((UsdGeomPointInstancer const &)*arg2,(int64_t const *)arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceLocalBound(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t arg3 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (arg1)->ComputePointInstanceLocalBound((UsdGeomPointInstancer const &)*arg2,arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceUntransformedBounds(void * jarg1, void * jarg2, int64_t* jarg3, unsigned long jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  GfBBox3d *arg5 = (GfBBox3d *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (size_t)jarg4; 
  arg5 = (GfBBox3d *)jarg5; 
  result = (bool)(arg1)->ComputePointInstanceUntransformedBounds((UsdGeomPointInstancer const &)*arg2,(int64_t const *)arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ComputePointInstanceUntransformedBound(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdGeomPointInstancer *arg2 = 0 ;
  int64_t arg3 ;
  GfBBox3d result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (UsdGeomPointInstancer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomPointInstancer const & type is null", 0);
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  result = (arg1)->ComputePointInstanceUntransformedBound((UsdGeomPointInstancer const &)*arg2,arg3);
  jresult = new GfBBox3d((const GfBBox3d &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_Clear(void * jarg1) {
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_SetIncludedPurposes(void * jarg1, void * jarg2) {
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  TfTokenVector *arg2 = 0 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  arg2 = (TfTokenVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfTokenVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetIncludedPurposes((TfTokenVector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_GetIncludedPurposes(void * jarg1) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  TfTokenVector *result = 0 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  result = (TfTokenVector *) &(arg1)->GetIncludedPurposes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_GetUseExtentsHint(void * jarg1) {
  unsigned int jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  result = (bool)((UsdGeomBBoxCache const *)arg1)->GetUseExtentsHint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_SetTime(void * jarg1, void * jarg2) {
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_GetTime(void * jarg1) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdTimeCode result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  result = ((UsdGeomBBoxCache const *)arg1)->GetTime();
  jresult = new UsdTimeCode((const UsdTimeCode &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_SetBaseTime(void * jarg1, void * jarg2) {
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetBaseTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_GetBaseTime(void * jarg1) {
  void * jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  UsdTimeCode result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  result = ((UsdGeomBBoxCache const *)arg1)->GetBaseTime();
  jresult = new UsdTimeCode((const UsdTimeCode &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_ClearBaseTime(void * jarg1) {
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  (arg1)->ClearBaseTime();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomBBoxCache_HasBaseTime(void * jarg1) {
  unsigned int jresult ;
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  bool result;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  result = (bool)((UsdGeomBBoxCache const *)arg1)->HasBaseTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomBBoxCache(void * jarg1) {
  UsdGeomBBoxCache *arg1 = (UsdGeomBBoxCache *) 0 ;
  
  arg1 = (UsdGeomBBoxCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomModelAPI__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomModelAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomModelAPI *)new UsdGeomModelAPI((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomModelAPI__SWIG_1() {
  void * jresult ;
  UsdGeomModelAPI *result = 0 ;
  
  result = (UsdGeomModelAPI *)new UsdGeomModelAPI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomModelAPI__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdGeomModelAPI *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdGeomModelAPI *)new UsdGeomModelAPI((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomModelAPI(void * jarg1) {
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdGeomModelAPI::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdGeomModelAPI::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdGeomModelAPI result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdGeomModelAPI::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdGeomModelAPI((const UsdGeomModelAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_Apply(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomModelAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdGeomModelAPI::Apply((UsdPrim const &)*arg1);
  jresult = new UsdGeomModelAPI((const UsdGeomModelAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelDrawModeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelDrawModeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelDrawModeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelDrawModeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelDrawModeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelDrawModeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelDrawModeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelDrawModeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelApplyDrawModeAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelApplyDrawModeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelApplyDrawModeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelApplyDrawModeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelApplyDrawModeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelApplyDrawModeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelApplyDrawModeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelApplyDrawModeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelDrawModeColorAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelDrawModeColorAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelDrawModeColorAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelDrawModeColorAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelDrawModeColorAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelDrawModeColorAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelDrawModeColorAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelDrawModeColorAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardGeometryAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardGeometryAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardGeometryAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardGeometryAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardGeometryAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardGeometryAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardGeometryAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardGeometryAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardTextureXPosAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardTextureXPosAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureXPosAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureXPosAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureXPosAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureXPosAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureXPosAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureXPosAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardTextureYPosAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardTextureYPosAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureYPosAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureYPosAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureYPosAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureYPosAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureYPosAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureYPosAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardTextureZPosAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardTextureZPosAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureZPosAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureZPosAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureZPosAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureZPosAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureZPosAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureZPosAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardTextureXNegAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardTextureXNegAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureXNegAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureXNegAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureXNegAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureXNegAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureXNegAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureXNegAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardTextureYNegAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardTextureYNegAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureYNegAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureYNegAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureYNegAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureYNegAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureYNegAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureYNegAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetModelCardTextureZNegAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetModelCardTextureZNegAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureZNegAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureZNegAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureZNegAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureZNegAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateModelCardTextureZNegAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateModelCardTextureZNegAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetExtentsHint__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdGeomModelAPI const *)arg1)->GetExtentsHint(arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetExtentsHint__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  result = (bool)((UsdGeomModelAPI const *)arg1)->GetExtentsHint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_SetExtentsHint__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtVec3fArray *arg2 = 0 ;
  UsdTimeCode *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdTimeCode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdTimeCode const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetExtentsHint((VtVec3fArray const &)*arg2,(UsdTimeCode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_SetExtentsHint__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  VtVec3fArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetExtentsHint((VtVec3fArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetExtentsHintAttr(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = (arg1)->GetExtentsHintAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_ComputeExtentsHint(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  UsdGeomBBoxCache *arg2 = 0 ;
  VtVec3fArray result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  arg2 = (UsdGeomBBoxCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomBBoxCache & type is null", 0);
    return 0;
  } 
  result = ((UsdGeomModelAPI const *)arg1)->ComputeExtentsHint(*arg2);
  jresult = new VtVec3fArray((const VtVec3fArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetConstraintTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  std::string *arg2 = 0 ;
  UsdGeomConstraintTarget result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdGeomModelAPI const *)arg1)->GetConstraintTarget((std::string const &)*arg2);
  jresult = new UsdGeomConstraintTarget((const UsdGeomConstraintTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_CreateConstraintTarget(void * jarg1, char * jarg2) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  std::string *arg2 = 0 ;
  UsdGeomConstraintTarget result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = ((UsdGeomModelAPI const *)arg1)->CreateConstraintTarget((std::string const &)*arg2);
  jresult = new UsdGeomConstraintTarget((const UsdGeomConstraintTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_GetConstraintTargets(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  std::vector< UsdGeomConstraintTarget > result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->GetConstraintTargets();
  jresult = new std::vector< UsdGeomConstraintTarget >((const std::vector< UsdGeomConstraintTarget > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomModelAPI_ComputeModelDrawMode(void * jarg1) {
  void * jresult ;
  UsdGeomModelAPI *arg1 = (UsdGeomModelAPI *) 0 ;
  TfToken result;
  
  arg1 = (UsdGeomModelAPI *)jarg1; 
  result = ((UsdGeomModelAPI const *)arg1)->ComputeModelDrawMode();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_Clear(void * jarg1) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  UsdGeomConstraintTarget *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (UsdGeomConstraintTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomConstraintTarget const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdGeomConstraintTarget const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  std::vector< UsdGeomConstraintTarget >::size_type result;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  result = ((std::vector< UsdGeomConstraintTarget > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  std::vector< UsdGeomConstraintTarget >::size_type result;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  result = ((std::vector< UsdGeomConstraintTarget > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  std::vector< UsdGeomConstraintTarget >::size_type arg2 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (std::vector< UsdGeomConstraintTarget >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomConstraintTargetVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdGeomConstraintTarget > *result = 0 ;
  
  result = (std::vector< UsdGeomConstraintTarget > *)new std::vector< UsdGeomConstraintTarget >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomConstraintTargetVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdGeomConstraintTarget > *arg1 = 0 ;
  std::vector< UsdGeomConstraintTarget > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomConstraintTarget > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdGeomConstraintTarget > *)new std::vector< UsdGeomConstraintTarget >((std::vector< UsdGeomConstraintTarget > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdGeomConstraintTargetVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdGeomConstraintTarget > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdGeomConstraintTarget > *)new_std_vector_Sl_UsdGeomConstraintTarget_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  UsdGeomConstraintTarget result;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdGeomConstraintTarget_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdGeomConstraintTarget((const UsdGeomConstraintTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  UsdGeomConstraintTarget *result = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdGeomConstraintTarget *) &std_vector_Sl_UsdGeomConstraintTarget_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  UsdGeomConstraintTarget *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomConstraintTarget *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomConstraintTarget const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__setitem(arg1,arg2,(UsdGeomConstraintTarget const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  std::vector< UsdGeomConstraintTarget > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (std::vector< UsdGeomConstraintTarget > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomConstraintTarget > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdGeomConstraintTarget_Sg__AddRange(arg1,(std::vector< UsdGeomConstraintTarget > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdGeomConstraintTarget > *result = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdGeomConstraintTarget > *)std_vector_Sl_UsdGeomConstraintTarget_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  UsdGeomConstraintTarget *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdGeomConstraintTarget *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomConstraintTarget const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__Insert(arg1,arg2,(UsdGeomConstraintTarget const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomConstraintTarget > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomConstraintTarget > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomConstraintTarget > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__InsertRange(arg1,arg2,(std::vector< UsdGeomConstraintTarget > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdGeomConstraintTarget *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdGeomConstraintTarget > *result = 0 ;
  
  arg1 = (UsdGeomConstraintTarget *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomConstraintTarget const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdGeomConstraintTarget > *)std_vector_Sl_UsdGeomConstraintTarget_Sg__Repeat((UsdGeomConstraintTarget const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  std_vector_Sl_UsdGeomConstraintTarget_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdGeomConstraintTargetVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  int arg2 ;
  std::vector< UsdGeomConstraintTarget > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdGeomConstraintTarget > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdGeomConstraintTarget > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdGeomConstraintTarget_Sg__SetRange(arg1,arg2,(std::vector< UsdGeomConstraintTarget > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdGeomConstraintTargetVector(void * jarg1) {
  std::vector< UsdGeomConstraintTarget > *arg1 = (std::vector< UsdGeomConstraintTarget > *) 0 ;
  
  arg1 = (std::vector< UsdGeomConstraintTarget > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdShadeUtils_GetPrefixForAttributeType(int jarg1) {
  char * jresult ;
  UsdShadeAttributeType arg1 ;
  std::string result;
  
  arg1 = (UsdShadeAttributeType)jarg1; 
  result = UsdShadeUtils::GetPrefixForAttributeType(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeUtils_GetFullName(void * jarg1, int jarg2) {
  void * jresult ;
  TfToken *arg1 = 0 ;
  UsdShadeAttributeType arg2 ;
  TfToken result;
  
  arg1 = (TfToken *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeAttributeType)jarg2; 
  result = UsdShadeUtils::GetFullName((TfToken const &)*arg1,arg2);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeUtils_ReadOldEncoding() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)UsdShadeUtils::ReadOldEncoding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeUtils_WriteNewEncoding() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)UsdShadeUtils::WriteNewEncoding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeUtils() {
  void * jresult ;
  UsdShadeUtils *result = 0 ;
  
  result = (UsdShadeUtils *)new UsdShadeUtils();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeUtils(void * jarg1) {
  UsdShadeUtils *arg1 = (UsdShadeUtils *) 0 ;
  
  arg1 = (UsdShadeUtils *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeNodeGraph__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdShadeNodeGraph *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeNodeGraph *)new UsdShadeNodeGraph((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeNodeGraph__SWIG_1() {
  void * jresult ;
  UsdShadeNodeGraph *result = 0 ;
  
  result = (UsdShadeNodeGraph *)new UsdShadeNodeGraph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeNodeGraph__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdShadeNodeGraph *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeNodeGraph *)new UsdShadeNodeGraph((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeNodeGraph(void * jarg1) {
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdShadeNodeGraph::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdShadeNodeGraph::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeNodeGraph result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeNodeGraph::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeNodeGraph((const UsdShadeNodeGraph &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeNodeGraph result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeNodeGraph::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeNodeGraph((const UsdShadeNodeGraph &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeNodeGraph__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = 0 ;
  UsdShadeNodeGraph *result = 0 ;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeNodeGraph *)new UsdShadeNodeGraph((UsdShadeConnectableAPI const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_ConnectableAPI(void * jarg1) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  UsdShadeConnectableAPI result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  result = ((UsdShadeNodeGraph const *)arg1)->ConnectableAPI();
  jresult = new UsdShadeConnectableAPI((const UsdShadeConnectableAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_CreateOutput(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeNodeGraph const *)arg1)->CreateOutput((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetOutput(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeNodeGraph const *)arg1)->GetOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetOutputs(void * jarg1) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeOutput > > result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  result = ((UsdShadeNodeGraph const *)arg1)->GetOutputs();
  jresult = new std::vector< UsdShadeOutput >((const std::vector< UsdShadeOutput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_ComputeOutputSource(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = ((UsdShadeNodeGraph const *)arg1)->ComputeOutputSource((TfToken const &)*arg2,arg3,arg4);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_CreateInput(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdShadeInput result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeNodeGraph const *)arg1)->CreateInput((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdShadeInput((const UsdShadeInput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetInput(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeInput result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeNodeGraph const *)arg1)->GetInput((TfToken const &)*arg2);
  jresult = new UsdShadeInput((const UsdShadeInput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetInputs(void * jarg1) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeInput > > result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  result = ((UsdShadeNodeGraph const *)arg1)->GetInputs();
  jresult = new std::vector< UsdShadeInput >((const std::vector< UsdShadeInput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeNodeGraph_NodeGraphHasher() {
  void * jresult ;
  UsdShadeNodeGraph::NodeGraphHasher *result = 0 ;
  
  result = (UsdShadeNodeGraph::NodeGraphHasher *)new UsdShadeNodeGraph::NodeGraphHasher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeNodeGraph_NodeGraphHasher(void * jarg1) {
  UsdShadeNodeGraph::NodeGraphHasher *arg1 = (UsdShadeNodeGraph::NodeGraphHasher *) 0 ;
  
  arg1 = (UsdShadeNodeGraph::NodeGraphHasher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeNodeGraph_NodeGraphEqualFn() {
  void * jresult ;
  UsdShadeNodeGraph::NodeGraphEqualFn *result = 0 ;
  
  result = (UsdShadeNodeGraph::NodeGraphEqualFn *)new UsdShadeNodeGraph::NodeGraphEqualFn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeNodeGraph_NodeGraphEqualFn(void * jarg1) {
  UsdShadeNodeGraph::NodeGraphEqualFn *arg1 = (UsdShadeNodeGraph::NodeGraphEqualFn *) 0 ;
  
  arg1 = (UsdShadeNodeGraph::NodeGraphEqualFn *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_GetInterfaceInputs(void * jarg1) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeInput > > result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  result = ((UsdShadeNodeGraph const *)arg1)->GetInterfaceInputs();
  jresult = new std::vector< UsdShadeInput >((const std::vector< UsdShadeInput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_ComputeInterfaceInputConsumersMap__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  bool arg2 ;
  SwigValueWrapper< std::unordered_map< UsdShadeInput,std::vector< UsdShadeInput >,UsdShadeInput::Hash > > result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((UsdShadeNodeGraph const *)arg1)->ComputeInterfaceInputConsumersMap(arg2);
  jresult = new UsdShadeNodeGraph::InterfaceInputConsumersMap((const UsdShadeNodeGraph::InterfaceInputConsumersMap &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_ComputeInterfaceInputConsumersMap__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = (UsdShadeNodeGraph *) 0 ;
  SwigValueWrapper< std::unordered_map< UsdShadeInput,std::vector< UsdShadeInput >,UsdShadeInput::Hash > > result;
  
  arg1 = (UsdShadeNodeGraph *)jarg1; 
  result = ((UsdShadeNodeGraph const *)arg1)->ComputeInterfaceInputConsumersMap();
  jresult = new UsdShadeNodeGraph::InterfaceInputConsumersMap((const UsdShadeNodeGraph::InterfaceInputConsumersMap &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeMaterial__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdShadeMaterial *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeMaterial *)new UsdShadeMaterial((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeMaterial__SWIG_1() {
  void * jresult ;
  UsdShadeMaterial *result = 0 ;
  
  result = (UsdShadeMaterial *)new UsdShadeMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeMaterial__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdShadeMaterial *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeMaterial *)new UsdShadeMaterial((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeMaterial(void * jarg1) {
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdShadeMaterial::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdShadeMaterial::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeMaterial result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeMaterial((const UsdShadeMaterial &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeMaterial result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeMaterial((const UsdShadeMaterial &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetSurfaceAttr(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetSurfaceAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateSurfaceAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdShadeMaterial const *)arg1)->CreateSurfaceAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateSurfaceAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->CreateSurfaceAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateSurfaceAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->CreateSurfaceAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetDisplacementAttr(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetDisplacementAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateDisplacementAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdShadeMaterial const *)arg1)->CreateDisplacementAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateDisplacementAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->CreateDisplacementAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateDisplacementAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->CreateDisplacementAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetVolumeAttr(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetVolumeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateVolumeAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdShadeMaterial const *)arg1)->CreateVolumeAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateVolumeAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->CreateVolumeAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateVolumeAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->CreateVolumeAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_Bind(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdPrim *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeMaterial const *)arg1)->Bind((UsdPrim const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_Unbind(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeMaterial::Unbind((UsdPrim const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetBindingRel(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdRelationship result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::GetBindingRel((UsdPrim const &)*arg1);
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetBoundMaterial(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdShadeMaterial result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::GetBoundMaterial((UsdPrim const &)*arg1);
  jresult = new UsdShadeMaterial((const UsdShadeMaterial &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateSurfaceOutput__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->CreateSurfaceOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateSurfaceOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->CreateSurfaceOutput();
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetSurfaceOutput__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->GetSurfaceOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetSurfaceOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetSurfaceOutput();
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeSurfaceSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeSurfaceSource((TfToken const &)*arg2,arg3,arg4);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeSurfaceSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeSurfaceSource((TfToken const &)*arg2,arg3);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeSurfaceSource__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->ComputeSurfaceSource((TfToken const &)*arg2);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeSurfaceSource__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeSurfaceSource();
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateDisplacementOutput__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->CreateDisplacementOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateDisplacementOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->CreateDisplacementOutput();
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetDisplacementOutput__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->GetDisplacementOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetDisplacementOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetDisplacementOutput();
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeDisplacementSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeDisplacementSource((TfToken const &)*arg2,arg3,arg4);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeDisplacementSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeDisplacementSource((TfToken const &)*arg2,arg3);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeDisplacementSource__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->ComputeDisplacementSource((TfToken const &)*arg2);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeDisplacementSource__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeDisplacementSource();
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateVolumeOutput__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->CreateVolumeOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateVolumeOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->CreateVolumeOutput();
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetVolumeOutput__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->GetVolumeOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetVolumeOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetVolumeOutput();
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeVolumeSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeVolumeSource((TfToken const &)*arg2,arg3,arg4);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeVolumeSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeVolumeSource((TfToken const &)*arg2,arg3);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeVolumeSource__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->ComputeVolumeSource((TfToken const &)*arg2);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ComputeVolumeSource__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->ComputeVolumeSource();
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetEditContextForVariant__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  SdfLayerHandle *arg3 = 0 ;
  std::pair< UsdStagePtr,UsdEditTarget > result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfLayerHandle *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfLayerHandle const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->GetEditContextForVariant((TfToken const &)*arg2,(SdfLayerHandle const &)*arg3);
  jresult = new std::pair< UsdStagePtr,UsdEditTarget >((const std::pair< UsdStagePtr,UsdEditTarget > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetEditContextForVariant__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  TfToken *arg2 = 0 ;
  std::pair< UsdStagePtr,UsdEditTarget > result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeMaterial const *)arg1)->GetEditContextForVariant((TfToken const &)*arg2);
  jresult = new std::pair< UsdStagePtr,UsdEditTarget >((const std::pair< UsdStagePtr,UsdEditTarget > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetMaterialVariant(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  SwigValueWrapper< UsdVariantSet > result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetMaterialVariant();
  jresult = new UsdVariantSet((const UsdVariantSet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateMasterMaterialVariant__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdPrim *arg1 = 0 ;
  std::vector< UsdPrim > *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< UsdPrim > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeMaterial::CreateMasterMaterialVariant((UsdPrim const &)*arg1,(std::vector< UsdPrim > const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateMasterMaterialVariant__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrim *arg1 = 0 ;
  std::vector< UsdPrim > *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< UsdPrim > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdPrim > const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeMaterial::CreateMasterMaterialVariant((UsdPrim const &)*arg1,(std::vector< UsdPrim > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetBaseMaterial(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeMaterial result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetBaseMaterial();
  jresult = new UsdShadeMaterial((const UsdShadeMaterial &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetBaseMaterialPath(void * jarg1) {
  void * jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  SdfPath result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = ((UsdShadeMaterial const *)arg1)->GetBaseMaterialPath();
  jresult = new SdfPath((const SdfPath &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_SetBaseMaterial(void * jarg1, void * jarg2) {
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  UsdShadeMaterial *arg2 = 0 ;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (UsdShadeMaterial *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeMaterial const & type is null", 0);
    return ;
  } 
  ((UsdShadeMaterial const *)arg1)->SetBaseMaterial((UsdShadeMaterial const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_SetBaseMaterialPath(void * jarg1, void * jarg2) {
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  SdfPath *arg2 = 0 ;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  ((UsdShadeMaterial const *)arg1)->SetBaseMaterialPath((SdfPath const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_ClearBaseMaterial(void * jarg1) {
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  ((UsdShadeMaterial const *)arg1)->ClearBaseMaterial();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_HasBaseMaterial(void * jarg1) {
  unsigned int jresult ;
  UsdShadeMaterial *arg1 = (UsdShadeMaterial *) 0 ;
  bool result;
  
  arg1 = (UsdShadeMaterial *)jarg1; 
  result = (bool)((UsdShadeMaterial const *)arg1)->HasBaseMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetMaterialBindSubsets(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = 0 ;
  SwigValueWrapper< std::vector< UsdGeomSubset > > result;
  
  arg1 = (UsdGeomImageable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomImageable const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::GetMaterialBindSubsets((UsdGeomImageable const &)*arg1);
  jresult = new std::vector< UsdGeomSubset >((const std::vector< UsdGeomSubset > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_SetMaterialBindSubsetsFamilyType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdGeomImageable *arg1 = 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdGeomImageable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomImageable const & type is null", 0);
    return 0;
  } 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeMaterial::SetMaterialBindSubsetsFamilyType((UsdGeomImageable const &)*arg1,(TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetMaterialBindSubsetsFamilyType(void * jarg1) {
  void * jresult ;
  UsdGeomImageable *arg1 = 0 ;
  TfToken result;
  
  arg1 = (UsdGeomImageable *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomImageable const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::GetMaterialBindSubsetsFamilyType((UsdGeomImageable const &)*arg1);
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_CreateMaterialFaceSet(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::CreateMaterialFaceSet((UsdPrim const &)*arg1);
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_GetMaterialFaceSet(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdGeomFaceSetAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdShadeMaterial::GetMaterialFaceSet((UsdPrim const &)*arg1);
  jresult = new UsdGeomFaceSetAPI((const UsdGeomFaceSetAPI &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_HasMaterialFaceSet(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeMaterial::HasMaterialFaceSet((UsdPrim const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShader__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdShadeShader *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeShader *)new UsdShadeShader((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShader__SWIG_1() {
  void * jresult ;
  UsdShadeShader *result = 0 ;
  
  result = (UsdShadeShader *)new UsdShadeShader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShader__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdShadeShader *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeShader *)new UsdShadeShader((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeShader(void * jarg1) {
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  
  arg1 = (UsdShadeShader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdShadeShader::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdShadeShader::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeShader::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeShader result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeShader::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetImplementationSourceAttr(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->GetImplementationSourceAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateImplementationSourceAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdShadeShader const *)arg1)->CreateImplementationSourceAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateImplementationSourceAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeShader const *)arg1)->CreateImplementationSourceAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateImplementationSourceAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->CreateImplementationSourceAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetIdAttr(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->GetIdAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateIdAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdShadeShader const *)arg1)->CreateIdAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateIdAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeShader const *)arg1)->CreateIdAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateIdAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->CreateIdAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShader__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = 0 ;
  UsdShadeShader *result = 0 ;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeShader *)new UsdShadeShader((UsdShadeConnectableAPI const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_ConnectableAPI(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  UsdShadeConnectableAPI result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->ConnectableAPI();
  jresult = new UsdShadeConnectableAPI((const UsdShadeConnectableAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateOutput(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateOutput((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetOutput(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeShader const *)arg1)->GetOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetOutputs(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeOutput > > result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->GetOutputs();
  jresult = new std::vector< UsdShadeOutput >((const std::vector< UsdShadeOutput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_CreateInput(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdShadeInput result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateInput((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdShadeInput((const UsdShadeInput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetInput(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeInput result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeShader const *)arg1)->GetInput((TfToken const &)*arg2);
  jresult = new UsdShadeInput((const UsdShadeInput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetInputs(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeInput > > result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->GetInputs();
  jresult = new std::vector< UsdShadeInput >((const std::vector< UsdShadeInput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetImplementationSource(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->GetImplementationSource();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetShaderId(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->SetShaderId((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetShaderId(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = (TfToken *) 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2; 
  result = (bool)((UsdShadeShader const *)arg1)->GetShaderId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetSourceAsset__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  SdfAssetPath *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->SetSourceAsset((SdfAssetPath const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetSourceAsset__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  SdfAssetPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (SdfAssetPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfAssetPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->SetSourceAsset((SdfAssetPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetSourceAsset__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  SdfAssetPath *arg2 = (SdfAssetPath *) 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (SdfAssetPath *)jarg2; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->GetSourceAsset(arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetSourceAsset__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  SdfAssetPath *arg2 = (SdfAssetPath *) 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (SdfAssetPath *)jarg2; 
  result = (bool)((UsdShadeShader const *)arg1)->GetSourceAsset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetSourceCode__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  std::string *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->SetSourceCode((std::string const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetSourceCode__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdShadeShader const *)arg1)->SetSourceCode((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetSourceCode__SWIG_0(void * jarg1, char** jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->GetSourceCode(arg2,(TfToken const &)*arg3);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetSourceCode__SWIG_1(void * jarg1, char** jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  result = (bool)((UsdShadeShader const *)arg1)->GetSourceCode(arg2);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetShaderMetadata(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  NdrTokenMap result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = ((UsdShadeShader const *)arg1)->GetShaderMetadata();
  jresult = new NdrTokenMap((const NdrTokenMap &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetShaderMetadataByKey(void * jarg1, void * jarg2) {
  char * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  std::string result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeShader const *)arg1)->GetShaderMetadataByKey((TfToken const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetShaderMetadata(void * jarg1, void * jarg2) {
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  NdrTokenMap *arg2 = 0 ;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (NdrTokenMap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NdrTokenMap const & type is null", 0);
    return ;
  } 
  ((UsdShadeShader const *)arg1)->SetShaderMetadata((NdrTokenMap const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShader_SetShaderMetadataByKey(void * jarg1, void * jarg2, char * jarg3) {
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  ((UsdShadeShader const *)arg1)->SetShaderMetadataByKey((TfToken const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_HasShaderMetadata(void * jarg1) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  result = (bool)((UsdShadeShader const *)arg1)->HasShaderMetadata();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeShader_HasShaderMetadataByKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeShader const *)arg1)->HasShaderMetadataByKey((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShader_ClearShaderMetadata(void * jarg1) {
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  
  arg1 = (UsdShadeShader *)jarg1; 
  ((UsdShadeShader const *)arg1)->ClearShaderMetadata();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShader_ClearShaderMetadataByKey(void * jarg1, void * jarg2) {
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return ;
  } 
  ((UsdShadeShader const *)arg1)->ClearShaderMetadataByKey((TfToken const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShader_GetShaderNodeForSourceType(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeShader *arg1 = (UsdShadeShader *) 0 ;
  TfToken *arg2 = 0 ;
  SdrShaderNodeConstPtr result;
  
  arg1 = (UsdShadeShader *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeShader const *)arg1)->GetShaderNodeForSourceType((TfToken const &)*arg2);
  jresult = new SdrShaderNodeConstPtr((const SdrShaderNodeConstPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_Clear(void * jarg1) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_Add(void * jarg1, void * jarg2) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  UsdShadeShader *arg2 = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (UsdShadeShader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeShader const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((UsdShadeShader const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  std::vector< UsdShadeShader >::size_type result;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  result = ((std::vector< UsdShadeShader > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  std::vector< UsdShadeShader >::size_type result;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  result = ((std::vector< UsdShadeShader > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  std::vector< UsdShadeShader >::size_type arg2 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (std::vector< UsdShadeShader >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShaderVector__SWIG_0() {
  void * jresult ;
  std::vector< UsdShadeShader > *result = 0 ;
  
  result = (std::vector< UsdShadeShader > *)new std::vector< UsdShadeShader >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShaderVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< UsdShadeShader > *arg1 = 0 ;
  std::vector< UsdShadeShader > *result = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdShadeShader > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< UsdShadeShader > *)new std::vector< UsdShadeShader >((std::vector< UsdShadeShader > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeShaderVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< UsdShadeShader > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< UsdShadeShader > *)new_std_vector_Sl_UsdShadeShader_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  UsdShadeShader result;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_UsdShadeShader_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new UsdShadeShader((const UsdShadeShader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  UsdShadeShader *result = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (UsdShadeShader *) &std_vector_Sl_UsdShadeShader_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  UsdShadeShader *arg3 = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdShadeShader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeShader const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdShadeShader_Sg__setitem(arg1,arg2,(UsdShadeShader const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  std::vector< UsdShadeShader > *arg2 = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (std::vector< UsdShadeShader > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdShadeShader > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_UsdShadeShader_Sg__AddRange(arg1,(std::vector< UsdShadeShader > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< UsdShadeShader > *result = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< UsdShadeShader > *)std_vector_Sl_UsdShadeShader_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  UsdShadeShader *arg3 = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (UsdShadeShader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeShader const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdShadeShader_Sg__Insert(arg1,arg2,(UsdShadeShader const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  std::vector< UsdShadeShader > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdShadeShader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdShadeShader > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdShadeShader_Sg__InsertRange(arg1,arg2,(std::vector< UsdShadeShader > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_UsdShadeShader_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdShadeShader_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  UsdShadeShader *arg1 = 0 ;
  int arg2 ;
  std::vector< UsdShadeShader > *result = 0 ;
  
  arg1 = (UsdShadeShader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeShader const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< UsdShadeShader > *)std_vector_Sl_UsdShadeShader_Sg__Repeat((UsdShadeShader const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  std_vector_Sl_UsdShadeShader_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_UsdShadeShader_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdShadeShaderVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  int arg2 ;
  std::vector< UsdShadeShader > *arg3 = 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< UsdShadeShader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< UsdShadeShader > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_UsdShadeShader_Sg__SetRange(arg1,arg2,(std::vector< UsdShadeShader > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeShaderVector(void * jarg1) {
  std::vector< UsdShadeShader > *arg1 = (std::vector< UsdShadeShader > *) 0 ;
  
  arg1 = (std::vector< UsdShadeShader > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeInput__SWIG_0() {
  void * jresult ;
  UsdShadeInput *result = 0 ;
  
  result = (UsdShadeInput *)new UsdShadeInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetFullName(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (TfToken *) &((UsdShadeInput const *)arg1)->GetFullName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetBaseName(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  TfToken result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetBaseName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetTypeName(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetTypeName();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetPrim(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_Get__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  VtValue *arg2 = (VtValue *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (VtValue *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdShadeInput const *)arg1)->Get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_Get__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  VtValue *arg2 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (VtValue *)jarg2; 
  result = (bool)((UsdShadeInput const *)arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_Set__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  VtValue *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdShadeInput const *)arg1)->Set((VtValue const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_Set__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  VtValue *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->Set((VtValue const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeInput_Hash() {
  void * jresult ;
  UsdShadeInput::Hash *result = 0 ;
  
  result = (UsdShadeInput::Hash *)new UsdShadeInput::Hash();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeInput_Hash(void * jarg1) {
  UsdShadeInput::Hash *arg1 = (UsdShadeInput::Hash *) 0 ;
  
  arg1 = (UsdShadeInput::Hash *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_SetRenderType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->SetRenderType((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetRenderType(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  TfToken result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetRenderType();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_HasRenderType(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->HasRenderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeInput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  UsdShadeInput *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeInput *)new UsdShadeInput((UsdAttribute const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_IsInput(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeInput::IsInput((UsdAttribute const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_IsInterfaceInputName(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)UsdShadeInput::IsInterfaceInputName((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetAttr(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (UsdAttribute *) &((UsdShadeInput const *)arg1)->GetAttr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_SetDocumentation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdShadeInput const *)arg1)->SetDocumentation((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetDocumentation(void * jarg1) {
  char * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  std::string result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetDocumentation();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_SetDisplayGroup(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((UsdShadeInput const *)arg1)->SetDisplayGroup((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetDisplayGroup(void * jarg1) {
  char * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  std::string result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetDisplayGroup();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_CanConnect__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdAttribute *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdAttribute *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->CanConnect((UsdAttribute const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_CanConnect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->CanConnect((UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_CanConnect__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->CanConnect((UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ConnectToSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  SdfValueTypeName arg5 ;
  SdfValueTypeName *argp5 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  argp5 = (SdfValueTypeName *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfValueTypeName", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((UsdShadeInput const *)arg1)->ConnectToSource((UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ConnectToSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  result = (bool)((UsdShadeInput const *)arg1)->ConnectToSource((UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ConnectToSource__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->ConnectToSource((UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ConnectToSource__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->ConnectToSource((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ConnectToSource__SWIG_4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->ConnectToSource((UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ConnectToSource__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->ConnectToSource((UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetConnectedSource(void * jarg1, void * jarg2, void * jarg3, UsdShadeAttributeType * jarg4) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  UsdShadeConnectableAPI *arg2 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2; 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = (bool)((UsdShadeInput const *)arg1)->GetConnectedSource(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetRawConnectedSourcePaths(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)((UsdShadeInput const *)arg1)->GetRawConnectedSourcePaths(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_HasConnectedSource(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->HasConnectedSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_IsSourceConnectionFromBaseMaterial(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->IsSourceConnectionFromBaseMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_DisconnectSource(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->DisconnectSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ClearSource(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->ClearSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_SetConnectability(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeInput const *)arg1)->SetConnectability((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeInput_GetConnectability(void * jarg1) {
  void * jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  TfToken result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = ((UsdShadeInput const *)arg1)->GetConnectability();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeInput_ClearConnectability(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1; 
  result = (bool)((UsdShadeInput const *)arg1)->ClearConnectability();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeInput(void * jarg1) {
  UsdShadeInput *arg1 = (UsdShadeInput *) 0 ;
  
  arg1 = (UsdShadeInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeOutput__SWIG_0() {
  void * jresult ;
  UsdShadeOutput *result = 0 ;
  
  result = (UsdShadeOutput *)new UsdShadeOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetFullName(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (TfToken *) &((UsdShadeOutput const *)arg1)->GetFullName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetBaseName(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  TfToken result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = ((UsdShadeOutput const *)arg1)->GetBaseName();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetPrim(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = ((UsdShadeOutput const *)arg1)->GetPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetTypeName(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  SdfValueTypeName result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = ((UsdShadeOutput const *)arg1)->GetTypeName();
  jresult = new SdfValueTypeName((const SdfValueTypeName &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_Set__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  VtValue *arg2 = 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdShadeOutput const *)arg1)->Set((VtValue const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_Set__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  VtValue *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->Set((VtValue const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_SetRenderType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->SetRenderType((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetRenderType(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  TfToken result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = ((UsdShadeOutput const *)arg1)->GetRenderType();
  jresult = new TfToken((const TfToken &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_HasRenderType(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->HasRenderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeOutput__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  UsdShadeOutput *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeOutput *)new UsdShadeOutput((UsdAttribute const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_IsOutput(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeOutput::IsOutput((UsdAttribute const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetAttr(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = ((UsdShadeOutput const *)arg1)->GetAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetProperty(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdProperty *result = 0 ;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (UsdProperty *) &((UsdShadeOutput const *)arg1)->GetProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetRel(void * jarg1) {
  void * jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = ((UsdShadeOutput const *)arg1)->GetRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_IsTerminal(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->IsTerminal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_CanConnect__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdAttribute *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdAttribute *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->CanConnect((UsdAttribute const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_CanConnect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->CanConnect((UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_CanConnect__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->CanConnect((UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ConnectToSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  SdfValueTypeName arg5 ;
  SdfValueTypeName *argp5 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  argp5 = (SdfValueTypeName *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfValueTypeName", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((UsdShadeOutput const *)arg1)->ConnectToSource((UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ConnectToSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  result = (bool)((UsdShadeOutput const *)arg1)->ConnectToSource((UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ConnectToSource__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->ConnectToSource((UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ConnectToSource__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->ConnectToSource((SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ConnectToSource__SWIG_4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->ConnectToSource((UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ConnectToSource__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdShadeOutput const *)arg1)->ConnectToSource((UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetConnectedSource(void * jarg1, void * jarg2, void * jarg3, UsdShadeAttributeType * jarg4) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  UsdShadeConnectableAPI *arg2 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (UsdShadeConnectableAPI *)jarg2; 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = (bool)((UsdShadeOutput const *)arg1)->GetConnectedSource(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_GetRawConnectedSourcePaths(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)((UsdShadeOutput const *)arg1)->GetRawConnectedSourcePaths(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_HasConnectedSource(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->HasConnectedSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_IsSourceConnectionFromBaseMaterial(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->IsSourceConnectionFromBaseMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_DisconnectSource(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->DisconnectSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeOutput_ClearSource(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  result = (bool)((UsdShadeOutput const *)arg1)->ClearSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeOutput(void * jarg1) {
  UsdShadeOutput *arg1 = (UsdShadeOutput *) 0 ;
  
  arg1 = (UsdShadeOutput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeConnectableAPI__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdShadeConnectableAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeConnectableAPI *)new UsdShadeConnectableAPI((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeConnectableAPI__SWIG_1() {
  void * jresult ;
  UsdShadeConnectableAPI *result = 0 ;
  
  result = (UsdShadeConnectableAPI *)new UsdShadeConnectableAPI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeConnectableAPI__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdShadeConnectableAPI *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeConnectableAPI *)new UsdShadeConnectableAPI((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdShadeConnectableAPI(void * jarg1) {
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdShadeConnectableAPI::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdShadeConnectableAPI::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdShadeConnectableAPI result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdShadeConnectableAPI::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdShadeConnectableAPI((const UsdShadeConnectableAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeConnectableAPI__SWIG_3(void * jarg1) {
  void * jresult ;
  UsdShadeShader *arg1 = 0 ;
  UsdShadeConnectableAPI *result = 0 ;
  
  arg1 = (UsdShadeShader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeShader const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeConnectableAPI *)new UsdShadeConnectableAPI((UsdShadeShader const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdShadeConnectableAPI__SWIG_4(void * jarg1) {
  void * jresult ;
  UsdShadeNodeGraph *arg1 = 0 ;
  UsdShadeConnectableAPI *result = 0 ;
  
  arg1 = (UsdShadeNodeGraph *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeNodeGraph const & type is null", 0);
    return 0;
  } 
  result = (UsdShadeConnectableAPI *)new UsdShadeConnectableAPI((UsdShadeNodeGraph const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_IsShader(void * jarg1) {
  unsigned int jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  bool result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  result = (bool)((UsdShadeConnectableAPI const *)arg1)->IsShader();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_IsNodeGraph(void * jarg1) {
  unsigned int jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  bool result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  result = (bool)((UsdShadeConnectableAPI const *)arg1)->IsNodeGraph();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdAttribute *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdAttribute *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeInput const &)*arg1,(UsdAttribute const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeInput const &)*arg1,(UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeInput const &)*arg1,(UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdAttribute *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdAttribute *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeOutput const &)*arg1,(UsdAttribute const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_4(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeOutput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeOutput const &)*arg1,(UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CanConnect__SWIG_6(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::CanConnect((UsdShadeOutput const &)*arg1,(UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  SdfValueTypeName arg5 ;
  SdfValueTypeName *argp5 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  argp5 = (SdfValueTypeName *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfValueTypeName", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdProperty const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdProperty const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdProperty const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  SdfValueTypeName arg5 ;
  SdfValueTypeName *argp5 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  argp5 = (SdfValueTypeName *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfValueTypeName", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeInput const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_4(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeInput const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeInput const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_6(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  SdfValueTypeName arg5 ;
  SdfValueTypeName *argp5 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  argp5 = (SdfValueTypeName *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SdfValueTypeName", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeOutput const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_7(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  UsdShadeAttributeType arg4 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdShadeAttributeType)jarg4; 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeOutput const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = 0 ;
  TfToken *arg3 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeConnectableAPI const & type is null", 0);
    return 0;
  } 
  arg3 = (TfToken *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeOutput const &)*arg1,(UsdShadeConnectableAPI const &)*arg2,(TfToken const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_9(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdProperty const &)*arg1,(SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_10(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeInput const &)*arg1,(SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_11(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeOutput const &)*arg1,(SdfPath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_12(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdProperty const &)*arg1,(UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_13(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeInput const &)*arg1,(UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_14(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeInput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeOutput const &)*arg1,(UsdShadeInput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_15(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdProperty const &)*arg1,(UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_16(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeInput const &)*arg1,(UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ConnectToSource__SWIG_17(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeOutput *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeOutput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ConnectToSource((UsdShadeOutput const &)*arg1,(UsdShadeOutput const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetConnectedSource__SWIG_0(void * jarg1, void * jarg2, void * jarg3, UsdShadeAttributeType * jarg4) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2; 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = (bool)UsdShadeConnectableAPI::GetConnectedSource((UsdProperty const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetConnectedSource__SWIG_1(void * jarg1, void * jarg2, void * jarg3, UsdShadeAttributeType * jarg4) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2; 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = (bool)UsdShadeConnectableAPI::GetConnectedSource((UsdShadeInput const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetConnectedSource__SWIG_2(void * jarg1, void * jarg2, void * jarg3, UsdShadeAttributeType * jarg4) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  UsdShadeConnectableAPI *arg2 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg3 = (TfToken *) 0 ;
  UsdShadeAttributeType *arg4 = (UsdShadeAttributeType *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (UsdShadeConnectableAPI *)jarg2; 
  arg3 = (TfToken *)jarg3; 
  arg4 = (UsdShadeAttributeType *)jarg4; 
  result = (bool)UsdShadeConnectableAPI::GetConnectedSource((UsdShadeOutput const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetRawConnectedSourcePaths__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)UsdShadeConnectableAPI::GetRawConnectedSourcePaths((UsdProperty const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetRawConnectedSourcePaths__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)UsdShadeConnectableAPI::GetRawConnectedSourcePaths((UsdShadeInput const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetRawConnectedSourcePaths__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  SdfPathVector *arg2 = (SdfPathVector *) 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPathVector *)jarg2; 
  result = (bool)UsdShadeConnectableAPI::GetRawConnectedSourcePaths((UsdShadeOutput const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_HasConnectedSource__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::HasConnectedSource((UsdProperty const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_HasConnectedSource__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::HasConnectedSource((UsdShadeInput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_HasConnectedSource__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::HasConnectedSource((UsdShadeOutput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_IsSourceConnectionFromBaseMaterial__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial((UsdProperty const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_IsSourceConnectionFromBaseMaterial__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial((UsdShadeInput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_IsSourceConnectionFromBaseMaterial__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial((UsdShadeOutput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_DisconnectSource__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::DisconnectSource((UsdProperty const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_DisconnectSource__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::DisconnectSource((UsdShadeInput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_DisconnectSource__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::DisconnectSource((UsdShadeOutput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ClearSource__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  UsdProperty *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdProperty *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdProperty const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ClearSource((UsdProperty const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ClearSource__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdShadeInput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeInput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeInput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ClearSource((UsdShadeInput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_ClearSource__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  UsdShadeOutput *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdShadeOutput *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdShadeOutput const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdShadeConnectableAPI::ClearSource((UsdShadeOutput const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CreateOutput(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeConnectableAPI const *)arg1)->CreateOutput((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetOutput(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeOutput result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeConnectableAPI const *)arg1)->GetOutput((TfToken const &)*arg2);
  jresult = new UsdShadeOutput((const UsdShadeOutput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetOutputs(void * jarg1) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeOutput > > result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  result = ((UsdShadeConnectableAPI const *)arg1)->GetOutputs();
  jresult = new std::vector< UsdShadeOutput >((const std::vector< UsdShadeOutput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_CreateInput(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg2 = 0 ;
  SdfValueTypeName *arg3 = 0 ;
  UsdShadeInput result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  arg3 = (SdfValueTypeName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfValueTypeName const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeConnectableAPI const *)arg1)->CreateInput((TfToken const &)*arg2,(SdfValueTypeName const &)*arg3);
  jresult = new UsdShadeInput((const UsdShadeInput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetInput(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  TfToken *arg2 = 0 ;
  UsdShadeInput result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdShadeConnectableAPI const *)arg1)->GetInput((TfToken const &)*arg2);
  jresult = new UsdShadeInput((const UsdShadeInput &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdShadeConnectableAPI_GetInputs(void * jarg1) {
  void * jresult ;
  UsdShadeConnectableAPI *arg1 = (UsdShadeConnectableAPI *) 0 ;
  SwigValueWrapper< std::vector< UsdShadeInput > > result;
  
  arg1 = (UsdShadeConnectableAPI *)jarg1; 
  result = ((UsdShadeConnectableAPI const *)arg1)->GetInputs();
  jresult = new std::vector< UsdShadeInput >((const std::vector< UsdShadeInput > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelAnimMapper__SWIG_0() {
  void * jresult ;
  UsdSkelAnimMapper *result = 0 ;
  
  result = (UsdSkelAnimMapper *)new UsdSkelAnimMapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelAnimMapper__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  VtTokenArray *arg1 = 0 ;
  VtTokenArray *arg2 = 0 ;
  UsdSkelAnimMapper *result = 0 ;
  
  arg1 = (VtTokenArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtTokenArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtTokenArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtTokenArray const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelAnimMapper *)new UsdSkelAnimMapper((VtTokenArray const &)*arg1,(VtTokenArray const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelAnimMapper__SWIG_2(void * jarg1, unsigned long jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  size_t arg2 ;
  TfToken *arg3 = (TfToken *) 0 ;
  size_t arg4 ;
  UsdSkelAnimMapper *result = 0 ;
  
  arg1 = (TfToken *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (TfToken *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (UsdSkelAnimMapper *)new UsdSkelAnimMapper((TfToken const *)arg1,arg2,(TfToken const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_Remap__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  VtValue *arg2 = 0 ;
  VtValue *arg3 = (VtValue *) 0 ;
  int arg4 ;
  VtValue *arg5 = 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (VtValue *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->Remap((VtValue const &)*arg2,arg3,arg4,(VtValue const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_Remap__SWIG_4(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  VtValue *arg2 = 0 ;
  VtValue *arg3 = (VtValue *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->Remap((VtValue const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_Remap__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  VtValue *arg2 = 0 ;
  VtValue *arg3 = (VtValue *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = (VtValue *)jarg3; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->Remap((VtValue const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_RemapTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtMatrix4dArray *arg3 = (VtMatrix4dArray *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtMatrix4dArray *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->RemapTransforms((VtMatrix4dArray const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_RemapTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtMatrix4dArray *arg3 = (VtMatrix4dArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtMatrix4dArray *)jarg3; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->RemapTransforms((VtMatrix4dArray const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_IsIdentity(void * jarg1) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_IsSparse(void * jarg1) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->IsSparse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_IsNull(void * jarg1) {
  unsigned int jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  result = (bool)((UsdSkelAnimMapper const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdSkelAnimMapper_size(void * jarg1) {
  unsigned long jresult ;
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  size_t result;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  result = ((UsdSkelAnimMapper const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelAnimMapper(void * jarg1) {
  UsdSkelAnimMapper *arg1 = (UsdSkelAnimMapper *) 0 ;
  
  arg1 = (UsdSkelAnimMapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelAnimQuery() {
  void * jresult ;
  UsdSkelAnimQuery *result = 0 ;
  
  result = (UsdSkelAnimQuery *)new UsdSkelAnimQuery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_45(void * jarg1) {
  unsigned long jresult ;
  UsdSkelAnimQuery *arg1 = 0 ;
  size_t result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelAnimQuery const & type is null", 0);
    return 0;
  } 
  result = hash_value((UsdSkelAnimQuery const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetPrim(void * jarg1) {
  void * jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  result = ((UsdSkelAnimQuery const *)arg1)->GetPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_ComputeJointLocalTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->ComputeJointLocalTransforms(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_ComputeJointLocalTransforms__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->ComputeJointLocalTransforms(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_ComputeJointLocalTransformComponents__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  VtQuatfArray *arg3 = (VtQuatfArray *) 0 ;
  VtVec3hArray *arg4 = (VtVec3hArray *) 0 ;
  UsdTimeCode arg5 ;
  UsdTimeCode *argp5 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  arg3 = (VtQuatfArray *)jarg3; 
  arg4 = (VtVec3hArray *)jarg4; 
  argp5 = (UsdTimeCode *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->ComputeJointLocalTransformComponents(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_ComputeJointLocalTransformComponents__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  VtQuatfArray *arg3 = (VtQuatfArray *) 0 ;
  VtVec3hArray *arg4 = (VtVec3hArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  arg3 = (VtQuatfArray *)jarg3; 
  arg4 = (VtVec3hArray *)jarg4; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->ComputeJointLocalTransformComponents(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_ComputeBlendShapeWeights__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtFloatArray *arg2 = (VtFloatArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (VtFloatArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->ComputeBlendShapeWeights(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_ComputeBlendShapeWeights__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtFloatArray *arg2 = (VtFloatArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (VtFloatArray *)jarg2; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->ComputeBlendShapeWeights(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetJointTransformTimeSamples(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->GetJointTransformTimeSamples(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetJointTransformTimeSamplesInInterval(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  GfInterval *arg2 = 0 ;
  std::vector< double > *arg3 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< double > *)jarg3; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->GetJointTransformTimeSamplesInInterval((GfInterval const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetJointTransformAttributes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  std::vector< UsdAttribute > *arg2 = (std::vector< UsdAttribute > *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  arg2 = (std::vector< UsdAttribute > *)jarg2; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->GetJointTransformAttributes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_JointTransformsMightBeTimeVarying(void * jarg1) {
  unsigned int jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  bool result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  result = (bool)((UsdSkelAnimQuery const *)arg1)->JointTransformsMightBeTimeVarying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetJointOrder(void * jarg1) {
  void * jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtTokenArray result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  result = ((UsdSkelAnimQuery const *)arg1)->GetJointOrder();
  jresult = new VtTokenArray((const VtTokenArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetBlendShapeOrder(void * jarg1) {
  void * jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  VtTokenArray result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  result = ((UsdSkelAnimQuery const *)arg1)->GetBlendShapeOrder();
  jresult = new VtTokenArray((const VtTokenArray &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdSkelAnimQuery_GetDescription(void * jarg1) {
  char * jresult ;
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  std::string result;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  result = ((UsdSkelAnimQuery const *)arg1)->GetDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelAnimQuery(void * jarg1) {
  UsdSkelAnimQuery *arg1 = (UsdSkelAnimQuery *) 0 ;
  
  arg1 = (UsdSkelAnimQuery *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBlendShape__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelBlendShape *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelBlendShape *)new UsdSkelBlendShape((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBlendShape__SWIG_1() {
  void * jresult ;
  UsdSkelBlendShape *result = 0 ;
  
  result = (UsdSkelBlendShape *)new UsdSkelBlendShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBlendShape__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSkelBlendShape *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelBlendShape *)new UsdSkelBlendShape((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelBlendShape(void * jarg1) {
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdSkelBlendShape::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdSkelBlendShape::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelBlendShape result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelBlendShape::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelBlendShape((const UsdSkelBlendShape &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelBlendShape result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelBlendShape::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelBlendShape((const UsdSkelBlendShape &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetOffsetsAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  result = ((UsdSkelBlendShape const *)arg1)->GetOffsetsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreateOffsetsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBlendShape const *)arg1)->CreateOffsetsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreateOffsetsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBlendShape const *)arg1)->CreateOffsetsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreateOffsetsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  result = ((UsdSkelBlendShape const *)arg1)->CreateOffsetsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetPointIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  result = ((UsdSkelBlendShape const *)arg1)->GetPointIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreatePointIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBlendShape const *)arg1)->CreatePointIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreatePointIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBlendShape const *)arg1)->CreatePointIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreatePointIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  result = ((UsdSkelBlendShape const *)arg1)->CreatePointIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_CreateInbetween(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  TfToken *arg2 = 0 ;
  UsdSkelInbetweenShape result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBlendShape const *)arg1)->CreateInbetween((TfToken const &)*arg2);
  jresult = new UsdSkelInbetweenShape((const UsdSkelInbetweenShape &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetInbetween(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  TfToken *arg2 = 0 ;
  UsdSkelInbetweenShape result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBlendShape const *)arg1)->GetInbetween((TfToken const &)*arg2);
  jresult = new UsdSkelInbetweenShape((const UsdSkelInbetweenShape &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_HasInbetween(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  TfToken *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  arg2 = (TfToken *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TfToken const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdSkelBlendShape const *)arg1)->HasInbetween((TfToken const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetInbetweens(void * jarg1) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  SwigValueWrapper< std::vector< UsdSkelInbetweenShape > > result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  result = ((UsdSkelBlendShape const *)arg1)->GetInbetweens();
  jresult = new std::vector< UsdSkelInbetweenShape >((const std::vector< UsdSkelInbetweenShape > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_GetAuthoredInbetweens(void * jarg1) {
  void * jresult ;
  UsdSkelBlendShape *arg1 = (UsdSkelBlendShape *) 0 ;
  SwigValueWrapper< std::vector< UsdSkelInbetweenShape > > result;
  
  arg1 = (UsdSkelBlendShape *)jarg1; 
  result = ((UsdSkelBlendShape const *)arg1)->GetAuthoredInbetweens();
  jresult = new std::vector< UsdSkelInbetweenShape >((const std::vector< UsdSkelInbetweenShape > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelCache() {
  void * jresult ;
  UsdSkelCache *result = 0 ;
  
  result = (UsdSkelCache *)new UsdSkelCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_UsdSkelCache_Clear(void * jarg1) {
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  
  arg1 = (UsdSkelCache *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelCache_Populate(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  UsdSkelRoot *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSkelCache *)jarg1; 
  arg2 = (UsdSkelRoot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelRoot const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Populate((UsdSkelRoot const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelCache_GetSkelQuery(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  UsdSkelSkeleton *arg2 = 0 ;
  UsdSkelSkeletonQuery result;
  
  arg1 = (UsdSkelCache *)jarg1; 
  arg2 = (UsdSkelSkeleton *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelSkeleton const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelCache const *)arg1)->GetSkelQuery((UsdSkelSkeleton const &)*arg2);
  jresult = new UsdSkelSkeletonQuery((const UsdSkelSkeletonQuery &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelCache_GetAnimQuery(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  UsdSkelAnimQuery result;
  
  arg1 = (UsdSkelCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelCache const *)arg1)->GetAnimQuery((UsdPrim const &)*arg2);
  jresult = new UsdSkelAnimQuery((const UsdSkelAnimQuery &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelCache_GetSkinningQuery(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  UsdPrim *arg2 = 0 ;
  UsdSkelSkinningQuery result;
  
  arg1 = (UsdSkelCache *)jarg1; 
  arg2 = (UsdPrim *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelCache const *)arg1)->GetSkinningQuery((UsdPrim const &)*arg2);
  jresult = new UsdSkelSkinningQuery((const UsdSkelSkinningQuery &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelCache_ComputeSkelBindings(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  UsdSkelRoot *arg2 = 0 ;
  std::vector< UsdSkelBinding > *arg3 = (std::vector< UsdSkelBinding > *) 0 ;
  bool result;
  
  arg1 = (UsdSkelCache *)jarg1; 
  arg2 = (UsdSkelRoot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelRoot const & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< UsdSkelBinding > *)jarg3; 
  result = (bool)((UsdSkelCache const *)arg1)->ComputeSkelBindings((UsdSkelRoot const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelCache_ComputeSkelBinding(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  UsdSkelRoot *arg2 = 0 ;
  UsdSkelSkeleton *arg3 = 0 ;
  UsdSkelBinding *arg4 = (UsdSkelBinding *) 0 ;
  bool result;
  
  arg1 = (UsdSkelCache *)jarg1; 
  arg2 = (UsdSkelRoot *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelRoot const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdSkelSkeleton *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelSkeleton const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdSkelBinding *)jarg4; 
  result = (bool)((UsdSkelCache const *)arg1)->ComputeSkelBinding((UsdSkelRoot const &)*arg2,(UsdSkelSkeleton const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelCache(void * jarg1) {
  UsdSkelCache *arg1 = (UsdSkelCache *) 0 ;
  
  arg1 = (UsdSkelCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelInbetweenShape__SWIG_0() {
  void * jresult ;
  UsdSkelInbetweenShape *result = 0 ;
  
  result = (UsdSkelInbetweenShape *)new UsdSkelInbetweenShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelInbetweenShape__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdAttribute *arg1 = 0 ;
  UsdSkelInbetweenShape *result = 0 ;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelInbetweenShape *)new UsdSkelInbetweenShape((UsdAttribute const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_GetWeight(void * jarg1) {
  float jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  float result;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  result = (float)((UsdSkelInbetweenShape const *)arg1)->GetWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_SetWeight(void * jarg1, float jarg2) {
  unsigned int jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->SetWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_HasAuthoredWeight(void * jarg1) {
  unsigned int jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  bool result;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  result = (bool)((UsdSkelInbetweenShape const *)arg1)->HasAuthoredWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_GetOffsets(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2; 
  result = (bool)((UsdSkelInbetweenShape const *)arg1)->GetOffsets(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_SetOffsets(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  VtVec3fArray *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  arg2 = (VtVec3fArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  result = (bool)((UsdSkelInbetweenShape const *)arg1)->SetOffsets((VtVec3fArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_IsInbetween(void * jarg1) {
  unsigned int jresult ;
  UsdAttribute *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdAttribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelInbetweenShape::IsInbetween((UsdAttribute const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_GetAttr(void * jarg1) {
  void * jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  result = (UsdAttribute *) &((UsdSkelInbetweenShape const *)arg1)->GetAttr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelInbetweenShape_IsDefined(void * jarg1) {
  unsigned int jresult ;
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  bool result;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  result = (bool)((UsdSkelInbetweenShape const *)arg1)->IsDefined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelInbetweenShape(void * jarg1) {
  UsdSkelInbetweenShape *arg1 = (UsdSkelInbetweenShape *) 0 ;
  
  arg1 = (UsdSkelInbetweenShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelPackedJointAnimation__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelPackedJointAnimation *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelPackedJointAnimation *)new UsdSkelPackedJointAnimation((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelPackedJointAnimation__SWIG_1() {
  void * jresult ;
  UsdSkelPackedJointAnimation *result = 0 ;
  
  result = (UsdSkelPackedJointAnimation *)new UsdSkelPackedJointAnimation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelPackedJointAnimation__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSkelPackedJointAnimation *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelPackedJointAnimation *)new UsdSkelPackedJointAnimation((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelPackedJointAnimation(void * jarg1) {
  UsdSkelPackedJointAnimation *arg1 = (UsdSkelPackedJointAnimation *) 0 ;
  
  arg1 = (UsdSkelPackedJointAnimation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelPackedJointAnimation_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdSkelPackedJointAnimation::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelPackedJointAnimation_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdSkelPackedJointAnimation::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelPackedJointAnimation_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelPackedJointAnimation result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelPackedJointAnimation::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelPackedJointAnimation((const UsdSkelPackedJointAnimation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelPackedJointAnimation_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelPackedJointAnimation result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelPackedJointAnimation::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelPackedJointAnimation((const UsdSkelPackedJointAnimation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelRoot__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelRoot *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelRoot *)new UsdSkelRoot((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelRoot__SWIG_1() {
  void * jresult ;
  UsdSkelRoot *result = 0 ;
  
  result = (UsdSkelRoot *)new UsdSkelRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelRoot__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSkelRoot *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelRoot *)new UsdSkelRoot((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelRoot(void * jarg1) {
  UsdSkelRoot *arg1 = (UsdSkelRoot *) 0 ;
  
  arg1 = (UsdSkelRoot *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelRoot_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdSkelRoot::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelRoot_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdSkelRoot::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelRoot_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelRoot result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelRoot::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelRoot((const UsdSkelRoot &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelRoot_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelRoot result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelRoot::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelRoot((const UsdSkelRoot &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelRoot_Find(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelRoot result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdSkelRoot::Find((UsdPrim const &)*arg1);
  jresult = new UsdSkelRoot((const UsdSkelRoot &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelSkeleton__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelSkeleton *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelSkeleton *)new UsdSkelSkeleton((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelSkeleton__SWIG_1() {
  void * jresult ;
  UsdSkelSkeleton *result = 0 ;
  
  result = (UsdSkelSkeleton *)new UsdSkelSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelSkeleton__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSkelSkeleton *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelSkeleton *)new UsdSkelSkeleton((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelSkeleton(void * jarg1) {
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdSkelSkeleton::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdSkelSkeleton::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelSkeleton result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelSkeleton::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelSkeleton((const UsdSkelSkeleton &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_Define(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelSkeleton result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelSkeleton::Define((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelSkeleton((const UsdSkelSkeleton &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_GetJointsAttr(void * jarg1) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  result = ((UsdSkelSkeleton const *)arg1)->GetJointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateJointsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelSkeleton const *)arg1)->CreateJointsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateJointsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelSkeleton const *)arg1)->CreateJointsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateJointsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  result = ((UsdSkelSkeleton const *)arg1)->CreateJointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_GetBindTransformsAttr(void * jarg1) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  result = ((UsdSkelSkeleton const *)arg1)->GetBindTransformsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateBindTransformsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelSkeleton const *)arg1)->CreateBindTransformsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateBindTransformsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelSkeleton const *)arg1)->CreateBindTransformsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateBindTransformsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  result = ((UsdSkelSkeleton const *)arg1)->CreateBindTransformsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_GetRestTransformsAttr(void * jarg1) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  result = ((UsdSkelSkeleton const *)arg1)->GetRestTransformsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateRestTransformsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelSkeleton const *)arg1)->CreateRestTransformsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateRestTransformsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelSkeleton const *)arg1)->CreateRestTransformsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_CreateRestTransformsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = (UsdSkelSkeleton *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelSkeleton *)jarg1; 
  result = ((UsdSkelSkeleton const *)arg1)->CreateRestTransformsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelSkeletonQuery() {
  void * jresult ;
  UsdSkelSkeletonQuery *result = 0 ;
  
  result = (UsdSkelSkeletonQuery *)new UsdSkelSkeletonQuery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_hash_value__SWIG_46(void * jarg1) {
  unsigned long jresult ;
  UsdSkelSkeletonQuery *arg1 = 0 ;
  size_t result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelSkeletonQuery const & type is null", 0);
    return 0;
  } 
  result = hash_value((UsdSkelSkeletonQuery const &)*arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetPrim(void * jarg1) {
  void * jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = ((UsdSkelSkeletonQuery const *)arg1)->GetPrim();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetSkeleton(void * jarg1) {
  void * jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  UsdSkelSkeleton *result = 0 ;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = (UsdSkelSkeleton *) &((UsdSkelSkeletonQuery const *)arg1)->GetSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetAnimQuery(void * jarg1) {
  void * jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  UsdSkelAnimQuery *result = 0 ;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = (UsdSkelAnimQuery *) &((UsdSkelSkeletonQuery const *)arg1)->GetAnimQuery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetTopology(void * jarg1) {
  void * jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  UsdSkelTopology *result = 0 ;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = (UsdSkelTopology *) &((UsdSkelSkeletonQuery const *)arg1)->GetTopology();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetJointOrder(void * jarg1) {
  void * jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtTokenArray result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = ((UsdSkelSkeletonQuery const *)arg1)->GetJointOrder();
  jresult = new VtTokenArray((const VtTokenArray &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeJointLocalTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdTimeCode arg3 ;
  bool arg4 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeJointLocalTransforms(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeJointLocalTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeJointLocalTransforms(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeJointSkelTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdTimeCode arg3 ;
  bool arg4 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeJointSkelTransforms(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeJointSkelTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeJointSkelTransforms(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeJointWorldTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdGeomXformCache *arg3 = (UsdGeomXformCache *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  arg3 = (UsdGeomXformCache *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeJointWorldTransforms(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeJointWorldTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdGeomXformCache *arg3 = (UsdGeomXformCache *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  arg3 = (UsdGeomXformCache *)jarg3; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeJointWorldTransforms(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_ComputeSkinningTransforms(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  UsdTimeCode arg3 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->ComputeSkinningTransforms(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetJointWorldBindTransforms(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  VtMatrix4dArray *arg2 = (VtMatrix4dArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2; 
  result = (bool)((UsdSkelSkeletonQuery const *)arg1)->GetJointWorldBindTransforms(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdSkelSkeletonQuery_GetDescription(void * jarg1) {
  char * jresult ;
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  std::string result;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  result = ((UsdSkelSkeletonQuery const *)arg1)->GetDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelSkeletonQuery(void * jarg1) {
  UsdSkelSkeletonQuery *arg1 = (UsdSkelSkeletonQuery *) 0 ;
  
  arg1 = (UsdSkelSkeletonQuery *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelSkinningQuery__SWIG_0() {
  void * jresult ;
  UsdSkelSkinningQuery *result = 0 ;
  
  result = (UsdSkelSkinningQuery *)new UsdSkelSkinningQuery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelSkinningQuery__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  VtTokenArray *arg2 = 0 ;
  UsdAttribute *arg3 = 0 ;
  UsdAttribute *arg4 = 0 ;
  UsdAttribute *arg5 = 0 ;
  UsdAttribute *arg6 = 0 ;
  UsdSkelSkinningQuery *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  arg2 = (VtTokenArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtTokenArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdAttribute *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  arg4 = (UsdAttribute *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  arg5 = (UsdAttribute *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  arg6 = (UsdAttribute *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdAttribute const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelSkinningQuery *)new UsdSkelSkinningQuery((UsdPrim const &)*arg1,(VtTokenArray const &)*arg2,(UsdAttribute const &)*arg3,(UsdAttribute const &)*arg4,(UsdAttribute const &)*arg5,(UsdAttribute const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_IsValid(void * jarg1) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetPrim(void * jarg1) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  UsdPrim *result = 0 ;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (UsdPrim *) &((UsdSkelSkinningQuery const *)arg1)->GetPrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetNumInfluencesPerComponent(void * jarg1) {
  int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  int result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (int)((UsdSkelSkinningQuery const *)arg1)->GetNumInfluencesPerComponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetInterpolation(void * jarg1) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  TfToken *result = 0 ;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (TfToken *) &((UsdSkelSkinningQuery const *)arg1)->GetInterpolation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_IsRigidlyDeformed(void * jarg1) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->IsRigidlyDeformed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetGeomBindTransformAttr(void * jarg1) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  UsdAttribute *result = 0 ;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (UsdAttribute *) &((UsdSkelSkinningQuery const *)arg1)->GetGeomBindTransformAttr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetJointIndicesPrimvar(void * jarg1) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  UsdGeomPrimvar *result = 0 ;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (UsdGeomPrimvar *) &((UsdSkelSkinningQuery const *)arg1)->GetJointIndicesPrimvar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetJointWeightsPrimvar(void * jarg1) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  UsdGeomPrimvar *result = 0 ;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = (UsdGeomPrimvar *) &((UsdSkelSkinningQuery const *)arg1)->GetJointWeightsPrimvar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetJointOrder(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtTokenArray *arg2 = (VtTokenArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtTokenArray *)jarg2; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->GetJointOrder(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetTimeSamples(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (std::vector< double > *)jarg2; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->GetTimeSamples(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeJointInfluences__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  VtFloatArray *arg3 = (VtFloatArray *) 0 ;
  UsdTimeCode arg4 ;
  UsdTimeCode *argp4 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  arg3 = (VtFloatArray *)jarg3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeJointInfluences(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeJointInfluences__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtIntArray *arg2 = (VtIntArray *) 0 ;
  VtFloatArray *arg3 = (VtFloatArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtIntArray *)jarg2; 
  arg3 = (VtFloatArray *)jarg3; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeJointInfluences(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeVaryingJointInfluences__SWIG_0(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  size_t arg2 ;
  VtIntArray *arg3 = (VtIntArray *) 0 ;
  VtFloatArray *arg4 = (VtFloatArray *) 0 ;
  UsdTimeCode arg5 ;
  UsdTimeCode *argp5 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtIntArray *)jarg3; 
  arg4 = (VtFloatArray *)jarg4; 
  argp5 = (UsdTimeCode *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeVaryingJointInfluences(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeVaryingJointInfluences__SWIG_1(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  size_t arg2 ;
  VtIntArray *arg3 = (VtIntArray *) 0 ;
  VtFloatArray *arg4 = (VtFloatArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtIntArray *)jarg3; 
  arg4 = (VtFloatArray *)jarg4; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeVaryingJointInfluences(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeSkinnedPoints__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  UsdTimeCode arg4 ;
  UsdTimeCode *argp4 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeSkinnedPoints((VtMatrix4dArray const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeSkinnedPoints__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3fArray *)jarg3; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeSkinnedPoints((VtMatrix4dArray const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeSkinnedTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  GfMatrix4d *arg3 = (GfMatrix4d *) 0 ;
  UsdTimeCode arg4 ;
  UsdTimeCode *argp4 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (GfMatrix4d *)jarg3; 
  argp4 = (UsdTimeCode *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeSkinnedTransform((VtMatrix4dArray const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeSkinnedTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  GfMatrix4d *arg3 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (GfMatrix4d *)jarg3; 
  result = (bool)((UsdSkelSkinningQuery const *)arg1)->ComputeSkinnedTransform((VtMatrix4dArray const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_ComputeExtentsPadding(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  UsdGeomBoundable *arg3 = 0 ;
  float result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (UsdGeomBoundable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdGeomBoundable const & type is null", 0);
    return 0;
  } 
  result = (float)((UsdSkelSkinningQuery const *)arg1)->ComputeExtentsPadding((VtMatrix4dArray const &)*arg2,(UsdGeomBoundable const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetGeomBindTransform__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  UsdTimeCode arg2 ;
  UsdTimeCode *argp2 ;
  GfMatrix4d result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((UsdSkelSkinningQuery const *)arg1)->GetGeomBindTransform(arg2);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetGeomBindTransform__SWIG_1(void * jarg1) {
  void * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  GfMatrix4d result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = ((UsdSkelSkinningQuery const *)arg1)->GetGeomBindTransform();
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pxr_UsdSkelSkinningQuery_GetDescription(void * jarg1) {
  char * jresult ;
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  std::string result;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  result = ((UsdSkelSkinningQuery const *)arg1)->GetDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelSkinningQuery(void * jarg1) {
  UsdSkelSkinningQuery *arg1 = (UsdSkelSkinningQuery *) 0 ;
  
  arg1 = (UsdSkelSkinningQuery *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelTopology__SWIG_0() {
  void * jresult ;
  UsdSkelTopology *result = 0 ;
  
  result = (UsdSkelTopology *)new UsdSkelTopology();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelTopology__SWIG_1(void * jarg1) {
  void * jresult ;
  VtTokenArray *arg1 = 0 ;
  UsdSkelTopology *result = 0 ;
  
  arg1 = (VtTokenArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtTokenArray const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelTopology *)new UsdSkelTopology((VtTokenArray const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelTopology__SWIG_2(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  TfToken *arg1 = (TfToken *) 0 ;
  size_t arg2 ;
  UsdSkelTopology *result = 0 ;
  
  arg1 = (TfToken *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (UsdSkelTopology *)new UsdSkelTopology((TfToken const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelTopology__SWIG_3(void * jarg1) {
  void * jresult ;
  SdfPathVector *arg1 = 0 ;
  UsdSkelTopology *result = 0 ;
  
  arg1 = (SdfPathVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPathVector const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelTopology *)new UsdSkelTopology((SdfPathVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelTopology__SWIG_4(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  SdfPath *arg1 = (SdfPath *) 0 ;
  size_t arg2 ;
  UsdSkelTopology *result = 0 ;
  
  arg1 = (SdfPath *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (UsdSkelTopology *)new UsdSkelTopology((SdfPath const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelTopology__SWIG_5(void * jarg1) {
  void * jresult ;
  VtIntArray *arg1 = 0 ;
  UsdSkelTopology *result = 0 ;
  
  arg1 = (VtIntArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelTopology *)new UsdSkelTopology((VtIntArray const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelTopology_Validate__SWIG_0(void * jarg1, char** jarg2) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = (UsdSkelTopology *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1; 
  //typemap in
  std::string temp;
  arg2 = &temp; 
  
  result = (bool)((UsdSkelTopology const *)arg1)->Validate(arg2);
  jresult = result; 
  
  //Typemap argout in c++ file.
  //This will convert c++ string to c# string
  *jarg2 = SWIG_csharp_string_callback(arg2->c_str());
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelTopology_Validate__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = (UsdSkelTopology *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1; 
  result = (bool)((UsdSkelTopology const *)arg1)->Validate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelTopology_GetParentIndices(void * jarg1) {
  void * jresult ;
  UsdSkelTopology *arg1 = (UsdSkelTopology *) 0 ;
  VtIntArray *result = 0 ;
  
  arg1 = (UsdSkelTopology *)jarg1; 
  result = (VtIntArray *) &((UsdSkelTopology const *)arg1)->GetParentIndices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_UsdSkelTopology_GetNumJoints(void * jarg1) {
  unsigned long jresult ;
  UsdSkelTopology *arg1 = (UsdSkelTopology *) 0 ;
  size_t result;
  
  arg1 = (UsdSkelTopology *)jarg1; 
  result = ((UsdSkelTopology const *)arg1)->GetNumJoints();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pxr_UsdSkelTopology_GetParent(void * jarg1, unsigned long jarg2) {
  int jresult ;
  UsdSkelTopology *arg1 = (UsdSkelTopology *) 0 ;
  size_t arg2 ;
  int result;
  
  arg1 = (UsdSkelTopology *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)((UsdSkelTopology const *)arg1)->GetParent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelTopology(void * jarg1) {
  UsdSkelTopology *arg1 = (UsdSkelTopology *) 0 ;
  
  arg1 = (UsdSkelTopology *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelIsSkelAnimationPrim(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelIsSkelAnimationPrim((UsdPrim const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelIsSkinnablePrim(void * jarg1) {
  unsigned int jresult ;
  UsdPrim *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelIsSkinnablePrim((UsdPrim const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointLocalTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtMatrix4dArray *arg3 = 0 ;
  VtMatrix4dArray *arg4 = (VtMatrix4dArray *) 0 ;
  GfMatrix4d *arg5 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtMatrix4dArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg4 = (VtMatrix4dArray *)jarg4; 
  arg5 = (GfMatrix4d *)jarg5; 
  result = (bool)UsdSkelComputeJointLocalTransforms((UsdSkelTopology const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2,(VtArray< GfMatrix4d > const &)*arg3,arg4,(GfMatrix4d const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointLocalTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtMatrix4dArray *arg3 = 0 ;
  VtMatrix4dArray *arg4 = (VtMatrix4dArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtMatrix4dArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg4 = (VtMatrix4dArray *)jarg4; 
  result = (bool)UsdSkelComputeJointLocalTransforms((UsdSkelTopology const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2,(VtArray< GfMatrix4d > const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointLocalTransforms__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg3 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg5 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (GfMatrix4d *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  arg5 = (GfMatrix4d *)jarg5; 
  result = (bool)UsdSkelComputeJointLocalTransforms((UsdSkelTopology const &)*arg1,(GfMatrix4d const *)arg2,(GfMatrix4d const *)arg3,arg4,(GfMatrix4d const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointLocalTransforms__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg3 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (GfMatrix4d *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  result = (bool)UsdSkelComputeJointLocalTransforms((UsdSkelTopology const &)*arg1,(GfMatrix4d const *)arg2,(GfMatrix4d const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelConcatJointTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtMatrix4dArray *arg3 = (VtMatrix4dArray *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtMatrix4dArray *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  result = (bool)UsdSkelConcatJointTransforms((UsdSkelTopology const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2,arg3,(GfMatrix4d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelConcatJointTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtMatrix4dArray *arg3 = (VtMatrix4dArray *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtMatrix4dArray *)jarg3; 
  result = (bool)UsdSkelConcatJointTransforms((UsdSkelTopology const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelConcatJointTransforms__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg3 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (GfMatrix4d *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  result = (bool)UsdSkelConcatJointTransforms((UsdSkelTopology const &)*arg1,(GfMatrix4d const *)arg2,arg3,(GfMatrix4d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelConcatJointTransforms__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdSkelTopology *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  GfMatrix4d *arg3 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (UsdSkelTopology *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelTopology const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (GfMatrix4d *)jarg3; 
  result = (bool)UsdSkelConcatJointTransforms((UsdSkelTopology const &)*arg1,(GfMatrix4d const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointsExtent__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  unsigned int jresult ;
  VtMatrix4dArray *arg1 = 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  float arg3 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (VtMatrix4dArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtVec3fArray *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  result = (bool)UsdSkelComputeJointsExtent((VtArray< GfMatrix4d > const &)*arg1,arg2,arg3,(GfMatrix4d const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointsExtent__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  VtMatrix4dArray *arg1 = 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (VtMatrix4dArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtVec3fArray *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)UsdSkelComputeJointsExtent((VtArray< GfMatrix4d > const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointsExtent__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VtMatrix4dArray *arg1 = 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (VtMatrix4dArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtVec3fArray *)jarg2; 
  result = (bool)UsdSkelComputeJointsExtent((VtArray< GfMatrix4d > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointsExtent__SWIG_3(void * jarg1, unsigned long jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  size_t arg2 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  float arg4 ;
  GfMatrix4d *arg5 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtVec3fArray *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (GfMatrix4d *)jarg5; 
  result = (bool)UsdSkelComputeJointsExtent((GfMatrix4d const *)arg1,arg2,arg3,arg4,(GfMatrix4d const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelComputeJointsExtent__SWIG_4(void * jarg1, unsigned long jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  size_t arg2 ;
  VtVec3fArray *arg3 = (VtVec3fArray *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (VtVec3fArray *)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)UsdSkelComputeJointsExtent((GfMatrix4d const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelDecomposeTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfRotation *arg3 = (GfRotation *) 0 ;
  GfVec3h *arg4 = (GfVec3h *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfRotation *)jarg3; 
  arg4 = (GfVec3h *)jarg4; 
  result = (bool)UsdSkelDecomposeTransform((GfMatrix4d const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelDecomposeTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfQuatf *arg3 = (GfQuatf *) 0 ;
  GfVec3h *arg4 = (GfVec3h *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfQuatf *)jarg3; 
  arg4 = (GfVec3h *)jarg4; 
  result = (bool)UsdSkelDecomposeTransform((GfMatrix4d const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelDecomposeTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  VtMatrix4dArray *arg1 = 0 ;
  VtVec3fArray *arg2 = (VtVec3fArray *) 0 ;
  VtQuatfArray *arg3 = (VtQuatfArray *) 0 ;
  VtVec3hArray *arg4 = (VtVec3hArray *) 0 ;
  bool result;
  
  arg1 = (VtMatrix4dArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtVec3fArray *)jarg2; 
  arg3 = (VtQuatfArray *)jarg3; 
  arg4 = (VtVec3hArray *)jarg4; 
  result = (bool)UsdSkelDecomposeTransforms((VtArray< GfMatrix4d > const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelDecomposeTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned long jarg5) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = (GfMatrix4d *) 0 ;
  GfVec3f *arg2 = (GfVec3f *) 0 ;
  GfQuatf *arg3 = (GfQuatf *) 0 ;
  GfVec3h *arg4 = (GfVec3h *) 0 ;
  size_t arg5 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1; 
  arg2 = (GfVec3f *)jarg2; 
  arg3 = (GfQuatf *)jarg3; 
  arg4 = (GfVec3h *)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (bool)UsdSkelDecomposeTransforms((GfMatrix4d const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelMakeTransform__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfMatrix3f *arg2 = 0 ;
  GfVec3h *arg3 = 0 ;
  GfMatrix4d result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix3f *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix3f const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3h *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = UsdSkelMakeTransform((GfVec3f const &)*arg1,(GfMatrix3f const &)*arg2,(GfVec3h const &)*arg3);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelMakeTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  GfVec3f *arg1 = 0 ;
  GfQuatf *arg2 = 0 ;
  GfVec3h *arg3 = 0 ;
  GfMatrix4d result;
  
  arg1 = (GfVec3f *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3f const & type is null", 0);
    return 0;
  } 
  arg2 = (GfQuatf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfQuatf const & type is null", 0);
    return 0;
  } 
  arg3 = (GfVec3h *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfVec3h const & type is null", 0);
    return 0;
  } 
  result = UsdSkelMakeTransform((GfVec3f const &)*arg1,(GfQuatf const &)*arg2,(GfVec3h const &)*arg3);
  jresult = new GfMatrix4d((const GfMatrix4d &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelMakeTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  VtVec3fArray *arg1 = 0 ;
  VtQuatfArray *arg2 = 0 ;
  VtVec3hArray *arg3 = 0 ;
  VtMatrix4dArray *arg4 = (VtMatrix4dArray *) 0 ;
  bool result;
  
  arg1 = (VtVec3fArray *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3fArray const & type is null", 0);
    return 0;
  } 
  arg2 = (VtQuatfArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtQuatfArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtVec3hArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtVec3hArray const & type is null", 0);
    return 0;
  } 
  arg4 = (VtMatrix4dArray *)jarg4; 
  result = (bool)UsdSkelMakeTransforms((VtArray< GfVec3f > const &)*arg1,(VtArray< GfQuatf > const &)*arg2,(VtArray< GfVec3h > const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelMakeTransforms__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned long jarg5) {
  unsigned int jresult ;
  GfVec3f *arg1 = (GfVec3f *) 0 ;
  GfQuatf *arg2 = (GfQuatf *) 0 ;
  GfVec3h *arg3 = (GfVec3h *) 0 ;
  GfMatrix4d *arg4 = (GfMatrix4d *) 0 ;
  size_t arg5 ;
  bool result;
  
  arg1 = (GfVec3f *)jarg1; 
  arg2 = (GfQuatf *)jarg2; 
  arg3 = (GfVec3h *)jarg3; 
  arg4 = (GfMatrix4d *)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (bool)UsdSkelMakeTransforms((GfVec3f const *)arg1,(GfQuatf const *)arg2,(GfVec3h const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelNormalizeWeights(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VtFloatArray *arg1 = (VtFloatArray *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (VtFloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)UsdSkelNormalizeWeights(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSortInfluences(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  VtIntArray *arg1 = (VtIntArray *) 0 ;
  VtFloatArray *arg2 = (VtFloatArray *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (VtIntArray *)jarg1; 
  arg2 = (VtFloatArray *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)UsdSkelSortInfluences(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelExpandConstantInfluencesToVarying__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  VtIntArray *arg1 = (VtIntArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (VtIntArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)UsdSkelExpandConstantInfluencesToVarying(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelExpandConstantInfluencesToVarying__SWIG_1(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  VtFloatArray *arg1 = (VtFloatArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (VtFloatArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)UsdSkelExpandConstantInfluencesToVarying(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelResizeInfluences__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  VtIntArray *arg1 = (VtIntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (VtIntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)UsdSkelResizeInfluences(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelResizeInfluences__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  VtFloatArray *arg1 = (VtFloatArray *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (VtFloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)UsdSkelResizeInfluences(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinPointsLBS__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtIntArray *arg3 = 0 ;
  VtFloatArray *arg4 = 0 ;
  int arg5 ;
  VtVec3fArray *arg6 = (VtVec3fArray *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtIntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg4 = (VtFloatArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtFloatArray const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (VtVec3fArray *)jarg6; 
  result = (bool)UsdSkelSkinPointsLBS((GfMatrix4d const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2,(VtArray< int > const &)*arg3,(VtArray< float > const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinPointsLBS__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, int jarg7, void * jarg8, unsigned long jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  size_t arg3 ;
  int *arg4 = (int *) 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  int arg7 ;
  GfVec3f *arg8 = (GfVec3f *) 0 ;
  size_t arg9 ;
  bool arg10 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GfVec3f *)jarg8; 
  arg9 = (size_t)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (bool)UsdSkelSkinPointsLBS((GfMatrix4d const &)*arg1,(GfMatrix4d const *)arg2,arg3,(int const *)arg4,(float const *)arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinPointsLBS__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, int jarg7, void * jarg8, unsigned long jarg9) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  size_t arg3 ;
  int *arg4 = (int *) 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  int arg7 ;
  GfVec3f *arg8 = (GfVec3f *) 0 ;
  size_t arg9 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GfVec3f *)jarg8; 
  arg9 = (size_t)jarg9; 
  result = (bool)UsdSkelSkinPointsLBS((GfMatrix4d const &)*arg1,(GfMatrix4d const *)arg2,arg3,(int const *)arg4,(float const *)arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinTransformLBS__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  VtMatrix4dArray *arg2 = 0 ;
  VtIntArray *arg3 = 0 ;
  VtFloatArray *arg4 = 0 ;
  GfMatrix4d *arg5 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (VtMatrix4dArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtMatrix4dArray const & type is null", 0);
    return 0;
  } 
  arg3 = (VtIntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtIntArray const & type is null", 0);
    return 0;
  } 
  arg4 = (VtFloatArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtFloatArray const & type is null", 0);
    return 0;
  } 
  arg5 = (GfMatrix4d *)jarg5; 
  result = (bool)UsdSkelSkinTransformLBS((GfMatrix4d const &)*arg1,(VtArray< GfMatrix4d > const &)*arg2,(VtArray< int > const &)*arg3,(VtArray< float > const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelSkinTransformLBS__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, void * jarg7) {
  unsigned int jresult ;
  GfMatrix4d *arg1 = 0 ;
  GfMatrix4d *arg2 = (GfMatrix4d *) 0 ;
  size_t arg3 ;
  int *arg4 = (int *) 0 ;
  float *arg5 = (float *) 0 ;
  size_t arg6 ;
  GfMatrix4d *arg7 = (GfMatrix4d *) 0 ;
  bool result;
  
  arg1 = (GfMatrix4d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfMatrix4d const & type is null", 0);
    return 0;
  } 
  arg2 = (GfMatrix4d *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (GfMatrix4d *)jarg7; 
  result = (bool)UsdSkelSkinTransformLBS((GfMatrix4d const &)*arg1,(GfMatrix4d const *)arg2,arg3,(int const *)arg4,(float const *)arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBakeSkinning__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelRoot *arg1 = 0 ;
  GfInterval *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdSkelRoot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelRoot const & type is null", 0);
    return 0;
  } 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelBakeSkinning((UsdSkelRoot const &)*arg1,(GfInterval const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBakeSkinning__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  UsdSkelRoot *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdSkelRoot *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelRoot const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelBakeSkinning((UsdSkelRoot const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBakeSkinning__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdPrimRange *arg1 = 0 ;
  GfInterval *arg2 = 0 ;
  bool result;
  
  arg1 = (UsdPrimRange *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange const & type is null", 0);
    return 0;
  } 
  arg2 = (GfInterval *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GfInterval const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelBakeSkinning((UsdPrimRange const &)*arg1,(GfInterval const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBakeSkinning__SWIG_3(void * jarg1) {
  unsigned int jresult ;
  UsdPrimRange *arg1 = 0 ;
  bool result;
  
  arg1 = (UsdPrimRange *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrimRange const & type is null", 0);
    return 0;
  } 
  result = (bool)UsdSkelBakeSkinning((UsdPrimRange const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBinding__SWIG_0() {
  void * jresult ;
  UsdSkelBinding *result = 0 ;
  
  result = (UsdSkelBinding *)new UsdSkelBinding();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBinding__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelSkeleton *arg1 = 0 ;
  VtArray< UsdSkelSkinningQuery > *arg2 = 0 ;
  UsdSkelBinding *result = 0 ;
  
  arg1 = (UsdSkelSkeleton *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSkelSkeleton const & type is null", 0);
    return 0;
  } 
  arg2 = (VtArray< UsdSkelSkinningQuery > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtArray< UsdSkelSkinningQuery > const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelBinding *)new UsdSkelBinding((UsdSkelSkeleton const &)*arg1,(VtArray< UsdSkelSkinningQuery > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBinding_GetSkeleton(void * jarg1) {
  void * jresult ;
  UsdSkelBinding *arg1 = (UsdSkelBinding *) 0 ;
  UsdSkelSkeleton *result = 0 ;
  
  arg1 = (UsdSkelBinding *)jarg1; 
  result = (UsdSkelSkeleton *) &((UsdSkelBinding const *)arg1)->GetSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBinding_GetSkinningTargets(void * jarg1) {
  void * jresult ;
  UsdSkelBinding *arg1 = (UsdSkelBinding *) 0 ;
  VtArray< UsdSkelSkinningQuery > *result = 0 ;
  
  arg1 = (UsdSkelBinding *)jarg1; 
  result = (VtArray< UsdSkelSkinningQuery > *) &((UsdSkelBinding const *)arg1)->GetSkinningTargets();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelBinding(void * jarg1) {
  UsdSkelBinding *arg1 = (UsdSkelBinding *) 0 ;
  
  arg1 = (UsdSkelBinding *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBindingAPI__SWIG_0(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelBindingAPI *result = 0 ;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelBindingAPI *)new UsdSkelBindingAPI((UsdPrim const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBindingAPI__SWIG_1() {
  void * jresult ;
  UsdSkelBindingAPI *result = 0 ;
  
  result = (UsdSkelBindingAPI *)new UsdSkelBindingAPI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_UsdSkelBindingAPI__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSchemaBase *arg1 = 0 ;
  UsdSkelBindingAPI *result = 0 ;
  
  arg1 = (UsdSchemaBase *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdSchemaBase const & type is null", 0);
    return 0;
  } 
  result = (UsdSkelBindingAPI *)new UsdSkelBindingAPI((UsdSchemaBase const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_UsdSkelBindingAPI(void * jarg1) {
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetSchemaAttributeNames__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TfTokenVector *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (TfTokenVector *) &UsdSkelBindingAPI::GetSchemaAttributeNames(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetSchemaAttributeNames__SWIG_1() {
  void * jresult ;
  TfTokenVector *result = 0 ;
  
  result = (TfTokenVector *) &UsdSkelBindingAPI::GetSchemaAttributeNames();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_Get(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdStagePtr *arg1 = 0 ;
  SdfPath *arg2 = 0 ;
  UsdSkelBindingAPI result;
  
  arg1 = (UsdStagePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdStagePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = UsdSkelBindingAPI::Get((UsdStageWeakPtr const &)*arg1,(SdfPath const &)*arg2);
  jresult = new UsdSkelBindingAPI((const UsdSkelBindingAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_Apply(void * jarg1) {
  void * jresult ;
  UsdPrim *arg1 = 0 ;
  UsdSkelBindingAPI result;
  
  arg1 = (UsdPrim *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UsdPrim const & type is null", 0);
    return 0;
  } 
  result = UsdSkelBindingAPI::Apply((UsdPrim const &)*arg1);
  jresult = new UsdSkelBindingAPI((const UsdSkelBindingAPI &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetGeomBindTransformAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetGeomBindTransformAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateGeomBindTransformAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateGeomBindTransformAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateGeomBindTransformAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateGeomBindTransformAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateGeomBindTransformAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateGeomBindTransformAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetJointsAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetJointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetJointIndicesAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetJointIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointIndicesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointIndicesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointIndicesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointIndicesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointIndicesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointIndicesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetJointWeightsAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetJointWeightsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointWeightsAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointWeightsAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointWeightsAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointWeightsAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointWeightsAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointWeightsAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetBlendShapesAttr(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetBlendShapesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateBlendShapesAttr__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  bool arg3 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateBlendShapesAttr((VtValue const &)*arg2,arg3);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateBlendShapesAttr__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  VtValue *arg2 = 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (VtValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VtValue const & type is null", 0);
    return 0;
  } 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateBlendShapesAttr((VtValue const &)*arg2);
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateBlendShapesAttr__SWIG_2(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdAttribute result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateBlendShapesAttr();
  jresult = new UsdAttribute((const UsdAttribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetAnimationSourceRel(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetAnimationSourceRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateAnimationSourceRel(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateAnimationSourceRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetSkeletonRel(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetSkeletonRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateSkeletonRel(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateSkeletonRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetBlendShapeTargetsRel(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetBlendShapeTargetsRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateBlendShapeTargetsRel(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdRelationship result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateBlendShapeTargetsRel();
  jresult = new UsdRelationship((const UsdRelationship &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetJointIndicesPrimvar(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetJointIndicesPrimvar();
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointIndicesPrimvar__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  bool arg2 ;
  int arg3 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointIndicesPrimvar(arg2,arg3);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointIndicesPrimvar__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  bool arg2 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointIndicesPrimvar(arg2);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetJointWeightsPrimvar(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetJointWeightsPrimvar();
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointWeightsPrimvar__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  bool arg2 ;
  int arg3 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointWeightsPrimvar(arg2,arg3);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_CreateJointWeightsPrimvar__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  bool arg2 ;
  UsdGeomPrimvar result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((UsdSkelBindingAPI const *)arg1)->CreateJointWeightsPrimvar(arg2);
  jresult = new UsdGeomPrimvar((const UsdGeomPrimvar &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_SetRigidJointInfluence__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  unsigned int jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  int arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((UsdSkelBindingAPI const *)arg1)->SetRigidJointInfluence(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_SetRigidJointInfluence__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((UsdSkelBindingAPI const *)arg1)->SetRigidJointInfluence(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetSkeleton(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdSkelSkeleton *arg2 = (UsdSkelSkeleton *) 0 ;
  bool result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (UsdSkelSkeleton *)jarg2; 
  result = (bool)((UsdSkelBindingAPI const *)arg1)->GetSkeleton(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetAnimationSource(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdPrim *arg2 = (UsdPrim *) 0 ;
  bool result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  arg2 = (UsdPrim *)jarg2; 
  result = (bool)((UsdSkelBindingAPI const *)arg1)->GetAnimationSource(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetInheritedSkeleton(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdSkelSkeleton result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetInheritedSkeleton();
  jresult = new UsdSkelSkeleton((const UsdSkelSkeleton &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_UsdSkelBindingAPI_GetInheritedAnimationSource(void * jarg1) {
  void * jresult ;
  UsdSkelBindingAPI *arg1 = (UsdSkelBindingAPI *) 0 ;
  UsdPrim result;
  
  arg1 = (UsdSkelBindingAPI *)jarg1; 
  result = ((UsdSkelBindingAPI const *)arg1)->GetInheritedAnimationSource();
  jresult = new UsdPrim((const UsdPrim &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_DiagnosticHandler_GetGlobalHandler() {
  void * jresult ;
  DiagnosticHandler *result = 0 ;
  
  result = (DiagnosticHandler *)DiagnosticHandler::GetGlobalHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_SetGlobalHandler(void * jarg1) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  DiagnosticHandler::SetGlobalHandler(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_DiagnosticHandler(void * jarg1) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnInfo(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OnInfo((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnInfoSwigExplicitDiagnosticHandler(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DiagnosticHandler::OnInfo((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnWarning(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OnWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnWarningSwigExplicitDiagnosticHandler(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DiagnosticHandler::OnWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnError(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OnError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnErrorSwigExplicitDiagnosticHandler(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DiagnosticHandler::OnError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnFatalError(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OnFatalError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_OnFatalErrorSwigExplicitDiagnosticHandler(void * jarg1, char * jarg2) {
  DiagnosticHandler *arg1 = (DiagnosticHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (DiagnosticHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DiagnosticHandler::OnFatalError((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_DiagnosticHandler() {
  void * jresult ;
  DiagnosticHandler *result = 0 ;
  
  result = (DiagnosticHandler *)new SwigDirector_DiagnosticHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_DiagnosticHandler_director_connect(void *objarg, SwigDirector_DiagnosticHandler::SWIG_Callback0_t callback0, SwigDirector_DiagnosticHandler::SWIG_Callback1_t callback1, SwigDirector_DiagnosticHandler::SWIG_Callback2_t callback2, SwigDirector_DiagnosticHandler::SWIG_Callback3_t callback3) {
  DiagnosticHandler *obj = (DiagnosticHandler *)objarg;
  SwigDirector_DiagnosticHandler *director = dynamic_cast<SwigDirector_DiagnosticHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TaskCallback(void * jarg1) {
  TaskCallback *arg1 = (TaskCallback *) 0 ;
  
  arg1 = (TaskCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallback_Run(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  TaskCallback *arg1 = (TaskCallback *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  arg1 = (TaskCallback *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->Run(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallback_RunSwigExplicitTaskCallback(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  TaskCallback *arg1 = (TaskCallback *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  arg1 = (TaskCallback *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->TaskCallback::Run(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TaskCallback() {
  void * jresult ;
  TaskCallback *result = 0 ;
  
  result = (TaskCallback *)new SwigDirector_TaskCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallback_director_connect(void *objarg, SwigDirector_TaskCallback::SWIG_Callback0_t callback0) {
  TaskCallback *obj = (TaskCallback *)objarg;
  SwigDirector_TaskCallback *director = dynamic_cast<SwigDirector_TaskCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TestCall(void * jarg1, int jarg2, int jarg3) {
  TaskCallback *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TaskCallback *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TaskCallback & type is null", 0);
    return ;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TestCall(*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_ParallelForN(unsigned long jarg1, void * jarg2) {
  size_t arg1 ;
  TaskCallback *arg2 = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (TaskCallback *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TaskCallback & type is null", 0);
    return ;
  } 
  ParallelForN(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_Clear(void * jarg1) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_Add(void * jarg1, void * jarg2) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  TaskCallback *arg2 = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (TaskCallback *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TaskCallback const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((TaskCallback const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TaskCallbackVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  std::vector< TaskCallback >::size_type result;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  result = ((std::vector< TaskCallback > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pxr_TaskCallbackVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  std::vector< TaskCallback >::size_type result;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  result = ((std::vector< TaskCallback > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  std::vector< TaskCallback >::size_type arg2 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (std::vector< TaskCallback >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TaskCallbackVector__SWIG_0() {
  void * jresult ;
  std::vector< TaskCallback > *result = 0 ;
  
  result = (std::vector< TaskCallback > *)new std::vector< TaskCallback >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TaskCallbackVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< TaskCallback > *arg1 = 0 ;
  std::vector< TaskCallback > *result = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskCallback > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< TaskCallback > *)new std::vector< TaskCallback >((std::vector< TaskCallback > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_TaskCallbackVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< TaskCallback > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< TaskCallback > *)new_std_vector_Sl_TaskCallback_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TaskCallbackVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  TaskCallback result;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_TaskCallback_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new TaskCallback((const TaskCallback &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TaskCallbackVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  TaskCallback *result = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (TaskCallback *) &std_vector_Sl_TaskCallback_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  TaskCallback *arg3 = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TaskCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TaskCallback const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TaskCallback_Sg__setitem(arg1,arg2,(TaskCallback const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  std::vector< TaskCallback > *arg2 = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (std::vector< TaskCallback > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskCallback > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_TaskCallback_Sg__AddRange(arg1,(std::vector< TaskCallback > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TaskCallbackVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< TaskCallback > *result = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< TaskCallback > *)std_vector_Sl_TaskCallback_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  TaskCallback *arg3 = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TaskCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TaskCallback const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TaskCallback_Sg__Insert(arg1,arg2,(TaskCallback const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  std::vector< TaskCallback > *arg3 = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TaskCallback > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskCallback > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TaskCallback_Sg__InsertRange(arg1,arg2,(std::vector< TaskCallback > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_TaskCallback_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TaskCallback_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_TaskCallbackVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  TaskCallback *arg1 = 0 ;
  int arg2 ;
  std::vector< TaskCallback > *result = 0 ;
  
  arg1 = (TaskCallback *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TaskCallback const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TaskCallback > *)std_vector_Sl_TaskCallback_Sg__Repeat((TaskCallback const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  std_vector_Sl_TaskCallback_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TaskCallback_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_TaskCallbackVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  int arg2 ;
  std::vector< TaskCallback > *arg3 = 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TaskCallback > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TaskCallback > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TaskCallback_Sg__SetRange(arg1,arg2,(std::vector< TaskCallback > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_TaskCallbackVector(void * jarg1) {
  std::vector< TaskCallback > *arg1 = (std::vector< TaskCallback > *) 0 ;
  
  arg1 = (std::vector< TaskCallback > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_SetEnv(char * jarg1, char * jarg2) {
  std::string arg1 ;
  std::string arg2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  SetEnv(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GetFusedTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim arg1 ;
  UsdTimeCode arg2 ;
  UsdPrim *argp1 ;
  UsdTimeCode *argp2 ;
  VtValue result;
  
  argp1 = (UsdPrim *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdPrim", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GetFusedTransform(arg1,arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_GetFusedDisplayColor(void * jarg1, void * jarg2) {
  void * jresult ;
  UsdPrim arg1 ;
  UsdTimeCode arg2 ;
  UsdPrim *argp1 ;
  UsdTimeCode *argp2 ;
  VtValue result;
  
  argp1 = (UsdPrim *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdPrim", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (UsdTimeCode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = GetFusedDisplayColor(arg1,arg2);
  jresult = new VtValue((const VtValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_SetFusedDisplayColor(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  UsdPrim arg1 ;
  VtVec4fArray arg2 ;
  UsdTimeCode arg3 ;
  UsdPrim *argp1 ;
  VtVec4fArray *argp2 ;
  UsdTimeCode *argp3 ;
  bool result;
  
  argp1 = (UsdPrim *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdPrim", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (VtVec4fArray *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VtVec4fArray", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (UsdTimeCode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UsdTimeCode", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)SetFusedDisplayColor(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pxr_RprIpcServer_Listener_ProcessCommand(void * jarg1, char * jarg2, void * jarg3, unsigned long jarg4) {
  unsigned int jresult ;
  RprIpcServer::Listener *arg1 = (RprIpcServer::Listener *) 0 ;
  std::string *arg2 = 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (RprIpcServer::Listener *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint8_t *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->ProcessCommand((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_RprIpcServer_Listener(void * jarg1) {
  RprIpcServer::Listener *arg1 = (RprIpcServer::Listener *) 0 ;
  
  arg1 = (RprIpcServer::Listener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_RprIpcServer(void * jarg1) {
  void * jresult ;
  RprIpcServer::Listener *arg1 = (RprIpcServer::Listener *) 0 ;
  RprIpcServer *result = 0 ;
  
  arg1 = (RprIpcServer::Listener *)jarg1; 
  result = (RprIpcServer *)new RprIpcServer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_RprIpcServer(void * jarg1) {
  RprIpcServer *arg1 = (RprIpcServer *) 0 ;
  
  arg1 = (RprIpcServer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_RprIpcServer_AddLayer(void * jarg1, void * jarg2) {
  void * jresult ;
  RprIpcServer *arg1 = (RprIpcServer *) 0 ;
  SdfPath *arg2 = 0 ;
  RprIpcServer::Layer *result = 0 ;
  
  arg1 = (RprIpcServer *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return 0;
  } 
  result = (RprIpcServer::Layer *)(arg1)->AddLayer((SdfPath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_RprIpcServer_OnLayerEdit(void * jarg1, void * jarg2, void * jarg3) {
  RprIpcServer *arg1 = (RprIpcServer *) 0 ;
  SdfPath *arg2 = 0 ;
  RprIpcServer::Layer *arg3 = (RprIpcServer::Layer *) 0 ;
  
  arg1 = (RprIpcServer *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  arg3 = (RprIpcServer::Layer *)jarg3; 
  (arg1)->OnLayerEdit((SdfPath const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_RprIpcServer_RemoveLayer(void * jarg1, void * jarg2) {
  RprIpcServer *arg1 = (RprIpcServer *) 0 ;
  SdfPath *arg2 = 0 ;
  
  arg1 = (RprIpcServer *)jarg1; 
  arg2 = (SdfPath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SdfPath const & type is null", 0);
    return ;
  } 
  (arg1)->RemoveLayer((SdfPath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_new_RprIpcServer_Layer() {
  void * jresult ;
  RprIpcServer::Layer *result = 0 ;
  
  result = (RprIpcServer::Layer *)new RprIpcServer::Layer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pxr_RprIpcServer_Layer_GetStage(void * jarg1) {
  void * jresult ;
  RprIpcServer::Layer *arg1 = (RprIpcServer::Layer *) 0 ;
  SwigValueWrapper< UsdStageWeakPtr > result;
  
  arg1 = (RprIpcServer::Layer *)jarg1; 
  result = (arg1)->GetStage();
  jresult = new UsdStagePtr((const UsdStagePtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pxr_delete_RprIpcServer_Layer(void * jarg1) {
  RprIpcServer::Layer *arg1 = (RprIpcServer::Layer *) 0 ;
  
  arg1 = (RprIpcServer::Layer *)jarg1; 
  delete arg1;
}


SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_SdfAssetPathArray_SWIGUpcast(VtArray< SdfAssetPath > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtBoolArray_SWIGUpcast(VtArray< bool > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtDoubleArray_SWIGUpcast(VtArray< double > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtFloatArray_SWIGUpcast(VtArray< float > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtHalfArray_SWIGUpcast(VtArray< GfHalf > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtInt64Array_SWIGUpcast(VtArray< int64_t > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtIntArray_SWIGUpcast(VtArray< int > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtMatrix2dArray_SWIGUpcast(VtArray< GfMatrix2d > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtMatrix3dArray_SWIGUpcast(VtArray< GfMatrix3d > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtMatrix4dArray_SWIGUpcast(VtArray< GfMatrix4d > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtQuatdArray_SWIGUpcast(VtArray< GfQuatd > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtQuatfArray_SWIGUpcast(VtArray< GfQuatf > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtQuathArray_SWIGUpcast(VtArray< GfQuath > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtStringArray_SWIGUpcast(VtArray< std::string > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtTokenArray_SWIGUpcast(VtArray< TfToken > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtUCharArray_SWIGUpcast(VtArray< unsigned char > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtUInt64Array_SWIGUpcast(VtArray< uint64_t > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtUIntArray_SWIGUpcast(VtArray< unsigned int > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec2dArray_SWIGUpcast(VtArray< GfVec2d > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec2fArray_SWIGUpcast(VtArray< GfVec2f > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec2hArray_SWIGUpcast(VtArray< GfVec2h > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec2iArray_SWIGUpcast(VtArray< GfVec2i > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec3dArray_SWIGUpcast(VtArray< GfVec3d > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec3fArray_SWIGUpcast(VtArray< GfVec3f > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec3hArray_SWIGUpcast(VtArray< GfVec3h > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec3iArray_SWIGUpcast(VtArray< GfVec3i > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec4dArray_SWIGUpcast(VtArray< GfVec4d > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec4fArray_SWIGUpcast(VtArray< GfVec4f > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec4hArray_SWIGUpcast(VtArray< GfVec4h > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT Vt_ArrayBase * SWIGSTDCALL CSharp_pxr_VtVec4iArray_SWIGUpcast(VtArray< GfVec4i > *jarg1) {
    return (Vt_ArrayBase *)jarg1;
}

SWIGEXPORT TfRefPtr< SdfLayerBase > * SWIGSTDCALL CSharp_pxr_SdfLayer_SWIGSmartPtrUpcast(TfRefPtr< SdfLayer > *jarg1) {
    return jarg1 ? new TfRefPtr< SdfLayerBase >(*jarg1) : 0;
}

SWIGEXPORT Usd_PrimFlagsPredicate * SWIGSTDCALL CSharp_pxr_Usd_PrimFlagsConjunction_SWIGUpcast(Usd_PrimFlagsConjunction *jarg1) {
    return (Usd_PrimFlagsPredicate *)jarg1;
}

SWIGEXPORT Usd_PrimFlagsPredicate * SWIGSTDCALL CSharp_pxr_Usd_PrimFlagsDisjunction_SWIGUpcast(Usd_PrimFlagsDisjunction *jarg1) {
    return (Usd_PrimFlagsPredicate *)jarg1;
}

SWIGEXPORT UsdObject * SWIGSTDCALL CSharp_pxr_UsdPrim_SWIGUpcast(UsdPrim *jarg1) {
    return (UsdObject *)jarg1;
}

SWIGEXPORT UsdObject * SWIGSTDCALL CSharp_pxr_UsdProperty_SWIGUpcast(UsdProperty *jarg1) {
    return (UsdObject *)jarg1;
}

SWIGEXPORT UsdProperty * SWIGSTDCALL CSharp_pxr_UsdRelationship_SWIGUpcast(UsdRelationship *jarg1) {
    return (UsdProperty *)jarg1;
}

SWIGEXPORT UsdProperty * SWIGSTDCALL CSharp_pxr_UsdAttribute_SWIGUpcast(UsdAttribute *jarg1) {
    return (UsdProperty *)jarg1;
}

SWIGEXPORT UsdSchemaBase * SWIGSTDCALL CSharp_pxr_UsdTyped_SWIGUpcast(UsdTyped *jarg1) {
    return (UsdSchemaBase *)jarg1;
}

SWIGEXPORT UsdSchemaBase * SWIGSTDCALL CSharp_pxr_UsdGeomFaceSetAPI_SWIGUpcast(UsdGeomFaceSetAPI *jarg1) {
    return (UsdSchemaBase *)jarg1;
}

SWIGEXPORT UsdSchemaBase * SWIGSTDCALL CSharp_pxr_UsdGeomCollectionAPI_SWIGUpcast(UsdGeomCollectionAPI *jarg1) {
    return (UsdSchemaBase *)jarg1;
}

SWIGEXPORT UsdTyped * SWIGSTDCALL CSharp_pxr_UsdGeomImageable_SWIGUpcast(UsdGeomImageable *jarg1) {
    return (UsdTyped *)jarg1;
}

SWIGEXPORT UsdGeomImageable * SWIGSTDCALL CSharp_pxr_UsdGeomXformable_SWIGUpcast(UsdGeomXformable *jarg1) {
    return (UsdGeomImageable *)jarg1;
}

SWIGEXPORT UsdGeomXformable * SWIGSTDCALL CSharp_pxr_UsdGeomXform_SWIGUpcast(UsdGeomXform *jarg1) {
    return (UsdGeomXformable *)jarg1;
}

SWIGEXPORT UsdGeomXformable * SWIGSTDCALL CSharp_pxr_UsdGeomCamera_SWIGUpcast(UsdGeomCamera *jarg1) {
    return (UsdGeomXformable *)jarg1;
}

SWIGEXPORT UsdGeomXformable * SWIGSTDCALL CSharp_pxr_UsdGeomBoundable_SWIGUpcast(UsdGeomBoundable *jarg1) {
    return (UsdGeomXformable *)jarg1;
}

SWIGEXPORT UsdGeomBoundable * SWIGSTDCALL CSharp_pxr_UsdGeomPointInstancer_SWIGUpcast(UsdGeomPointInstancer *jarg1) {
    return (UsdGeomBoundable *)jarg1;
}

SWIGEXPORT UsdGeomBoundable * SWIGSTDCALL CSharp_pxr_UsdGeomGprim_SWIGUpcast(UsdGeomGprim *jarg1) {
    return (UsdGeomBoundable *)jarg1;
}

SWIGEXPORT UsdGeomGprim * SWIGSTDCALL CSharp_pxr_UsdGeomCapsule_SWIGUpcast(UsdGeomCapsule *jarg1) {
    return (UsdGeomGprim *)jarg1;
}

SWIGEXPORT UsdGeomGprim * SWIGSTDCALL CSharp_pxr_UsdGeomCone_SWIGUpcast(UsdGeomCone *jarg1) {
    return (UsdGeomGprim *)jarg1;
}

SWIGEXPORT UsdGeomGprim * SWIGSTDCALL CSharp_pxr_UsdGeomCube_SWIGUpcast(UsdGeomCube *jarg1) {
    return (UsdGeomGprim *)jarg1;
}

SWIGEXPORT UsdGeomGprim * SWIGSTDCALL CSharp_pxr_UsdGeomCylinder_SWIGUpcast(UsdGeomCylinder *jarg1) {
    return (UsdGeomGprim *)jarg1;
}

SWIGEXPORT UsdGeomGprim * SWIGSTDCALL CSharp_pxr_UsdGeomSphere_SWIGUpcast(UsdGeomSphere *jarg1) {
    return (UsdGeomGprim *)jarg1;
}

SWIGEXPORT UsdGeomGprim * SWIGSTDCALL CSharp_pxr_UsdGeomPointBased_SWIGUpcast(UsdGeomPointBased *jarg1) {
    return (UsdGeomGprim *)jarg1;
}

SWIGEXPORT UsdGeomPointBased * SWIGSTDCALL CSharp_pxr_UsdGeomPoints_SWIGUpcast(UsdGeomPoints *jarg1) {
    return (UsdGeomPointBased *)jarg1;
}

SWIGEXPORT UsdGeomPointBased * SWIGSTDCALL CSharp_pxr_UsdGeomCurves_SWIGUpcast(UsdGeomCurves *jarg1) {
    return (UsdGeomPointBased *)jarg1;
}

SWIGEXPORT UsdGeomCurves * SWIGSTDCALL CSharp_pxr_UsdGeomBasisCurves_SWIGUpcast(UsdGeomBasisCurves *jarg1) {
    return (UsdGeomCurves *)jarg1;
}

SWIGEXPORT UsdGeomCurves * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsCurves_SWIGUpcast(UsdGeomNurbsCurves *jarg1) {
    return (UsdGeomCurves *)jarg1;
}

SWIGEXPORT UsdGeomPointBased * SWIGSTDCALL CSharp_pxr_UsdGeomNurbsPatch_SWIGUpcast(UsdGeomNurbsPatch *jarg1) {
    return (UsdGeomPointBased *)jarg1;
}

SWIGEXPORT UsdGeomPointBased * SWIGSTDCALL CSharp_pxr_UsdGeomMesh_SWIGUpcast(UsdGeomMesh *jarg1) {
    return (UsdGeomPointBased *)jarg1;
}

SWIGEXPORT UsdTyped * SWIGSTDCALL CSharp_pxr_UsdShadeNodeGraph_SWIGUpcast(UsdShadeNodeGraph *jarg1) {
    return (UsdTyped *)jarg1;
}

SWIGEXPORT UsdShadeNodeGraph * SWIGSTDCALL CSharp_pxr_UsdShadeMaterial_SWIGUpcast(UsdShadeMaterial *jarg1) {
    return (UsdShadeNodeGraph *)jarg1;
}

SWIGEXPORT UsdTyped * SWIGSTDCALL CSharp_pxr_UsdShadeShader_SWIGUpcast(UsdShadeShader *jarg1) {
    return (UsdTyped *)jarg1;
}

SWIGEXPORT UsdTyped * SWIGSTDCALL CSharp_pxr_UsdSkelBlendShape_SWIGUpcast(UsdSkelBlendShape *jarg1) {
    return (UsdTyped *)jarg1;
}

SWIGEXPORT UsdGeomBoundable * SWIGSTDCALL CSharp_pxr_UsdSkelRoot_SWIGUpcast(UsdSkelRoot *jarg1) {
    return (UsdGeomBoundable *)jarg1;
}

SWIGEXPORT UsdGeomBoundable * SWIGSTDCALL CSharp_pxr_UsdSkelSkeleton_SWIGUpcast(UsdSkelSkeleton *jarg1) {
    return (UsdGeomBoundable *)jarg1;
}

#ifdef __cplusplus
}
#endif

