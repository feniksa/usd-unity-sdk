//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class SdfBatchNamespaceEdit : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SdfBatchNamespaceEdit(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfBatchNamespaceEdit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SdfBatchNamespaceEdit() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_SdfBatchNamespaceEdit(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SdfBatchNamespaceEdit() : this(USDIPCPINVOKE.new_SdfBatchNamespaceEdit__SWIG_0(), true) {
  }

  public SdfBatchNamespaceEdit(SdfBatchNamespaceEdit arg0) : this(USDIPCPINVOKE.new_SdfBatchNamespaceEdit__SWIG_1(SdfBatchNamespaceEdit.getCPtr(arg0)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public SdfBatchNamespaceEdit(SdfNamespaceEditVector arg0) : this(USDIPCPINVOKE.new_SdfBatchNamespaceEdit__SWIG_2(SdfNamespaceEditVector.getCPtr(arg0)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(SdfNamespaceEdit edit) {
    USDIPCPINVOKE.SdfBatchNamespaceEdit_Add__SWIG_0(swigCPtr, SdfNamespaceEdit.getCPtr(edit));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(SdfPath currentPath, SdfPath newPath, int index) {
    USDIPCPINVOKE.SdfBatchNamespaceEdit_Add__SWIG_1(swigCPtr, SdfPath.getCPtr(currentPath), SdfPath.getCPtr(newPath), index);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(SdfPath currentPath, SdfPath newPath) {
    USDIPCPINVOKE.SdfBatchNamespaceEdit_Add__SWIG_2(swigCPtr, SdfPath.getCPtr(currentPath), SdfPath.getCPtr(newPath));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public SdfNamespaceEditVector GetEdits() {
    SdfNamespaceEditVector ret = new SdfNamespaceEditVector(USDIPCPINVOKE.SdfBatchNamespaceEdit_GetEdits(swigCPtr), false);
    return ret;
  }

}

}
