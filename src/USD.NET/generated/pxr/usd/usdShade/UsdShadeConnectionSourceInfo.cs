//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdShadeConnectionSourceInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdShadeConnectionSourceInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeConnectionSourceInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdShadeConnectionSourceInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdShadeConnectionSourceInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdShadeConnectableAPI source {
    set {
      UsdCsPINVOKE.UsdShadeConnectionSourceInfo_source_set(swigCPtr, UsdShadeConnectableAPI.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UsdCsPINVOKE.UsdShadeConnectionSourceInfo_source_get(swigCPtr);
      UsdShadeConnectableAPI ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdShadeConnectableAPI(cPtr, false);
      return ret;
    } 
  }

  public TfToken sourceName {
    set {
      UsdCsPINVOKE.UsdShadeConnectionSourceInfo_sourceName_set(swigCPtr, TfToken.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UsdCsPINVOKE.UsdShadeConnectionSourceInfo_sourceName_get(swigCPtr);
      TfToken ret = (cPtr == global::System.IntPtr.Zero) ? null : new TfToken(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_UsdShadeAttributeType sourceType {
    set {
      UsdCsPINVOKE.UsdShadeConnectionSourceInfo_sourceType_set(swigCPtr, SWIGTYPE_p_UsdShadeAttributeType.getCPtr(value));
      if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_UsdShadeAttributeType ret = new SWIGTYPE_p_UsdShadeAttributeType(UsdCsPINVOKE.UsdShadeConnectionSourceInfo_sourceType_get(swigCPtr), true);
      if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SdfValueTypeName typeName {
    set {
      UsdCsPINVOKE.UsdShadeConnectionSourceInfo_typeName_set(swigCPtr, SdfValueTypeName.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = UsdCsPINVOKE.UsdShadeConnectionSourceInfo_typeName_get(swigCPtr);
      SdfValueTypeName ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdfValueTypeName(cPtr, false);
      return ret;
    } 
  }

  public UsdShadeConnectionSourceInfo() : this(UsdCsPINVOKE.new_UsdShadeConnectionSourceInfo__SWIG_0(), true) {
  }

  public UsdShadeConnectionSourceInfo(UsdShadeConnectableAPI source_, TfToken sourceName_, SWIGTYPE_p_UsdShadeAttributeType sourceType_, SdfValueTypeName typeName_) : this(UsdCsPINVOKE.new_UsdShadeConnectionSourceInfo__SWIG_1(UsdShadeConnectableAPI.getCPtr(source_), TfToken.getCPtr(sourceName_), SWIGTYPE_p_UsdShadeAttributeType.getCPtr(sourceType_), SdfValueTypeName.getCPtr(typeName_)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectionSourceInfo(UsdShadeConnectableAPI source_, TfToken sourceName_, SWIGTYPE_p_UsdShadeAttributeType sourceType_) : this(UsdCsPINVOKE.new_UsdShadeConnectionSourceInfo__SWIG_2(UsdShadeConnectableAPI.getCPtr(source_), TfToken.getCPtr(sourceName_), SWIGTYPE_p_UsdShadeAttributeType.getCPtr(sourceType_)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectionSourceInfo(UsdShadeInput input) : this(UsdCsPINVOKE.new_UsdShadeConnectionSourceInfo__SWIG_3(UsdShadeInput.getCPtr(input)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectionSourceInfo(UsdShadeOutput output) : this(UsdCsPINVOKE.new_UsdShadeConnectionSourceInfo__SWIG_4(UsdShadeOutput.getCPtr(output)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectionSourceInfo(UsdStageWeakPtr stage, SdfPath sourcePath) : this(UsdCsPINVOKE.new_UsdShadeConnectionSourceInfo__SWIG_5(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(sourcePath)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValid() {
    bool ret = UsdCsPINVOKE.UsdShadeConnectionSourceInfo_IsValid(swigCPtr);
    return ret;
  }

}

}
