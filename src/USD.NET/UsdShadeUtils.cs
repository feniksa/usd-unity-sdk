//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdShadeUtils : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdShadeUtils(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeUtils obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdShadeUtils() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdShadeUtils(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static string GetPrefixForAttributeType(UsdShadeAttributeType sourceType) {
    string ret = USDIPCPINVOKE.UsdShadeUtils_GetPrefixForAttributeType((int)sourceType);
    return ret;
  }

  public static TfToken GetFullName(TfToken baseName, UsdShadeAttributeType type) {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdShadeUtils_GetFullName(TfToken.getCPtr(baseName), (int)type), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ReadOldEncoding() {
    bool ret = USDIPCPINVOKE.UsdShadeUtils_ReadOldEncoding();
    return ret;
  }

  public static bool WriteNewEncoding() {
    bool ret = USDIPCPINVOKE.UsdShadeUtils_WriteNewEncoding();
    return ret;
  }

  public UsdShadeUtils() : this(USDIPCPINVOKE.new_UsdShadeUtils(), true) {
  }

}

}
