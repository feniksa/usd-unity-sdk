//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdStageCacheResultPair : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdStageCacheResultPair(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdStageCacheResultPair obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdStageCacheResultPair() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdStageCacheResultPair(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdStageCacheResultPair() : this(USDIPCPINVOKE.new_UsdStageCacheResultPair__SWIG_0(), true) {
  }

  public UsdStageCacheResultPair(UsdStage t, bool u) : this(USDIPCPINVOKE.new_UsdStageCacheResultPair__SWIG_1(UsdStage.getCPtr(t), u), true) {
  }

  public UsdStageCacheResultPair(UsdStageCacheResultPair p) : this(USDIPCPINVOKE.new_UsdStageCacheResultPair__SWIG_2(UsdStageCacheResultPair.getCPtr(p)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdStage first {
    set {
      USDIPCPINVOKE.UsdStageCacheResultPair_first_set(swigCPtr, UsdStage.getCPtr(value));
      if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = USDIPCPINVOKE.UsdStageCacheResultPair_first_get(swigCPtr);
      UsdStage ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdStage(cPtr, true);
      if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool second {
    set {
      USDIPCPINVOKE.UsdStageCacheResultPair_second_set(swigCPtr, value);
    } 
    get {
      bool ret = USDIPCPINVOKE.UsdStageCacheResultPair_second_get(swigCPtr);
      return ret;
    } 
  }

}

}
