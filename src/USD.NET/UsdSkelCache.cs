//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdSkelCache : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdSkelCache(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSkelCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdSkelCache() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdSkelCache(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdSkelCache() : this(USDIPCPINVOKE.new_UsdSkelCache(), true) {
  }

  public void Clear() {
    USDIPCPINVOKE.UsdSkelCache_Clear(swigCPtr);
  }

  public bool Populate(UsdSkelRoot root) {
    bool ret = USDIPCPINVOKE.UsdSkelCache_Populate(swigCPtr, UsdSkelRoot.getCPtr(root));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdSkelSkeletonQuery GetSkelQuery(UsdSkelSkeleton skel) {
    UsdSkelSkeletonQuery ret = new UsdSkelSkeletonQuery(USDIPCPINVOKE.UsdSkelCache_GetSkelQuery(swigCPtr, UsdSkelSkeleton.getCPtr(skel)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdSkelAnimQuery GetAnimQuery(UsdPrim prim) {
    UsdSkelAnimQuery ret = new UsdSkelAnimQuery(USDIPCPINVOKE.UsdSkelCache_GetAnimQuery(swigCPtr, UsdPrim.getCPtr(prim)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdSkelSkinningQuery GetSkinningQuery(UsdPrim prim) {
    UsdSkelSkinningQuery ret = new UsdSkelSkinningQuery(USDIPCPINVOKE.UsdSkelCache_GetSkinningQuery(swigCPtr, UsdPrim.getCPtr(prim)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeSkelBindings(UsdSkelRoot skelRoot, SWIGTYPE_p_std__vectorT_UsdSkelBinding_t bindings) {
    bool ret = USDIPCPINVOKE.UsdSkelCache_ComputeSkelBindings(swigCPtr, UsdSkelRoot.getCPtr(skelRoot), SWIGTYPE_p_std__vectorT_UsdSkelBinding_t.getCPtr(bindings));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeSkelBinding(UsdSkelRoot skelRoot, UsdSkelSkeleton skel, UsdSkelBinding binding) {
    bool ret = USDIPCPINVOKE.UsdSkelCache_ComputeSkelBinding(swigCPtr, UsdSkelRoot.getCPtr(skelRoot), UsdSkelSkeleton.getCPtr(skel), UsdSkelBinding.getCPtr(binding));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
