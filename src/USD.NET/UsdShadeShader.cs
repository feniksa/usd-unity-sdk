//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdShadeShader : UsdTyped {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdShadeShader(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdShadeShader_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeShader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdShadeShader() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdShadeShader(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdShadeShader(UsdPrim prim) : this(USDIPCPINVOKE.new_UsdShadeShader__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeShader() : this(USDIPCPINVOKE.new_UsdShadeShader__SWIG_1(), true) {
  }

  public UsdShadeShader(UsdSchemaBase schemaObj) : this(USDIPCPINVOKE.new_UsdShadeShader__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdShadeShader_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdShadeShader_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdShadeShader Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeShader ret = new UsdShadeShader(USDIPCPINVOKE.UsdShadeShader_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdShadeShader Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdShadeShader ret = new UsdShadeShader(USDIPCPINVOKE.UsdShadeShader_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetImplementationSourceAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_GetImplementationSourceAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateImplementationSourceAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_CreateImplementationSourceAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateImplementationSourceAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_CreateImplementationSourceAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateImplementationSourceAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_CreateImplementationSourceAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetIdAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_GetIdAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateIdAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_CreateIdAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateIdAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_CreateIdAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateIdAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdShadeShader_CreateIdAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdShadeShader(UsdShadeConnectableAPI connectable) : this(USDIPCPINVOKE.new_UsdShadeShader__SWIG_3(UsdShadeConnectableAPI.getCPtr(connectable)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdShadeConnectableAPI ConnectableAPI() {
    UsdShadeConnectableAPI ret = new UsdShadeConnectableAPI(USDIPCPINVOKE.UsdShadeShader_ConnectableAPI(swigCPtr), true);
    return ret;
  }

  public UsdShadeOutput CreateOutput(TfToken name, SdfValueTypeName typeName) {
    UsdShadeOutput ret = new UsdShadeOutput(USDIPCPINVOKE.UsdShadeShader_CreateOutput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeOutput GetOutput(TfToken name) {
    UsdShadeOutput ret = new UsdShadeOutput(USDIPCPINVOKE.UsdShadeShader_GetOutput(swigCPtr, TfToken.getCPtr(name)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_UsdShadeOutput_t GetOutputs() {
    SWIGTYPE_p_std__vectorT_UsdShadeOutput_t ret = new SWIGTYPE_p_std__vectorT_UsdShadeOutput_t(USDIPCPINVOKE.UsdShadeShader_GetOutputs(swigCPtr), true);
    return ret;
  }

  public UsdShadeInput CreateInput(TfToken name, SdfValueTypeName typeName) {
    UsdShadeInput ret = new UsdShadeInput(USDIPCPINVOKE.UsdShadeShader_CreateInput(swigCPtr, TfToken.getCPtr(name), SdfValueTypeName.getCPtr(typeName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdShadeInput GetInput(TfToken name) {
    UsdShadeInput ret = new UsdShadeInput(USDIPCPINVOKE.UsdShadeShader_GetInput(swigCPtr, TfToken.getCPtr(name)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_UsdShadeInput_t GetInputs() {
    SWIGTYPE_p_std__vectorT_UsdShadeInput_t ret = new SWIGTYPE_p_std__vectorT_UsdShadeInput_t(USDIPCPINVOKE.UsdShadeShader_GetInputs(swigCPtr), true);
    return ret;
  }

  public TfToken GetImplementationSource() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdShadeShader_GetImplementationSource(swigCPtr), true);
    return ret;
  }

  public bool SetShaderId(TfToken id) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_SetShaderId(swigCPtr, TfToken.getCPtr(id));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetShaderId(TfToken id) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_GetShaderId(swigCPtr, TfToken.getCPtr(id));
    return ret;
  }

  public bool SetSourceAsset(SdfAssetPath sourceAsset, TfToken sourceType) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_SetSourceAsset__SWIG_0(swigCPtr, SdfAssetPath.getCPtr(sourceAsset), TfToken.getCPtr(sourceType));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetSourceAsset(SdfAssetPath sourceAsset) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_SetSourceAsset__SWIG_1(swigCPtr, SdfAssetPath.getCPtr(sourceAsset));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetSourceAsset(SdfAssetPath sourceAsset, TfToken sourceType) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_GetSourceAsset__SWIG_0(swigCPtr, SdfAssetPath.getCPtr(sourceAsset), TfToken.getCPtr(sourceType));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetSourceAsset(SdfAssetPath sourceAsset) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_GetSourceAsset__SWIG_1(swigCPtr, SdfAssetPath.getCPtr(sourceAsset));
    return ret;
  }

  public bool SetSourceCode(string sourceCode, TfToken sourceType) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_SetSourceCode__SWIG_0(swigCPtr, sourceCode, TfToken.getCPtr(sourceType));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetSourceCode(string sourceCode) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_SetSourceCode__SWIG_1(swigCPtr, sourceCode);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetSourceCode(/*cstype*/ out string sourceCode, TfToken sourceType) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_GetSourceCode__SWIG_0(swigCPtr, out sourceCode, TfToken.getCPtr(sourceType));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetSourceCode(/*cstype*/ out string sourceCode) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_GetSourceCode__SWIG_1(swigCPtr, out sourceCode);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_NdrTokenMap GetShaderMetadata() {
    SWIGTYPE_p_NdrTokenMap ret = new SWIGTYPE_p_NdrTokenMap(USDIPCPINVOKE.UsdShadeShader_GetShaderMetadata(swigCPtr), true);
    return ret;
  }

  public string GetShaderMetadataByKey(TfToken key) {
    string ret = USDIPCPINVOKE.UsdShadeShader_GetShaderMetadataByKey(swigCPtr, TfToken.getCPtr(key));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetShaderMetadata(SWIGTYPE_p_NdrTokenMap shaderMetadata) {
    USDIPCPINVOKE.UsdShadeShader_SetShaderMetadata(swigCPtr, SWIGTYPE_p_NdrTokenMap.getCPtr(shaderMetadata));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetShaderMetadataByKey(TfToken key, string value) {
    USDIPCPINVOKE.UsdShadeShader_SetShaderMetadataByKey(swigCPtr, TfToken.getCPtr(key), value);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasShaderMetadata() {
    bool ret = USDIPCPINVOKE.UsdShadeShader_HasShaderMetadata(swigCPtr);
    return ret;
  }

  public bool HasShaderMetadataByKey(TfToken key) {
    bool ret = USDIPCPINVOKE.UsdShadeShader_HasShaderMetadataByKey(swigCPtr, TfToken.getCPtr(key));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ClearShaderMetadata() {
    USDIPCPINVOKE.UsdShadeShader_ClearShaderMetadata(swigCPtr);
  }

  public void ClearShaderMetadataByKey(TfToken key) {
    USDIPCPINVOKE.UsdShadeShader_ClearShaderMetadataByKey(swigCPtr, TfToken.getCPtr(key));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_SdrShaderNodeConstPtr GetShaderNodeForSourceType(TfToken sourceType) {
    SWIGTYPE_p_SdrShaderNodeConstPtr ret = new SWIGTYPE_p_SdrShaderNodeConstPtr(USDIPCPINVOKE.UsdShadeShader_GetShaderNodeForSourceType(swigCPtr, TfToken.getCPtr(sourceType)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
