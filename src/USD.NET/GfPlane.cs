//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class GfPlane : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GfPlane(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfPlane obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GfPlane() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_GfPlane(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public GfPlane() : this(USDIPCPINVOKE.new_GfPlane__SWIG_0(), true) {
  }

  public GfPlane(GfVec3d normal, double distanceToOrigin) : this(USDIPCPINVOKE.new_GfPlane__SWIG_1(GfVec3d.getCPtr(normal), distanceToOrigin), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfPlane(GfVec3d normal, GfVec3d point) : this(USDIPCPINVOKE.new_GfPlane__SWIG_2(GfVec3d.getCPtr(normal), GfVec3d.getCPtr(point)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfPlane(GfVec3d p0, GfVec3d p1, GfVec3d p2) : this(USDIPCPINVOKE.new_GfPlane__SWIG_3(GfVec3d.getCPtr(p0), GfVec3d.getCPtr(p1), GfVec3d.getCPtr(p2)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfPlane(GfVec4d eqn) : this(USDIPCPINVOKE.new_GfPlane__SWIG_4(GfVec4d.getCPtr(eqn)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(GfVec3d normal, double distanceToOrigin) {
    USDIPCPINVOKE.GfPlane_Set__SWIG_0(swigCPtr, GfVec3d.getCPtr(normal), distanceToOrigin);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(GfVec3d normal, GfVec3d point) {
    USDIPCPINVOKE.GfPlane_Set__SWIG_1(swigCPtr, GfVec3d.getCPtr(normal), GfVec3d.getCPtr(point));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(GfVec3d p0, GfVec3d p1, GfVec3d p2) {
    USDIPCPINVOKE.GfPlane_Set__SWIG_2(swigCPtr, GfVec3d.getCPtr(p0), GfVec3d.getCPtr(p1), GfVec3d.getCPtr(p2));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(GfVec4d eqn) {
    USDIPCPINVOKE.GfPlane_Set__SWIG_3(swigCPtr, GfVec4d.getCPtr(eqn));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfVec3d GetNormal() {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfPlane_GetNormal(swigCPtr), false);
    return ret;
  }

  public double GetDistanceFromOrigin() {
    double ret = USDIPCPINVOKE.GfPlane_GetDistanceFromOrigin(swigCPtr);
    return ret;
  }

  public GfVec4d GetEquation() {
    GfVec4d ret = new GfVec4d(USDIPCPINVOKE.GfPlane_GetEquation(swigCPtr), true);
    return ret;
  }

  public double GetDistance(GfVec3d p) {
    double ret = USDIPCPINVOKE.GfPlane_GetDistance(swigCPtr, GfVec3d.getCPtr(p));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfVec3d Project(GfVec3d p) {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfPlane_Project(swigCPtr, GfVec3d.getCPtr(p)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfPlane Transform(GfMatrix4d matrix) {
    GfPlane ret = new GfPlane(USDIPCPINVOKE.GfPlane_Transform(swigCPtr, GfMatrix4d.getCPtr(matrix)), false);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reorient(GfVec3d p) {
    USDIPCPINVOKE.GfPlane_Reorient(swigCPtr, GfVec3d.getCPtr(p));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IntersectsPositiveHalfSpace(GfRange3d box) {
    bool ret = USDIPCPINVOKE.GfPlane_IntersectsPositiveHalfSpace__SWIG_0(swigCPtr, GfRange3d.getCPtr(box));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IntersectsPositiveHalfSpace(GfVec3d pt) {
    bool ret = USDIPCPINVOKE.GfPlane_IntersectsPositiveHalfSpace__SWIG_1(swigCPtr, GfVec3d.getCPtr(pt));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equals(GfPlane lhs, GfPlane rhs) {
    bool ret = USDIPCPINVOKE.GfPlane_Equals(GfPlane.getCPtr(lhs), GfPlane.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  override public int GetHashCode() {
    int ret = USDIPCPINVOKE.GfPlane_GetHashCode(swigCPtr);
    return ret;
  }

    public static bool operator==(GfPlane lhs, GfPlane rhs){
      // The Swig binding glue will re-enter this operator comparing to null, so 
      // that case must be handled explicitly to avoid an infinite loop. This is still
      // not great, since it crosses the C#/C++ barrier twice. A better approache might
      // be to return a simple value from C++ that can be compared in C#.
      bool lnull = lhs as object == null;
      bool rnull = rhs as object == null;
      return (lnull == rnull) && ((lnull && rnull) || GfPlane.Equals(lhs, rhs));
    }

    public static bool operator !=(GfPlane lhs, GfPlane rhs) {
        return !(lhs == rhs);
    }

    override public bool Equals(object rhs) {
      return GfPlane.Equals(this, rhs as GfPlane);
    }
  
}

}
