//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class SdfPath : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SdfPath(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfPath obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SdfPath() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_SdfPath(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public override int GetHashCode() {
    return (int)GetHash();
  }
    public static implicit operator string (SdfPath value) {
        return value.GetText();
    }
  public override string ToString()
  {
    return (string)this;
  }
  public static bool operator==(SdfPath lhs, SdfPath rhs){
      // The Swig binding glew will re-enter this operator comparing to null, so 
    // that case must be handled explicitly to avoid an infinite loop. This is still
    // not great, since it crosses the C#/C++ barrier twice. A better approache might
    // be to return a simple value from C++ that can be compared in C#.
        bool lnull = lhs as object == null;
        bool rnull = rhs as object == null;
        return (lnull == rnull) && ((lnull && rnull) || SdfPath.Equals(lhs, rhs));
    }
    public static bool operator !=(SdfPath lhs, SdfPath rhs) {
        return !(lhs == rhs);
    }
  override public bool Equals(object rhs) {
    return SdfPath.Equals(this, rhs as SdfPath);
  }

  public static SdfPath EmptyPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_EmptyPath(), false);
    return ret;
  }

  public static SdfPath AbsoluteRootPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AbsoluteRootPath(), false);
    return ret;
  }

  public static SdfPath ReflexiveRelativePath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_ReflexiveRelativePath(), false);
    return ret;
  }

  public SdfPath() : this(USDIPCPINVOKE.new_SdfPath__SWIG_0(), true) {
  }

  public SdfPath(string path) : this(USDIPCPINVOKE.new_SdfPath__SWIG_1(path), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetPathElementCount() {
    uint ret = USDIPCPINVOKE.SdfPath_GetPathElementCount(swigCPtr);
    return ret;
  }

  public bool IsAbsolutePath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsAbsolutePath(swigCPtr);
    return ret;
  }

  public bool IsPrimPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsPrimPath(swigCPtr);
    return ret;
  }

  public bool IsAbsoluteRootOrPrimPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsAbsoluteRootOrPrimPath(swigCPtr);
    return ret;
  }

  public bool IsRootPrimPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsRootPrimPath(swigCPtr);
    return ret;
  }

  public bool IsPropertyPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsPropertyPath(swigCPtr);
    return ret;
  }

  public bool IsPrimPropertyPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsPrimPropertyPath(swigCPtr);
    return ret;
  }

  public bool IsNamespacedPropertyPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsNamespacedPropertyPath(swigCPtr);
    return ret;
  }

  public bool IsPrimVariantSelectionPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsPrimVariantSelectionPath(swigCPtr);
    return ret;
  }

  public bool IsPrimOrPrimVariantSelectionPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsPrimOrPrimVariantSelectionPath(swigCPtr);
    return ret;
  }

  public bool ContainsPrimVariantSelection() {
    bool ret = USDIPCPINVOKE.SdfPath_ContainsPrimVariantSelection(swigCPtr);
    return ret;
  }

  public bool ContainsTargetPath() {
    bool ret = USDIPCPINVOKE.SdfPath_ContainsTargetPath(swigCPtr);
    return ret;
  }

  public bool IsRelationalAttributePath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsRelationalAttributePath(swigCPtr);
    return ret;
  }

  public bool IsTargetPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsTargetPath(swigCPtr);
    return ret;
  }

  public bool IsMapperPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsMapperPath(swigCPtr);
    return ret;
  }

  public bool IsMapperArgPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsMapperArgPath(swigCPtr);
    return ret;
  }

  public bool IsExpressionPath() {
    bool ret = USDIPCPINVOKE.SdfPath_IsExpressionPath(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = USDIPCPINVOKE.SdfPath_IsEmpty(swigCPtr);
    return ret;
  }

  public TfToken GetToken() {
    TfToken ret = new TfToken(USDIPCPINVOKE.SdfPath_GetToken(swigCPtr), false);
    return ret;
  }

  public string GetString() {
    string ret = USDIPCPINVOKE.SdfPath_GetString(swigCPtr);
    return ret;
  }

  public string GetText() {
    string ret = USDIPCPINVOKE.SdfPath_GetText(swigCPtr);
    return ret;
  }

  public SdfPathVector GetPrefixes() {
    SdfPathVector ret = new SdfPathVector(USDIPCPINVOKE.SdfPath_GetPrefixes__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void GetPrefixes(SdfPathVector prefixes) {
    USDIPCPINVOKE.SdfPath_GetPrefixes__SWIG_1(swigCPtr, SdfPathVector.getCPtr(prefixes));
  }

  public string GetName() {
    string ret = USDIPCPINVOKE.SdfPath_GetName(swigCPtr);
    return ret;
  }

  public TfToken GetNameToken() {
    TfToken ret = new TfToken(USDIPCPINVOKE.SdfPath_GetNameToken(swigCPtr), false);
    return ret;
  }

  public string GetElementString() {
    string ret = USDIPCPINVOKE.SdfPath_GetElementString(swigCPtr);
    return ret;
  }

  public TfToken GetElementToken() {
    TfToken ret = new TfToken(USDIPCPINVOKE.SdfPath_GetElementToken(swigCPtr), true);
    return ret;
  }

  public SdfPath ReplaceName(TfToken newName) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_ReplaceName(swigCPtr, TfToken.getCPtr(newName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath GetTargetPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_GetTargetPath(swigCPtr), false);
    return ret;
  }

  public void GetAllTargetPathsRecursively(SdfPathVector result) {
    USDIPCPINVOKE.SdfPath_GetAllTargetPathsRecursively(swigCPtr, SdfPathVector.getCPtr(result));
  }

  public SdfPathStringPair GetVariantSelection() {
    SdfPathStringPair ret = new SdfPathStringPair(USDIPCPINVOKE.SdfPath_GetVariantSelection(swigCPtr), true);
    return ret;
  }

  public bool HasPrefix(SdfPath prefix) {
    bool ret = USDIPCPINVOKE.SdfPath_HasPrefix(swigCPtr, SdfPath.getCPtr(prefix));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath GetParentPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_GetParentPath(swigCPtr), true);
    return ret;
  }

  public SdfPath GetPrimPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_GetPrimPath(swigCPtr), true);
    return ret;
  }

  public SdfPath GetPrimOrPrimVariantSelectionPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_GetPrimOrPrimVariantSelectionPath(swigCPtr), true);
    return ret;
  }

  public SdfPath GetAbsoluteRootOrPrimPath() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_GetAbsoluteRootOrPrimPath(swigCPtr), true);
    return ret;
  }

  public SdfPath StripAllVariantSelections() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_StripAllVariantSelections(swigCPtr), true);
    return ret;
  }

  public SdfPath AppendPath(SdfPath newSuffix) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendPath(swigCPtr, SdfPath.getCPtr(newSuffix)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendChild(TfToken childName) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendChild(swigCPtr, TfToken.getCPtr(childName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendProperty(TfToken propName) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendProperty(swigCPtr, TfToken.getCPtr(propName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendVariantSelection(string variantSet, string variant) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendVariantSelection(swigCPtr, variantSet, variant), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendTarget(SdfPath targetPath) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendTarget(swigCPtr, SdfPath.getCPtr(targetPath)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendRelationalAttribute(TfToken attrName) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendRelationalAttribute(swigCPtr, TfToken.getCPtr(attrName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath ReplaceTargetPath(SdfPath newTargetPath) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_ReplaceTargetPath(swigCPtr, SdfPath.getCPtr(newTargetPath)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendMapper(SdfPath targetPath) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendMapper(swigCPtr, SdfPath.getCPtr(targetPath)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendMapperArg(TfToken argName) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendMapperArg(swigCPtr, TfToken.getCPtr(argName)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendExpression() {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendExpression(swigCPtr), true);
    return ret;
  }

  public SdfPath AppendElementString(string element) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendElementString(swigCPtr, element), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath AppendElementToken(TfToken elementTok) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_AppendElementToken(swigCPtr, TfToken.getCPtr(elementTok)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath ReplacePrefix(SdfPath oldPrefix, SdfPath newPrefix, bool fixTargetPaths) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_ReplacePrefix__SWIG_0(swigCPtr, SdfPath.getCPtr(oldPrefix), SdfPath.getCPtr(newPrefix), fixTargetPaths), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath ReplacePrefix(SdfPath oldPrefix, SdfPath newPrefix) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_ReplacePrefix__SWIG_1(swigCPtr, SdfPath.getCPtr(oldPrefix), SdfPath.getCPtr(newPrefix)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath GetCommonPrefix(SdfPath path) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_GetCommonPrefix(swigCPtr, SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPathPair RemoveCommonSuffix(SdfPath otherPath, bool stopAtRootPrim) {
    SdfPathPair ret = new SdfPathPair(USDIPCPINVOKE.SdfPath_RemoveCommonSuffix__SWIG_0(swigCPtr, SdfPath.getCPtr(otherPath), stopAtRootPrim), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPathPair RemoveCommonSuffix(SdfPath otherPath) {
    SdfPathPair ret = new SdfPathPair(USDIPCPINVOKE.SdfPath_RemoveCommonSuffix__SWIG_1(swigCPtr, SdfPath.getCPtr(otherPath)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath MakeAbsolutePath(SdfPath anchor) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_MakeAbsolutePath(swigCPtr, SdfPath.getCPtr(anchor)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPath MakeRelativePath(SdfPath anchor) {
    SdfPath ret = new SdfPath(USDIPCPINVOKE.SdfPath_MakeRelativePath(swigCPtr, SdfPath.getCPtr(anchor)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsValidIdentifier(string name) {
    bool ret = USDIPCPINVOKE.SdfPath_IsValidIdentifier(name);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsValidNamespacedIdentifier(string name) {
    bool ret = USDIPCPINVOKE.SdfPath_IsValidNamespacedIdentifier(name);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StdStringVector TokenizeIdentifier(string name) {
    StdStringVector ret = new StdStringVector(USDIPCPINVOKE.SdfPath_TokenizeIdentifier(name), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TfTokenVector TokenizeIdentifierAsTokens(string name) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.SdfPath_TokenizeIdentifierAsTokens(name), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string JoinIdentifier(StdStringVector names) {
    string ret = USDIPCPINVOKE.SdfPath_JoinIdentifier__SWIG_0(StdStringVector.getCPtr(names));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string JoinIdentifier(TfTokenVector names) {
    string ret = USDIPCPINVOKE.SdfPath_JoinIdentifier__SWIG_1(TfTokenVector.getCPtr(names));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string JoinIdentifier(string lhs, string rhs) {
    string ret = USDIPCPINVOKE.SdfPath_JoinIdentifier__SWIG_2(lhs, rhs);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string JoinIdentifier(TfToken lhs, TfToken rhs) {
    string ret = USDIPCPINVOKE.SdfPath_JoinIdentifier__SWIG_3(TfToken.getCPtr(lhs), TfToken.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string StripNamespace(string name) {
    string ret = USDIPCPINVOKE.SdfPath_StripNamespace__SWIG_0(name);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TfToken StripNamespace(TfToken name) {
    TfToken ret = new TfToken(USDIPCPINVOKE.SdfPath_StripNamespace__SWIG_1(TfToken.getCPtr(name)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsValidPathString(string pathString, SWIGTYPE_p_std__string errMsg) {
    bool ret = USDIPCPINVOKE.SdfPath_IsValidPathString__SWIG_0(pathString, SWIGTYPE_p_std__string.getCPtr(errMsg));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsValidPathString(string pathString) {
    bool ret = USDIPCPINVOKE.SdfPath_IsValidPathString__SWIG_1(pathString);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsBuiltInMarker(string marker) {
    bool ret = USDIPCPINVOKE.SdfPath_IsBuiltInMarker(marker);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class Hash : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Hash(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Hash obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Hash() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            USDIPCPINVOKE.delete_SdfPath_Hash(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public Hash() : this(USDIPCPINVOKE.new_SdfPath_Hash(), true) {
    }
  
  }

  public uint GetHash() {
    uint ret = USDIPCPINVOKE.SdfPath_GetHash(swigCPtr);
    return ret;
  }

  public class FastLessThan : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal FastLessThan(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FastLessThan obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~FastLessThan() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            USDIPCPINVOKE.delete_SdfPath_FastLessThan(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public FastLessThan() : this(USDIPCPINVOKE.new_SdfPath_FastLessThan(), true) {
    }
  
  }

  public static SdfPathVector GetConciseRelativePaths(SdfPathVector paths) {
    SdfPathVector ret = new SdfPathVector(USDIPCPINVOKE.SdfPath_GetConciseRelativePaths(SdfPathVector.getCPtr(paths)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void RemoveDescendentPaths(SdfPathVector paths) {
    USDIPCPINVOKE.SdfPath_RemoveDescendentPaths(SdfPathVector.getCPtr(paths));
  }

  public static void RemoveAncestorPaths(SdfPathVector paths) {
    USDIPCPINVOKE.SdfPath_RemoveAncestorPaths(SdfPathVector.getCPtr(paths));
  }

  public static bool Equals(SdfPath lhs, SdfPath rhs) {
    bool ret = USDIPCPINVOKE.SdfPath_Equals(SdfPath.getCPtr(lhs), SdfPath.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
