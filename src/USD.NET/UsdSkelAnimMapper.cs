//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdSkelAnimMapper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdSkelAnimMapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSkelAnimMapper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdSkelAnimMapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdSkelAnimMapper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdSkelAnimMapper() : this(USDIPCPINVOKE.new_UsdSkelAnimMapper__SWIG_0(), true) {
  }

  public UsdSkelAnimMapper(VtTokenArray sourceOrder, VtTokenArray targetOrder) : this(USDIPCPINVOKE.new_UsdSkelAnimMapper__SWIG_1(VtTokenArray.getCPtr(sourceOrder), VtTokenArray.getCPtr(targetOrder)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdSkelAnimMapper(TfToken sourceOrder, uint sourceOrderSize, TfToken targetOrder, uint targetOrderSize) : this(USDIPCPINVOKE.new_UsdSkelAnimMapper__SWIG_2(TfToken.getCPtr(sourceOrder), sourceOrderSize, TfToken.getCPtr(targetOrder), targetOrderSize), true) {
  }

  public bool Remap(VtValue source, VtValue target, int elementSize, VtValue defaultValue) {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_Remap__SWIG_3(swigCPtr, VtValue.getCPtr(source), VtValue.getCPtr(target), elementSize, VtValue.getCPtr(defaultValue));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remap(VtValue source, VtValue target, int elementSize) {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_Remap__SWIG_4(swigCPtr, VtValue.getCPtr(source), VtValue.getCPtr(target), elementSize);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remap(VtValue source, VtValue target) {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_Remap__SWIG_5(swigCPtr, VtValue.getCPtr(source), VtValue.getCPtr(target));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemapTransforms(VtMatrix4dArray source, VtMatrix4dArray target, int elementSize) {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_RemapTransforms__SWIG_0(swigCPtr, VtMatrix4dArray.getCPtr(source), VtMatrix4dArray.getCPtr(target), elementSize);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemapTransforms(VtMatrix4dArray source, VtMatrix4dArray target) {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_RemapTransforms__SWIG_1(swigCPtr, VtMatrix4dArray.getCPtr(source), VtMatrix4dArray.getCPtr(target));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsIdentity() {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_IsIdentity(swigCPtr);
    return ret;
  }

  public bool IsSparse() {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_IsSparse(swigCPtr);
    return ret;
  }

  public bool IsNull() {
    bool ret = USDIPCPINVOKE.UsdSkelAnimMapper_IsNull(swigCPtr);
    return ret;
  }

  public uint size() {
    uint ret = USDIPCPINVOKE.UsdSkelAnimMapper_size(swigCPtr);
    return ret;
  }

}

}
