//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdGeomPointBased : UsdGeomGprim {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdGeomPointBased(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdGeomPointBased_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomPointBased obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdGeomPointBased() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdGeomPointBased(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdGeomPointBased(UsdPrim prim) : this(USDIPCPINVOKE.new_UsdGeomPointBased__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdGeomPointBased() : this(USDIPCPINVOKE.new_UsdGeomPointBased__SWIG_1(), true) {
  }

  public UsdGeomPointBased(UsdSchemaBase schemaObj) : this(USDIPCPINVOKE.new_UsdGeomPointBased__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdGeomPointBased_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdGeomPointBased_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdGeomPointBased Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdGeomPointBased ret = new UsdGeomPointBased(USDIPCPINVOKE.UsdGeomPointBased_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetPointsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_GetPointsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreatePointsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreatePointsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreatePointsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreatePointsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreatePointsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreatePointsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetVelocitiesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_GetVelocitiesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateVelocitiesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreateVelocitiesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateVelocitiesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreateVelocitiesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateVelocitiesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreateVelocitiesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetNormalsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_GetNormalsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateNormalsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreateNormalsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateNormalsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreateNormalsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateNormalsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomPointBased_CreateNormalsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public TfToken GetNormalsInterpolation() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomPointBased_GetNormalsInterpolation(swigCPtr), true);
    return ret;
  }

  public bool SetNormalsInterpolation(TfToken interpolation) {
    bool ret = USDIPCPINVOKE.UsdGeomPointBased_SetNormalsInterpolation(swigCPtr, TfToken.getCPtr(interpolation));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeExtent(VtVec3fArray points, VtVec3fArray extent) {
    bool ret = USDIPCPINVOKE.UsdGeomPointBased_ComputeExtent__SWIG_0(VtVec3fArray.getCPtr(points), VtVec3fArray.getCPtr(extent));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeExtent(VtVec3fArray points, GfMatrix4d transform, VtVec3fArray extent) {
    bool ret = USDIPCPINVOKE.UsdGeomPointBased_ComputeExtent__SWIG_1(VtVec3fArray.getCPtr(points), GfMatrix4d.getCPtr(transform), VtVec3fArray.getCPtr(extent));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
