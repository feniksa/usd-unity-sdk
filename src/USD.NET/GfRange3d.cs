//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class GfRange3d : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GfRange3d(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfRange3d obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GfRange3d() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_GfRange3d(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void SetEmpty() {
    USDIPCPINVOKE.GfRange3d_SetEmpty(swigCPtr);
  }

  public GfRange3d() : this(USDIPCPINVOKE.new_GfRange3d__SWIG_0(), true) {
  }

  public GfRange3d(GfVec3d min, GfVec3d max) : this(USDIPCPINVOKE.new_GfRange3d__SWIG_1(GfVec3d.getCPtr(min), GfVec3d.getCPtr(max)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfVec3d GetMin() {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfRange3d_GetMin(swigCPtr), false);
    return ret;
  }

  public GfVec3d GetMax() {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfRange3d_GetMax(swigCPtr), false);
    return ret;
  }

  public GfVec3d GetSize() {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfRange3d_GetSize(swigCPtr), true);
    return ret;
  }

  public GfVec3d GetMidpoint() {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfRange3d_GetMidpoint(swigCPtr), true);
    return ret;
  }

  public void SetMin(GfVec3d min) {
    USDIPCPINVOKE.GfRange3d_SetMin(swigCPtr, GfVec3d.getCPtr(min));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMax(GfVec3d max) {
    USDIPCPINVOKE.GfRange3d_SetMax(swigCPtr, GfVec3d.getCPtr(max));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsEmpty() {
    bool ret = USDIPCPINVOKE.GfRange3d_IsEmpty(swigCPtr);
    return ret;
  }

  public void ExtendBy(GfVec3d point) {
    USDIPCPINVOKE.GfRange3d_ExtendBy__SWIG_0(swigCPtr, GfVec3d.getCPtr(point));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExtendBy(GfRange3d range) {
    USDIPCPINVOKE.GfRange3d_ExtendBy__SWIG_1(swigCPtr, GfRange3d.getCPtr(range));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(GfVec3d point) {
    bool ret = USDIPCPINVOKE.GfRange3d_Contains__SWIG_0(swigCPtr, GfVec3d.getCPtr(point));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Contains(GfRange3d range) {
    bool ret = USDIPCPINVOKE.GfRange3d_Contains__SWIG_1(swigCPtr, GfRange3d.getCPtr(range));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsInside(GfVec3d point) {
    bool ret = USDIPCPINVOKE.GfRange3d_IsInside__SWIG_0(swigCPtr, GfVec3d.getCPtr(point));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsInside(GfRange3d range) {
    bool ret = USDIPCPINVOKE.GfRange3d_IsInside__SWIG_1(swigCPtr, GfRange3d.getCPtr(range));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsOutside(GfRange3d range) {
    bool ret = USDIPCPINVOKE.GfRange3d_IsOutside(swigCPtr, GfRange3d.getCPtr(range));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GfRange3d GetUnion(GfRange3d a, GfRange3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_GetUnion(GfRange3d.getCPtr(a), GfRange3d.getCPtr(b)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfRange3d UnionWith(GfRange3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_UnionWith__SWIG_0(swigCPtr, GfRange3d.getCPtr(b)), false);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfRange3d UnionWith(GfVec3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_UnionWith__SWIG_1(swigCPtr, GfVec3d.getCPtr(b)), false);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GfRange3d Union(GfRange3d a, GfRange3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_Union__SWIG_0(GfRange3d.getCPtr(a), GfRange3d.getCPtr(b)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfRange3d Union(GfVec3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_Union__SWIG_2(swigCPtr, GfVec3d.getCPtr(b)), false);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GfRange3d GetIntersection(GfRange3d a, GfRange3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_GetIntersection(GfRange3d.getCPtr(a), GfRange3d.getCPtr(b)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GfRange3d Intersection(GfRange3d a, GfRange3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_Intersection__SWIG_0(GfRange3d.getCPtr(a), GfRange3d.getCPtr(b)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfRange3d IntersectWith(GfRange3d b) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_IntersectWith(swigCPtr, GfRange3d.getCPtr(b)), false);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDistanceSquared(GfVec3d p) {
    double ret = USDIPCPINVOKE.GfRange3d_GetDistanceSquared(swigCPtr, GfVec3d.getCPtr(p));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GfVec3d GetCorner(uint i) {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfRange3d_GetCorner(swigCPtr, i), true);
    return ret;
  }

  public GfRange3d GetOctant(uint i) {
    GfRange3d ret = new GfRange3d(USDIPCPINVOKE.GfRange3d_GetOctant(swigCPtr, i), true);
    return ret;
  }

  public static GfRange3d UnitCube {
    get {
      global::System.IntPtr cPtr = USDIPCPINVOKE.GfRange3d_UnitCube_get();
      GfRange3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new GfRange3d(cPtr, false);
      return ret;
    } 
  }

  public static bool Equals(GfRange3d lhs, GfRange3d rhs) {
    bool ret = USDIPCPINVOKE.GfRange3d_Equals(GfRange3d.getCPtr(lhs), GfRange3d.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  override public int GetHashCode() {
    int ret = USDIPCPINVOKE.GfRange3d_GetHashCode(swigCPtr);
    return ret;
  }

    public static bool operator==(GfRange3d lhs, GfRange3d rhs){
      // The Swig binding glue will re-enter this operator comparing to null, so 
      // that case must be handled explicitly to avoid an infinite loop. This is still
      // not great, since it crosses the C#/C++ barrier twice. A better approache might
      // be to return a simple value from C++ that can be compared in C#.
      bool lnull = lhs as object == null;
      bool rnull = rhs as object == null;
      return (lnull == rnull) && ((lnull && rnull) || GfRange3d.Equals(lhs, rhs));
    }

    public static bool operator !=(GfRange3d lhs, GfRange3d rhs) {
        return !(lhs == rhs);
    }

    override public bool Equals(object rhs) {
      return GfRange3d.Equals(this, rhs as GfRange3d);
    }
  
  public static readonly uint dimension = USDIPCPINVOKE.GfRange3d_dimension_get();
}

}
