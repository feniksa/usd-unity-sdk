//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class SdfAssetPath : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SdfAssetPath(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfAssetPath obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SdfAssetPath() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_SdfAssetPath(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SdfAssetPath() : this(USDIPCPINVOKE.new_SdfAssetPath__SWIG_0(), true) {
  }

  public SdfAssetPath(string path) : this(USDIPCPINVOKE.new_SdfAssetPath__SWIG_1(path), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public SdfAssetPath(string path, string resolvedPath) : this(USDIPCPINVOKE.new_SdfAssetPath__SWIG_2(path, resolvedPath), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetHash() {
    uint ret = USDIPCPINVOKE.SdfAssetPath_GetHash(swigCPtr);
    return ret;
  }

  public string GetAssetPath() {
    string ret = USDIPCPINVOKE.SdfAssetPath_GetAssetPath(swigCPtr);
    return ret;
  }

  public string GetResolvedPath() {
    string ret = USDIPCPINVOKE.SdfAssetPath_GetResolvedPath(swigCPtr);
    return ret;
  }

  public static bool Equals(SdfAssetPath lhs, SdfAssetPath rhs) {
    bool ret = USDIPCPINVOKE.SdfAssetPath_Equals(SdfAssetPath.getCPtr(lhs), SdfAssetPath.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  override public int GetHashCode() {
    int ret = USDIPCPINVOKE.SdfAssetPath_GetHashCode(swigCPtr);
    return ret;
  }

    public static bool operator==(SdfAssetPath lhs, SdfAssetPath rhs){
      // The Swig binding glue will re-enter this operator comparing to null, so 
      // that case must be handled explicitly to avoid an infinite loop. This is still
      // not great, since it crosses the C#/C++ barrier twice. A better approache might
      // be to return a simple value from C++ that can be compared in C#.
      bool lnull = lhs as object == null;
      bool rnull = rhs as object == null;
      return (lnull == rnull) && ((lnull && rnull) || SdfAssetPath.Equals(lhs, rhs));
    }

    public static bool operator !=(SdfAssetPath lhs, SdfAssetPath rhs) {
        return !(lhs == rhs);
    }

    override public bool Equals(object rhs) {
      return SdfAssetPath.Equals(this, rhs as SdfAssetPath);
    }
  
}

}
