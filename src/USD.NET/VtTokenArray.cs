//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class VtTokenArray : Vt_ArrayBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal VtTokenArray(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.VtTokenArray_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VtTokenArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VtTokenArray() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_VtTokenArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

	  public TfToken this[int index] {
		  get { return GetValue(index); }
		  set { SetValue(index, value); }
	  }
  
  public VtTokenArray() : this(USDIPCPINVOKE.new_VtTokenArray__SWIG_0(), true) {
  }

  public VtTokenArray(Vt_ArrayForeignDataSource foreignSrc, TfToken data, uint size, bool addRef) : this(USDIPCPINVOKE.new_VtTokenArray__SWIG_1(Vt_ArrayForeignDataSource.getCPtr(foreignSrc), TfToken.getCPtr(data), size, addRef), true) {
  }

  public VtTokenArray(Vt_ArrayForeignDataSource foreignSrc, TfToken data, uint size) : this(USDIPCPINVOKE.new_VtTokenArray__SWIG_2(Vt_ArrayForeignDataSource.getCPtr(foreignSrc), TfToken.getCPtr(data), size), true) {
  }

  public VtTokenArray(VtTokenArray other) : this(USDIPCPINVOKE.new_VtTokenArray__SWIG_3(VtTokenArray.getCPtr(other)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public VtTokenArray(uint n, TfToken value) : this(USDIPCPINVOKE.new_VtTokenArray__SWIG_5(n, TfToken.getCPtr(value)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public VtTokenArray(uint n) : this(USDIPCPINVOKE.new_VtTokenArray__SWIG_6(n), true) {
  }

  public void push_back(TfToken elem) {
    USDIPCPINVOKE.VtTokenArray_push_back(swigCPtr, TfToken.getCPtr(elem));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_back() {
    USDIPCPINVOKE.VtTokenArray_pop_back(swigCPtr);
  }

  public uint size() {
    uint ret = USDIPCPINVOKE.VtTokenArray_size(swigCPtr);
    return ret;
  }

  public uint capacity() {
    uint ret = USDIPCPINVOKE.VtTokenArray_capacity(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = USDIPCPINVOKE.VtTokenArray_empty(swigCPtr);
    return ret;
  }

  public void reserve(uint num) {
    USDIPCPINVOKE.VtTokenArray_reserve(swigCPtr, num);
  }

  public void resize(uint newSize) {
    USDIPCPINVOKE.VtTokenArray_resize(swigCPtr, newSize);
  }

  public void clear() {
    USDIPCPINVOKE.VtTokenArray_clear(swigCPtr);
  }

  public void assign(uint n, TfToken fill) {
    USDIPCPINVOKE.VtTokenArray_assign(swigCPtr, n, TfToken.getCPtr(fill));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(VtTokenArray other) {
    USDIPCPINVOKE.VtTokenArray_swap(swigCPtr, VtTokenArray.getCPtr(other));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsIdentical(VtTokenArray other) {
    bool ret = USDIPCPINVOKE.VtTokenArray_IsIdentical(swigCPtr, VtTokenArray.getCPtr(other));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equals(VtTokenArray lhs, VtTokenArray rhs) {
    bool ret = USDIPCPINVOKE.VtTokenArray_Equals(VtTokenArray.getCPtr(lhs), VtTokenArray.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = USDIPCPINVOKE.VtTokenArray_ToString(swigCPtr);
    return ret;
  }

  public void CopyToArray(TfToken[] dest) {
    USDIPCPINVOKE.VtTokenArray_CopyToArray__SWIG_0(swigCPtr, dest);
  }

  public void CopyFromArray(TfToken[] src) {
    USDIPCPINVOKE.VtTokenArray_CopyFromArray__SWIG_0(swigCPtr, src);
  }

  public void CopyToArray(System.IntPtr dest) {
    USDIPCPINVOKE.VtTokenArray_CopyToArray__SWIG_1(swigCPtr, dest);
  }

  public void CopyFromArray(System.IntPtr src) {
    USDIPCPINVOKE.VtTokenArray_CopyFromArray__SWIG_1(swigCPtr, src);
  }

  protected TfToken GetValue(int index) {
    TfToken ret = new TfToken(USDIPCPINVOKE.VtTokenArray_GetValue(swigCPtr, index), false);
    return ret;
  }

  protected void SetValue(int index, TfToken value) {
    USDIPCPINVOKE.VtTokenArray_SetValue(swigCPtr, index, TfToken.getCPtr(value));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
