//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class GfQuatd : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GfQuatd(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfQuatd obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GfQuatd() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_GfQuatd(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public GfQuatd() : this(USDIPCPINVOKE.new_GfQuatd__SWIG_0(), true) {
  }

  public GfQuatd(double realVal) : this(USDIPCPINVOKE.new_GfQuatd__SWIG_1(realVal), true) {
  }

  public GfQuatd(double real, double i, double j, double k) : this(USDIPCPINVOKE.new_GfQuatd__SWIG_2(real, i, j, k), true) {
  }

  public GfQuatd(double real, GfVec3d imaginary) : this(USDIPCPINVOKE.new_GfQuatd__SWIG_3(real, GfVec3d.getCPtr(imaginary)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfQuatd(GfQuatf other) : this(USDIPCPINVOKE.new_GfQuatd__SWIG_4(GfQuatf.getCPtr(other)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public GfQuatd(GfQuath other) : this(USDIPCPINVOKE.new_GfQuatd__SWIG_5(GfQuath.getCPtr(other)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public static GfQuatd GetIdentity() {
    GfQuatd ret = new GfQuatd(USDIPCPINVOKE.GfQuatd_GetIdentity(), true);
    return ret;
  }

  public double GetReal() {
    double ret = USDIPCPINVOKE.GfQuatd_GetReal(swigCPtr);
    return ret;
  }

  public void SetReal(double real) {
    USDIPCPINVOKE.GfQuatd_SetReal(swigCPtr, real);
  }

  public GfVec3d GetImaginary() {
    GfVec3d ret = new GfVec3d(USDIPCPINVOKE.GfQuatd_GetImaginary(swigCPtr), false);
    return ret;
  }

  public void SetImaginary(GfVec3d imaginary) {
    USDIPCPINVOKE.GfQuatd_SetImaginary__SWIG_0(swigCPtr, GfVec3d.getCPtr(imaginary));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetImaginary(double i, double j, double k) {
    USDIPCPINVOKE.GfQuatd_SetImaginary__SWIG_1(swigCPtr, i, j, k);
  }

  public double GetLength() {
    double ret = USDIPCPINVOKE.GfQuatd_GetLength(swigCPtr);
    return ret;
  }

  public GfQuatd GetNormalized(double eps) {
    GfQuatd ret = new GfQuatd(USDIPCPINVOKE.GfQuatd_GetNormalized__SWIG_0(swigCPtr, eps), true);
    return ret;
  }

  public GfQuatd GetNormalized() {
    GfQuatd ret = new GfQuatd(USDIPCPINVOKE.GfQuatd_GetNormalized__SWIG_1(swigCPtr), true);
    return ret;
  }

  public double Normalize(double eps) {
    double ret = USDIPCPINVOKE.GfQuatd_Normalize__SWIG_0(swigCPtr, eps);
    return ret;
  }

  public double Normalize() {
    double ret = USDIPCPINVOKE.GfQuatd_Normalize__SWIG_1(swigCPtr);
    return ret;
  }

  public GfQuatd GetConjugate() {
    GfQuatd ret = new GfQuatd(USDIPCPINVOKE.GfQuatd_GetConjugate(swigCPtr), true);
    return ret;
  }

  public GfQuatd GetInverse() {
    GfQuatd ret = new GfQuatd(USDIPCPINVOKE.GfQuatd_GetInverse(swigCPtr), true);
    return ret;
  }

  public static bool Equals(GfQuatd lhs, GfQuatd rhs) {
    bool ret = USDIPCPINVOKE.GfQuatd_Equals(GfQuatd.getCPtr(lhs), GfQuatd.getCPtr(rhs));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  override public int GetHashCode() {
    int ret = USDIPCPINVOKE.GfQuatd_GetHashCode(swigCPtr);
    return ret;
  }

    public static bool operator==(GfQuatd lhs, GfQuatd rhs){
      // The Swig binding glue will re-enter this operator comparing to null, so 
      // that case must be handled explicitly to avoid an infinite loop. This is still
      // not great, since it crosses the C#/C++ barrier twice. A better approache might
      // be to return a simple value from C++ that can be compared in C#.
      bool lnull = lhs as object == null;
      bool rnull = rhs as object == null;
      return (lnull == rnull) && ((lnull && rnull) || GfQuatd.Equals(lhs, rhs));
    }

    public static bool operator !=(GfQuatd lhs, GfQuatd rhs) {
        return !(lhs == rhs);
    }

    override public bool Equals(object rhs) {
      return GfQuatd.Equals(this, rhs as GfQuatd);
    }
  
}

}
