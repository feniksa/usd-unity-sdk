//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdGeomMesh : UsdGeomPointBased {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdGeomMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdGeomMesh_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdGeomMesh() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdGeomMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdGeomMesh(UsdPrim prim) : this(USDIPCPINVOKE.new_UsdGeomMesh__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdGeomMesh() : this(USDIPCPINVOKE.new_UsdGeomMesh__SWIG_1(), true) {
  }

  public UsdGeomMesh(UsdSchemaBase schemaObj) : this(USDIPCPINVOKE.new_UsdGeomMesh__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdGeomMesh_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdGeomMesh_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdGeomMesh Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdGeomMesh ret = new UsdGeomMesh(USDIPCPINVOKE.UsdGeomMesh_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UsdGeomMesh Define(UsdStageWeakPtr stage, SdfPath path) {
    UsdGeomMesh ret = new UsdGeomMesh(USDIPCPINVOKE.UsdGeomMesh_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetFaceVertexIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetFaceVertexIndicesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateFaceVertexIndicesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVertexIndicesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateFaceVertexIndicesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVertexIndicesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateFaceVertexIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVertexIndicesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetFaceVertexCountsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetFaceVertexCountsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateFaceVertexCountsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVertexCountsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateFaceVertexCountsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVertexCountsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateFaceVertexCountsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVertexCountsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetSubdivisionSchemeAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetSubdivisionSchemeAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateSubdivisionSchemeAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateSubdivisionSchemeAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateSubdivisionSchemeAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateSubdivisionSchemeAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateSubdivisionSchemeAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateSubdivisionSchemeAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetInterpolateBoundaryAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetInterpolateBoundaryAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateInterpolateBoundaryAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateInterpolateBoundaryAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateInterpolateBoundaryAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateInterpolateBoundaryAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateInterpolateBoundaryAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateInterpolateBoundaryAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetFaceVaryingLinearInterpolationAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetFaceVaryingLinearInterpolationAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateFaceVaryingLinearInterpolationAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVaryingLinearInterpolationAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateFaceVaryingLinearInterpolationAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVaryingLinearInterpolationAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateFaceVaryingLinearInterpolationAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateFaceVaryingLinearInterpolationAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetTriangleSubdivisionRuleAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetTriangleSubdivisionRuleAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateTriangleSubdivisionRuleAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateTriangleSubdivisionRuleAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateTriangleSubdivisionRuleAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateTriangleSubdivisionRuleAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateTriangleSubdivisionRuleAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateTriangleSubdivisionRuleAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetHoleIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetHoleIndicesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateHoleIndicesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateHoleIndicesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateHoleIndicesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateHoleIndicesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateHoleIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateHoleIndicesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetCornerIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetCornerIndicesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateCornerIndicesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCornerIndicesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCornerIndicesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCornerIndicesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCornerIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCornerIndicesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetCornerSharpnessesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetCornerSharpnessesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateCornerSharpnessesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCornerSharpnessesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCornerSharpnessesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCornerSharpnessesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCornerSharpnessesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCornerSharpnessesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetCreaseIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetCreaseIndicesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateCreaseIndicesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseIndicesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCreaseIndicesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseIndicesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCreaseIndicesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseIndicesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetCreaseLengthsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetCreaseLengthsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateCreaseLengthsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseLengthsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCreaseLengthsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseLengthsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCreaseLengthsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseLengthsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetCreaseSharpnessesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_GetCreaseSharpnessesAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateCreaseSharpnessesAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseSharpnessesAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCreaseSharpnessesAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseSharpnessesAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCreaseSharpnessesAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomMesh_CreateCreaseSharpnessesAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public static bool ValidateTopology(VtIntArray faceVertexIndices, VtIntArray faceVertexCounts, uint numPoints, /*cstype*/ out string reason) {
    bool ret = USDIPCPINVOKE.UsdGeomMesh_ValidateTopology__SWIG_0(VtIntArray.getCPtr(faceVertexIndices), VtIntArray.getCPtr(faceVertexCounts), numPoints, out reason);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ValidateTopology(VtIntArray faceVertexIndices, VtIntArray faceVertexCounts, uint numPoints) {
    bool ret = USDIPCPINVOKE.UsdGeomMesh_ValidateTopology__SWIG_1(VtIntArray.getCPtr(faceVertexIndices), VtIntArray.getCPtr(faceVertexCounts), numPoints);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float SHARPNESS_INFINITE {
    get {
      float ret = USDIPCPINVOKE.UsdGeomMesh_SHARPNESS_INFINITE_get();
      return ret;
    } 
  }

  public static void Triangulate(VtIntArray faceVertexIndices, VtIntArray faceVertexCounts) {
    USDIPCPINVOKE.UsdGeomMesh_Triangulate(VtIntArray.getCPtr(faceVertexIndices), VtIntArray.getCPtr(faceVertexCounts));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
