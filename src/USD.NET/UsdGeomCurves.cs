//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdGeomCurves : UsdGeomPointBased {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UsdGeomCurves(global::System.IntPtr cPtr, bool cMemoryOwn) : base(USDIPCPINVOKE.UsdGeomCurves_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomCurves obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdGeomCurves() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          USDIPCPINVOKE.delete_UsdGeomCurves(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UsdGeomCurves(UsdPrim prim) : this(USDIPCPINVOKE.new_UsdGeomCurves__SWIG_0(UsdPrim.getCPtr(prim)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdGeomCurves() : this(USDIPCPINVOKE.new_UsdGeomCurves__SWIG_1(), true) {
  }

  public UsdGeomCurves(UsdSchemaBase schemaObj) : this(USDIPCPINVOKE.new_UsdGeomCurves__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true) {
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited) {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdGeomCurves_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
    return ret;
  }

  public new static TfTokenVector GetSchemaAttributeNames() {
    TfTokenVector ret = new TfTokenVector(USDIPCPINVOKE.UsdGeomCurves_GetSchemaAttributeNames__SWIG_1(), false);
    return ret;
  }

  public new static UsdGeomCurves Get(UsdStageWeakPtr stage, SdfPath path) {
    UsdGeomCurves ret = new UsdGeomCurves(USDIPCPINVOKE.UsdGeomCurves_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute GetCurveVertexCountsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_GetCurveVertexCountsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateCurveVertexCountsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_CreateCurveVertexCountsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCurveVertexCountsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_CreateCurveVertexCountsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateCurveVertexCountsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_CreateCurveVertexCountsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public UsdAttribute GetWidthsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_GetWidthsAttr(swigCPtr), true);
    return ret;
  }

  public UsdAttribute CreateWidthsAttr(VtValue defaultValue, bool writeSparsely) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_CreateWidthsAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateWidthsAttr(VtValue defaultValue) {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_CreateWidthsAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UsdAttribute CreateWidthsAttr() {
    UsdAttribute ret = new UsdAttribute(USDIPCPINVOKE.UsdGeomCurves_CreateWidthsAttr__SWIG_2(swigCPtr), true);
    return ret;
  }

  public TfToken GetWidthsInterpolation() {
    TfToken ret = new TfToken(USDIPCPINVOKE.UsdGeomCurves_GetWidthsInterpolation(swigCPtr), true);
    return ret;
  }

  public bool SetWidthsInterpolation(TfToken interpolation) {
    bool ret = USDIPCPINVOKE.UsdGeomCurves_SetWidthsInterpolation(swigCPtr, TfToken.getCPtr(interpolation));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeExtent(VtVec3fArray points, VtFloatArray widths, VtVec3fArray extent) {
    bool ret = USDIPCPINVOKE.UsdGeomCurves_ComputeExtent__SWIG_0(VtVec3fArray.getCPtr(points), VtFloatArray.getCPtr(widths), VtVec3fArray.getCPtr(extent));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeExtent(VtVec3fArray points, VtFloatArray widths, GfMatrix4d transform, VtVec3fArray extent) {
    bool ret = USDIPCPINVOKE.UsdGeomCurves_ComputeExtent__SWIG_1(VtVec3fArray.getCPtr(points), VtFloatArray.getCPtr(widths), GfMatrix4d.getCPtr(transform), VtVec3fArray.getCPtr(extent));
    if (USDIPCPINVOKE.SWIGPendingException.Pending) throw USDIPCPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
